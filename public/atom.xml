<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bug开发者</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bugdeveloper.gitee.io/"/>
  <updated>2019-09-13T12:24:40.000Z</updated>
  <id>http://bugdeveloper.gitee.io/</id>
  
  <author>
    <name>Bug开发者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub Weekly-20190913</title>
    <link href="http://bugdeveloper.gitee.io/GitHub-Weekly-20190913/"/>
    <id>http://bugdeveloper.gitee.io/GitHub-Weekly-20190913/</id>
    <published>2019-09-13T09:54:15.000Z</published>
    <updated>2019-09-13T12:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/blog/GitHubWeekly-20190913/cover.jpg"><blockquote><p>图片来自 泼辣有图 By 神奈川冲浪李</p></blockquote><a id="more"></a><h1 id="Starscream"><a href="#Starscream" class="headerlink" title="Starscream"></a>Starscream</h1><p>一个使用<code>Swift</code>编写的<code>WebSocket(RFC 6455)</code>库，支持<code>iOS</code> 和 <code>MacOS</code>。支持<code>delegate</code>和<code>closures</code>。</p><p>项目地址：</p><blockquote><p><a href="https://github.com/daltoniam/Starscream" target="_blank" rel="noopener">https://github.com/daltoniam/Starscream</a></p></blockquote><h1 id="mall"><a href="#mall" class="headerlink" title="mall"></a>mall</h1><p><code>mall</code>项目致力于打造一个完整的电商系统，采用现阶段流行技术实现，包括前台商城系统及后台管理系统，基于<code>SpringBoot+MyBatis</code>实现。 前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。 后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。</p><p>项目演示地址： </p><blockquote><p><a href="http://39.98.190.128/index.html" target="_blank" rel="noopener">http://39.98.190.128/index.html</a> </p></blockquote><img src="/images/blog/GitHubWeekly-20190913/mall-1.gif"><p>项目地址：</p><blockquote><p><a href="https://github.com/macrozheng/mall" target="_blank" rel="noopener">https://github.com/macrozheng/mall</a></p></blockquote><h1 id="OpenArkCompiler"><a href="#OpenArkCompiler" class="headerlink" title="OpenArkCompiler"></a>OpenArkCompiler</h1><p><code>OpenArkCompiler</code> 是来自华为方舟编译器的开源项目。<br>面向多设备、支持多语言的统一编程平台。</p><p>项目地址：</p><blockquote><p><a href="https://gitee.com/harmonyos/OpenArkCompiler" target="_blank" rel="noopener">https://gitee.com/harmonyos/OpenArkCompiler</a></p></blockquote><p>项目主页：</p><blockquote><p><a href="https://www.openarkcompiler.cn/home" target="_blank" rel="noopener">https://www.openarkcompiler.cn/home</a></p></blockquote><h1 id="baidu-netdisk-downloaderx"><a href="#baidu-netdisk-downloaderx" class="headerlink" title="baidu-netdisk-downloaderx"></a>baidu-netdisk-downloaderx</h1><p>是否还在为百度网盘下载限速发愁？那这一款项目绝对可以尝试一下。<code>BND</code> 是一款图形界面的百度网盘不限速下载器，支持 <code>Windows</code>、<code>Linux</code> 和 <code>Mac</code>。</p><img src="/images/blog/GitHubWeekly-20190913/bnd-1.png"><img src="/images/blog/GitHubWeekly-20190913/bnd-2.png"><img src="/images/blog/GitHubWeekly-20190913/bnd-3.png"><img src="/images/blog/GitHubWeekly-20190913/bnd-4.png"><p>项目地址：</p><blockquote><p><a href="https://github.com/b3log/baidu-netdisk-downloaderx" target="_blank" rel="noopener">https://github.com/b3log/baidu-netdisk-downloaderx</a></p></blockquote><h1 id="HanLP"><a href="#HanLP" class="headerlink" title="HanLP"></a>HanLP</h1><p><code>HanLP(Han Language Processing)</code>是一系列模型与算法组成的NLP工具包，由大快搜索主导并完全开源，目标是普及自然语言处理在生产环境中的应用。HanLP具备功能完善、性能高效、架构清晰、语料时新、可自定义的特点。</p><p>项目地址：</p><blockquote><p><a href="https://github.com/hankcs/HanLP" target="_blank" rel="noopener">https://github.com/hankcs/HanLP</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个缩写也是很Chinglish了。</span><br></pre></td></tr></table></figure><h1 id="Lookin"><a href="#Lookin" class="headerlink" title="Lookin"></a>Lookin</h1><p><code>Lookin</code> 是一款 macOS 软件，它可以查看与修改 <code>iOS App</code> 里的 <code>UI</code> 对象，类似于 <code>Xcode</code> 自带的 <code>UI Inspector</code> 工具，或另一款叫做 <code>Reveal</code> 的软件。</p><img src="/images/blog/GitHubWeekly-20190913/lookin-1.jpg"><blockquote><p><a href="https://lookin.work/" target="_blank" rel="noopener">https://lookin.work/</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">免费的 Reveal 软件，良心之作。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/blog/GitHubWeekly-20190913/cover.jpg&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;图片来自 泼辣有图 By 神奈川冲浪李&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="源码" scheme="http://bugdeveloper.gitee.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Github" scheme="http://bugdeveloper.gitee.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>利用Xcode修改iPhone定位</title>
    <link href="http://bugdeveloper.gitee.io/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/"/>
    <id>http://bugdeveloper.gitee.io/利用Xcode修改iPhone定位/</id>
    <published>2019-01-30T12:28:52.000Z</published>
    <updated>2019-01-30T14:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/blog/利用Xcode修改iPhone定位/cover.jpg"><p>图片来自 泼辣有图 By sleepyeyes</p><blockquote><p>写这个话题，自然让人想到会利用这个技术去做一些不是很明亮的事情~哈哈，这个不在我们今天的讨论之中，我只提供一些技术，如有任何后果，我不承担任何责任~</p></blockquote><a id="more"></a><h1 id="0x00-准备工具"><a href="#0x00-准备工具" class="headerlink" title="0x00 准备工具"></a>0x00 准备工具</h1><ul><li>一台装了<code>Xcode</code>的<code>Mac</code>电脑</li><li>一台<code>iPhone</code>(无需越狱)</li><li>一根数据线</li></ul><h1 id="0x01-坐标选取"><a href="#0x01-坐标选取" class="headerlink" title="0x01 坐标选取"></a>0x01 坐标选取</h1><p>手机的定位是利用<code>GPS</code>来获取当前位置的经纬度信息的，手机<code>App</code>最终都是根据经纬度信息来判断当前位置是否在合理的区域内。所以我们首先需要知道，合理位置的经纬度是多少。</p><p>获取经纬度的工具有许多，高德、百度、谷歌都可以，这里我们以<a href="https://lbs.amap.com/console/show/picker" target="_blank" rel="noopener">高德</a>为例，打开网址后，利用关键字搜索到位置的经纬度如下：</p><img src="/images/blog/利用Xcode修改iPhone定位/image-1.png"><p>得到经纬度信息</p><blockquote><p>120.026208,30.279212</p></blockquote><h1 id="0x02-编写代码"><a href="#0x02-编写代码" class="headerlink" title="0x02 编写代码"></a>0x02 编写代码</h1><ol><li>打开<code>Xcode</code>，新建一个工程。</li><li>新建一个<code>gpx</code>文件，内容如下，并添加到工程。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;gpx version=&quot;1.1&quot;</span><br><span class="line">    creator=&quot;GMapToGPX 6.4j - http://www.elsewhere.org/GMapToGPX/&quot;</span><br><span class="line">    xmlns=&quot;http://www.topografix.com/GPX/1/1&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd&quot;&gt;</span><br><span class="line">    &lt;wpt lat=&quot;30.279212&quot; lon=&quot;120.026208&quot;&gt;</span><br><span class="line">    &lt;/wpt&gt;</span><br><span class="line">&lt;/gpx&gt;</span><br></pre></td></tr></table></figure><p>记得把经纬度替换为上一步从高德网页获取到的。</p><img src="/images/blog/利用Xcode修改iPhone定位/image-2.png"><h1 id="0x03-配置工程"><a href="#0x03-配置工程" class="headerlink" title="0x03 配置工程"></a>0x03 配置工程</h1><ol><li><p>在<code>Xcode</code>项目中，选择<code>Edit Scheme...</code>，然后选择<code>Run-&gt;Options-&gt;Core Location</code>。</p></li><li><p>选中<code>Allow Location Simulation</code>，并在下方的<code>Defalut Location</code>中选择刚刚新建的<code>gps.gpx</code>文件，如下图。</p></li></ol><img src="/images/blog/利用Xcode修改iPhone定位/image-3.png"><h1 id="0x04-大功告成"><a href="#0x04-大功告成" class="headerlink" title="0x04 大功告成"></a>0x04 大功告成</h1><p>连接手机，运行你的程序。由于没有写任何<code>iOS</code>相关代码，所以应该是一片白屏。不要在意这个。</p><p>不要停止你的程序，直接退到后台，然后打开你的高德地图，你发现你的位置就在阿里巴巴了。</p><img src="/images/blog/利用Xcode修改iPhone定位/image-4.png">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/blog/利用Xcode修改iPhone定位/cover.jpg&quot;&gt;
&lt;p&gt;图片来自 泼辣有图 By sleepyeyes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写这个话题，自然让人想到会利用这个技术去做一些不是很明亮的事情~哈哈，这个不在我们今天的讨论之中，我只提供一些技术，如有任何后果，我不承担任何责任~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/categories/iOS/"/>
    
    
      <category term="定位" scheme="http://bugdeveloper.gitee.io/tags/%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>两个Bug引发的阴谋论</title>
    <link href="http://bugdeveloper.gitee.io/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/"/>
    <id>http://bugdeveloper.gitee.io/两个Bug引发的阴谋论/</id>
    <published>2019-01-30T12:12:47.000Z</published>
    <updated>2019-01-30T12:22:37.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/blog/两个Bug引发的阴谋论/cover.webp"><p>图片来自 泼辣有图 By Dominic</p><h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>先说第一个事情。1月24日上午，微信出现大面积Bug。</p><p>10:30开始，有网友表示，微信疑似出现Bug，从其他App分享内容给个人/微信群，均无法正常分享，此外发送图片、文档、登陆网页版微信也短暂出现故障。</p><a id="more"></a><img src="/images/blog/两个Bug引发的阴谋论/image_1.webp"><p>微信作为第一社交软件，顿时上了热搜。就连腾讯集团公关总监张军都公开在其朋友圈表示：“微信bug正在紧急修复中，大家稍等，抱歉。”</p><img src="/images/blog/两个Bug引发的阴谋论/image_2.webp"><p>此次宕机大约持续了大约20分钟，影响了公众号、支付、搜索、小程序等功能的正常使用，但据微信方面回应，相关账号信息无影响。在10:50的时候开始陆续恢复社交功能。</p><p>随后张军又在其朋友圈调侃了一番：“感觉像是给攻城狮敲了一记醒神棒，哪怕快过年了也别想放松。”</p><img src="/images/blog/两个Bug引发的阴谋论/image_3.webp"><p>从这个事件可以看出三点：</p><ol><li><p>在这个离不开手机的年代，大家也渐渐离不开微信。只是大约20分钟的宕机，在网上就沸沸扬扬，微信真是稳坐社交第一把交椅。</p></li><li><p>微信团队对Bug的处理速度之快令人咂舌。从问题上报、分析定位、解决、测试、上线，一套流程走下来竟然只有大约20分钟。</p></li><li><p>此次事件是微信后端服务出了问题，可能是新上线或修改了某个服务导致的，所以客户端并不需要重新更新。</p></li></ol><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>再说第二个事情。1月22日19时，大量抖音新用户反馈，无法使用微信授权方式登录、使用抖音。</p><p>抖音团队也是第一时间来定位分析，不过结果并不乐观。可以确定是微信屏蔽了抖音的微信授权。后来有媒体表示，据“微信内部人士”回应：因为抖音获取微信好友信息，涉及泄漏用户隐私，所以屏蔽了抖音。对于这个不想做过多的评价。</p><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>头腾之战从未停歇。字节跳动靠今日头条起家，又因抖音大火了一把。而后又开始涉及社交领域，双方之争愈演愈烈。</p><ul><li><p>最开始，微信封杀来自抖音分享到朋友圈的视频连接；</p></li><li><p>今年1月15日，微信屏蔽多闪的下载连接；</p></li><li><p>今年1月19日，微信又屏蔽了字节跳动域名（bytedance.com）；</p></li><li><p>1月22日，微信屏蔽抖音的微信登录授权；</p></li></ul><p>腾讯和字节跳动之战已经进入白热化。在这场战争中，我不去评判到底谁对谁错。或许在这商业竞争之中，又岂有对错之分？</p><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>事情说完之后，回头再回顾一下两件事情：</p><p>1月22日，微信屏蔽抖音的微信授权；</p><p>1月24日，微信被爆出史诗级Bug，社交功能宕机。</p><p>这其中很是令人回味。</p><p>这自然只是我的一番阴谋论，毕竟张军没有公布为什么微信会宕机，只是调侃了攻城狮一番。</p><h3 id="往期精选▼"><a href="#往期精选▼" class="headerlink" title="往期精选▼"></a>往期精选▼</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&amp;mid=2247483824&amp;idx=1&amp;sn=7eb1136636058eef859cec833807f812&amp;chksm=f9a84947cedfc051555c8ec9413cc16faacee32aee183dbb5c9b94c42c7cc8583177dd3b36cd&amp;token=1073312084&amp;lang=zh_CN#rd" target="_blank" rel="noopener">1. Flutter初体验</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&amp;mid=2247483809&amp;idx=1&amp;sn=b07e91d707efed590e2e324120a7722b&amp;chksm=f9a84956cedfc040a5381b73c4923af25dcb199a51a95008763cf98f6568d7ef576f790ac17a&amp;token=1073312084&amp;lang=zh_CN#rd" target="_blank" rel="noopener">2. 为什么我觉得Flutter短期内不会流行但依然选择学习它</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&amp;mid=2247483809&amp;idx=2&amp;sn=2c01cd74ed6d6695d4477772af67f39a&amp;chksm=f9a84956cedfc04019d5538990a0299f130dfbd09c62dc812f43f60c4b9f73036ebac72ec5ca&amp;token=1073312084&amp;lang=zh_CN#rd" target="_blank" rel="noopener">3. 说两个知识点</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&amp;mid=2247483780&amp;idx=1&amp;sn=643d282c7be6ae095106fca0651695c2&amp;chksm=f9a84973cedfc065814ff0ad2668c49f89cd7340a72447e88116b219f12c3281643842c0a254&amp;token=1073312084&amp;lang=zh_CN#rd" target="_blank" rel="noopener">4. 在小程序中集成赞赏</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/blog/两个Bug引发的阴谋论/cover.webp&quot;&gt;
&lt;p&gt;图片来自 泼辣有图 By Dominic&lt;/p&gt;
&lt;h1 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h1&gt;&lt;p&gt;先说第一个事情。1月24日上午，微信出现大面积Bug。&lt;/p&gt;
&lt;p&gt;10:30开始，有网友表示，微信疑似出现Bug，从其他App分享内容给个人/微信群，均无法正常分享，此外发送图片、文档、登陆网页版微信也短暂出现故障。&lt;/p&gt;
    
    </summary>
    
      <category term="疯言疯语" scheme="http://bugdeveloper.gitee.io/categories/%E7%96%AF%E8%A8%80%E7%96%AF%E8%AF%AD/"/>
    
    
      <category term="疯言疯语" scheme="http://bugdeveloper.gitee.io/tags/%E7%96%AF%E8%A8%80%E7%96%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>使用LeanCloud快速开发一款小程序</title>
    <link href="http://bugdeveloper.gitee.io/%E4%BD%BF%E7%94%A8LeanCloud%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BE%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://bugdeveloper.gitee.io/使用LeanCloud快速开发一款小程序/</id>
    <published>2019-01-26T06:03:04.000Z</published>
    <updated>2019-01-26T06:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开发小程序离不开后台数据，对于独立开发者来说，既要写前端，又要写后端，工作量就会骤然增大。微信提供的云开发无疑是给独立开发者提供了很大的便利，但是由于其数据库不支持联表查询，对于某些场景就不是那么的友好了。当然，市面上有很多的<code>BaaS</code>服务提供商，大都类似，今天我们就用其中的一个<code>LeanCloud</code>来讲解一下，如何快速使用<code>LeanCloud</code>来开发一个小程序。<br>由于本次重点在<code>LeanCloud</code>，所以小程序的开发内容就不是重点。</p><a id="more"></a><h1 id="现在开始"><a href="#现在开始" class="headerlink" title="现在开始"></a>现在开始</h1><ol><li>先去<a href="https://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a>官网注册一个账号，然后登录去控制台创建一个新应用。</li><li>在微信小程序后台中配置域名白名单，具体需要按照<a href="https://leancloud.cn/docs/weapp-domains.html" target="_blank" rel="noopener">这里</a>说明的来配置，你也可以先跳过这一步，等完全开发完毕后再来配置。可在开发者工具的 <strong>详情</strong> &gt; <strong>项目设置</strong> 中勾选<strong>不校验安全域名、TLS 版本以及 HTTPS 证书</strong>。</li><li>下载你熟悉的SDK，目前支持<code>JS</code>，<code>WePY</code>，<code>mpvue</code>，下载链接在<a href="https://leancloud.cn/docs/sdk_setup-js.html#hash649053555" target="_blank" rel="noopener">这里</a>，后面以<code>JS</code>来说明，其他方式的<code>SDK</code>导入以及使用方法参考文档中的说明。</li><li><p>初始化<code>SDK</code>，在<code>app.js</code>中加入以下代码即可。<code>appId</code>和<code>appKey</code>可以在控制台中的应用找到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const AV = require(&apos;./utils/av-live-query-weapp-min&apos;);</span><br><span class="line"></span><br><span class="line">AV.init(&#123;</span><br><span class="line">  appId: &apos;换成你自己的appId&apos;,</span><br><span class="line">  appKey: &apos;换成你自己的appKey&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询数据<br>先需要在控制台中的应用下新建一个表，在网页中叫做<code>Class</code>。每一张表会默认创建<code>objectId</code>、<code>createdAt</code>、<code>updatedAt</code>、<code>ACL</code>四个字段，分别表示<code>数据索引</code>，<code>创建时间</code>，<code>更新时间</code>、<code>权限</code>。你可以添加你想要的字段，目前支持以下几种类型。<br><img src="https://img-blog.csdnimg.cn/20181224211110711.png" alt="支持类型"></p></li></ol><p>其中<code>Object</code>是<code>map</code>对象，<code>GeoPoint</code>是经纬度信息，<code>Pointer</code>是另外一张表的表名，做多表联合查询使用的。<br>假设我们的表名是<code>T_TODO</code>，我们可以用以下代码来查询该表下面的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new AV.Query(&apos;T_TODO&apos;)</span><br><span class="line">      .descending(&apos;createdAt&apos;) // 排序</span><br><span class="line">      .limit(10) // 分页数量</span><br><span class="line">      .skip(10) // 跳过数量</span><br><span class="line">      .find()</span><br><span class="line">      .then(function(results) &#123;</span><br><span class="line">      that.setData(&#123;todo: results&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(console.error);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>  在你的<code>WXML</code>中可以这样写来做数据绑定：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!-- pages/todos/todos.wxml --&gt;</span><br><span class="line">&lt;block wx:for=&quot;&#123;&#123;todos&#125;&#125;&quot; wx:for-item=&quot;todo&quot; wx:key=&quot;objectId&quot;&gt;</span><br><span class="line">  &lt;text data-id=&quot;&#123;&#123;todo.objectId&#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123;todo.content&#125;&#125;</span><br><span class="line">  &lt;/text&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure></p><p>是不是很方便。</p><ol start="6"><li><p>多表查询<br>如果需要多多表查询，先要在一张表中新建一个<code>Pointer</code>字段，新建时会让你选择指向的表名，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20181224215910353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70" alt="演示"><br>然后在查询是使用<code>include</code>，就会返回关联表中的所有信息了，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new AV.Query(&apos;T_TODO&apos;)</span><br><span class="line">      .descending(&apos;createdAt&apos;) // 排序</span><br><span class="line">      .limit(10) // 分页数量</span><br><span class="line">      .skip(10) // 跳过数量</span><br><span class="line">      .include(&apos;T_POINT_CLASS&apos;)</span><br><span class="line">      .find()</span><br><span class="line">      .then(function(results) &#123;</span><br><span class="line">      that.setData(&#123;todo: results&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(console.error);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>更新对象<br>小程序中对表中字段做操作后，需要同步更新到服务端，可以使用以下代码来保存对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 第一个参数是 className，第二个参数是 objectId</span><br><span class="line">var todo = AV.Object.createWithoutData(&apos;Todo&apos;, &apos;5745557f71cfe40068c6abe0&apos;);</span><br><span class="line">// 修改属性</span><br><span class="line">todo.set(&apos;content&apos;, &apos;每周工程师会议，本周改为周三下午3点半。&apos;);</span><br><span class="line">// 保存到云端</span><br><span class="line">todo.save();</span><br></pre></td></tr></table></figure><ol start="8"><li>其他更多的操作请查看文档，不过你找不到小程序对应的详细开发文档，只能找到<a href="https://leancloud.cn/docs/leanstorage_guide-js.html#hash810954180" target="_blank" rel="noopener">数据存储开发指南 · JavaScript</a></li></ol></li></ol><h1 id="广告时间"><a href="#广告时间" class="headerlink" title="广告时间"></a>广告时间</h1><p><code>三国图鉴</code>是我业余时间开发的查询三国杀武将技能以及官方活动的小程序，后台服务就是由<code>LeanCloud</code>提供的，请大家多多关照。如果有其他问题，你可以关注我的公众号来联系我。</p><ul><li>扫码体验小程序<br><img src="https://img-blog.csdnimg.cn/20181224221759234.png" alt="三国图鉴"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开发小程序离不开后台数据，对于独立开发者来说，既要写前端，又要写后端，工作量就会骤然增大。微信提供的云开发无疑是给独立开发者提供了很大的便利，但是由于其数据库不支持联表查询，对于某些场景就不是那么的友好了。当然，市面上有很多的&lt;code&gt;BaaS&lt;/code&gt;服务提供商，大都类似，今天我们就用其中的一个&lt;code&gt;LeanCloud&lt;/code&gt;来讲解一下，如何快速使用&lt;code&gt;LeanCloud&lt;/code&gt;来开发一个小程序。&lt;br&gt;由于本次重点在&lt;code&gt;LeanCloud&lt;/code&gt;，所以小程序的开发内容就不是重点。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://bugdeveloper.gitee.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://bugdeveloper.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="LeanCloud" scheme="http://bugdeveloper.gitee.io/tags/LeanCloud/"/>
    
  </entry>
  
  <entry>
    <title>在小程序中集成赞赏</title>
    <link href="http://bugdeveloper.gitee.io/%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E9%9B%86%E6%88%90%E8%B5%9E%E8%B5%8F/"/>
    <id>http://bugdeveloper.gitee.io/在小程序中集成赞赏/</id>
    <published>2019-01-26T06:01:45.000Z</published>
    <updated>2019-01-26T06:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阅读本文大概需要3分钟。</p></blockquote><p>好吧，我承认我标题党了，如果你是进来找如何搭建小程序中的支付流程的，请你下车吧~</p><p>这篇文章是介绍个人小程序如何集成赞赏功能的，利用微信小程序提供的支付接口必须具有公司资质才可以。或者你也可以集成有赞，不过会抽取一定的手续费。</p><a id="more"></a><p>言归正传，让我们一步一步来集成赞赏吧，让那些喜欢你的用户也可以打赏你一下。</p><h2 id="生成一个赞赏码。"><a href="#生成一个赞赏码。" class="headerlink" title="生成一个赞赏码。"></a>生成一个赞赏码。</h2><p>打开微信，点击右上角<code>加号-&gt;收付款-&gt;赞赏码</code>，这里你可以进行一些赞赏设置，然后点击保存赞赏码。这样你就拥有了你专属的赞赏码了。</p><h2 id="获取一个图片地址"><a href="#获取一个图片地址" class="headerlink" title="获取一个图片地址"></a>获取一个图片地址</h2><ul><li>如果你有服务器或者其他的存储空间，你可以把你的赞赏码上传到你的存储空间，然后拿到图片的<code>htts</code>地址，后面会用到。</li><li>如果你没有，那么还可以利用小程序给我们提供的免费的云开发。下面先来说一下如何将图片上传到云存储中。<ol><li>打开小程序开发工具，找到云开发后点击，如果你没有开通，则会提示你开通，需要在控制台中开通，路径是：<code>开发-&gt;开发者设置-&gt;腾讯云</code>。<br><img src="https://img-blog.csdnimg.cn/20190104120313434.png" alt="在这里插入图片描述"></li><li>开通后再点击<code>云开发</code>，打开控制台，找到<code>存储管理-&gt;上传文件</code>,上传上一步你的专属赞赏码图片。上传完成后，就能看到文件了，将<code>fileid</code>字段复制下来，后面会用到。<br><img src="https://img-blog.csdnimg.cn/20190104124836439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol></li></ul><h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><p>这一步需要根据实际情况分开来处理了，下面针对上一步说的两种形式一一讲解。</p><h3 id="1-使用其他云存储"><a href="#1-使用其他云存储" class="headerlink" title="1. 使用其他云存储"></a>1. 使用其他云存储</h3><p>拿到图片的<code>https</code>链接后，在你的小程序<code>wxml</code>添加一个<code>打赏</code>的按钮，然后给按钮添加如下点击事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.previewImage(&#123;</span><br><span class="line">     urls: [&apos;https://xxxxx/admire-qrcode.jpg&apos;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>写到这里相信大家应该就很清楚了，不错，我们就是利用微信的图片预览功能来加载网络图片。当加载出预览大图二维码后，用户就可以长按识别二维码，弹出微信的<code>识别图中二维码</code>功能，最终跳转到微信自带的赞赏页面，是不是很赞呢~</p><h3 id="2-使用云开发存储"><a href="#2-使用云开发存储" class="headerlink" title="2. 使用云开发存储"></a>2. 使用云开发存储</h3><p>使用云开发存储的思路是一致的，只不过需要在代码中初始化一些云开发环境。</p><ul><li><p>初始化云开发<br>在<code>app.js</code>中加入如下代码进行初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onLaunch: function() &#123;</span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      traceUser: true</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加按钮点击事件<br>点击事件中传入的<code>url</code>就是第二步获取到的<code>fileid</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">previewImage: function() &#123;</span><br><span class="line">    wx.previewImage(&#123;</span><br><span class="line">        urls: [&apos;cloud://carutil-007.6361-carutil-007/admire-qrcode.jpg&apos;],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><p>大功告成，最终效果如下图所示。<br><img src="https://img-blog.csdnimg.cn/20190104130648991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>你可以扫描下方的小程序码来体验该功能，在首页最底部有个打赏按钮~<br><img src="https://img-blog.csdnimg.cn/20190104131248871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>也可以扫码赞赏~<br><img src="https://img-blog.csdnimg.cn/20190104130638423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;阅读本文大概需要3分钟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好吧，我承认我标题党了，如果你是进来找如何搭建小程序中的支付流程的，请你下车吧~&lt;/p&gt;
&lt;p&gt;这篇文章是介绍个人小程序如何集成赞赏功能的，利用微信小程序提供的支付接口必须具有公司资质才可以。或者你也可以集成有赞，不过会抽取一定的手续费。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://bugdeveloper.gitee.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://bugdeveloper.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="赞赏" scheme="http://bugdeveloper.gitee.io/tags/%E8%B5%9E%E8%B5%8F/"/>
    
  </entry>
  
  <entry>
    <title>从两道面试题说起</title>
    <link href="http://bugdeveloper.gitee.io/%E4%BB%8E%E4%B8%A4%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AF%B4%E8%B5%B7/"/>
    <id>http://bugdeveloper.gitee.io/从两道面试题说起/</id>
    <published>2019-01-26T05:58:34.000Z</published>
    <updated>2019-01-26T06:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-中是否存在野指针的情况？"><a href="#iOS-中是否存在野指针的情况？" class="headerlink" title="iOS 中是否存在野指针的情况？"></a><code>iOS</code> 中是否存在野指针的情况？</h1><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>野指针指向一个已删除的对象或未申请访问受限内存区域的指针。特别要指出的是野指针不是空指针。</p><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a><code>Block</code></h2><p>一提到 <code>Block</code> 大家肯定都知道要说的是循环引用。在 <code>ARC</code> 中，如果两个对象相互持有对方，就会造成循环引用，导致内存无法释放。在 <code>Block</code> 中，最常用的场景则是，<code>self</code> 持有 <code>block</code> ， <code>block</code> 中又持有了 <code>self</code> 。例如下方一段代码：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatmaic, copy) Block dataChanged;</span><br><span class="line"></span><br><span class="line">- (void)setUpModel&#123;</span><br><span class="line">  XYModel *model = [XYModel new];</span><br><span class="line">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class="line">      self.titleLabel.text = title;                </span><br><span class="line">  &#125;;</span><br><span class="line">  self.model = model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的这段代码就会造成循环引用。那我们怎么破除呢？通常的做法都是使用 <code>weakSelf</code> 来处理，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)setUpModel &#123;</span><br><span class="line">  XYModel *model = [XYModel new];</span><br><span class="line">  __weak typeof(self) weakSelf = self;</span><br><span class="line">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class="line">      weakSelf.titleLabel.text = title;   </span><br><span class="line">  &#125;;</span><br><span class="line">  self.model = model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或许你还看到另外一种不是很一样的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)setUpModel &#123;</span><br><span class="line">  XYModel *model = [XYModel new];</span><br><span class="line">  __weak typeof(self) weakSelf = self;</span><br><span class="line">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class="line">      __strong typeof(self) strongSelf = weakSelf;</span><br><span class="line">      strongSelf.titleLabel.text = title;   </span><br><span class="line">  &#125;;</span><br><span class="line">  self.model = model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对比一下，多了一个 <code>strongSelf</code> 。那为什么又要多加一个 <code>strongSelf</code> 呢？</p><p>考虑一下下面的代码，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__weak __typeof__(self) weakSelf = self;</span><br><span class="line">dispatch_group_async(_operationsGroup, _operationsQueue, ^&#123;</span><br><span class="line">  [weakSelf doSomething];</span><br><span class="line">  [weakSelf doSomethingElse];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在 <code>doSomething</code> 时， <code>weakSelf</code> 不会被释放，但是在 <code>doSomethingElse</code> 时，<code>weakSelf</code> 有可能被释放。</p><p>这个时候就遇到了野指针问题，回答了一开始的题目。</p><p>在这里就需要用到 <code>strongSelf</code> ，使用 <code>__strong</code> 确保在 <code>Block</code> 内， <code>strongSelf</code> 不会被释放。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p>在使用 <code>Block</code> 时，如遇到循环引用问题，可以使用 <code>__weak</code> 来破除循环引用。</p></li><li><p>如果在 <code>Block</code> 内需要多次访问 <code>__weak</code> 变量，则需要使用 <code>__strong</code> 来保持变量不会被释放。</p></li></ul><h1 id="SDWebImage-中为什么要解码图片"><a href="#SDWebImage-中为什么要解码图片" class="headerlink" title="SDWebImage 中为什么要解码图片"></a><code>SDWebImage</code> 中为什么要解码图片</h1><p>要说明这么问题我们需要先了解一下在 <code>iOS</code> 中，图片显示的流程。</p><blockquote><p>概括来说，从磁盘中加载一张图片，并将它显示到屏幕上，中间的主要工作流如下：</p><p>假设我们使用 <code>imageWithContentsOfFile:</code>方法从磁盘中加载一张图片，这个时候的图片并没有解压缩；</p><p>然后将生成的 <code>UIImage</code> 赋值给 <code>UIImageView</code> ；</p><p>接着一个隐式的 <code>CATransaction</code> 捕获到了 <code>UIImageView</code> 图层树的变化；</p><p>在主线程的下一个 <code>run loop</code> 到来时，<code>Core Animation</code> 提交了这个隐式的 <code>transaction</code> ，这个过程可能会对图片进行 <code>copy</code>  操作，而受图片是否字节对齐等因素的影响，这个 <code>copy</code> 操作可能会涉及以下部分或全部步骤：</p><ul><li>分配内存缓冲区用于管理文件 <code>IO</code> 和解压缩操作；</li><li>将文件数据从磁盘读到内存中；</li><li>将压缩的图片数据解码成未压缩的位图形式，这是一个非常耗时的 <code>CPU</code> 操作；</li><li>最后 <code>Core Animation</code> 使用未压缩的位图数据渲染 <code>UIImageView</code> 的图层。</li></ul><p>在上面的步骤中，我们提到了图片的解压缩是一个非常耗时的 <code>CPU</code> 操作，并且它默认是在主线程中执行的。那么当需要加载的图片比较多时，就会对我们应用的响应性造成严重的影响，尤其是在快速滑动的列表上，这个问题会表现得更加突出。</p></blockquote><p>这里顺便提一下 <code>imageNamed:</code> 和 <code>imageWithContentsOfFile:</code> 的区别，这两个 <code>API</code> 都需要解码，并且工作流程都是一致的。不过<code>imageNamed:</code>会做缓存处理，在下一次用到相同的资源时，就会从缓存里面读取。而 <code>imageWithContentsOfFile:</code> 则不会。所以网上大多文章都会告诉你，多次使用的小图片使用 <code>imageNamed:</code> 加载，一次性使用的大图片使用 <code>imageWithContentsOfFile:</code> 加载。</p><p>对于上面引用的流程中最后提到，当有大量图片滑动时就会造成主线程的卡顿，原因就是解码图片在主线程中操作的。那有什么办法避免呢？<br>我在查询关于这个问题的相关资料时，发现有些博客给出了2种方案：</p><blockquote><ol><li><p>我们不使用<code>imageNamed:</code>加载图片，使用其他的方法，比如<code>imageWithContentsOfFile:</code></p></li><li><p>我们自己解码图片，可以把这个解码过程放到子线程</p></li></ol></blockquote><p>其实第一种方式没法避免卡顿。这就引出了为什么 <code>SDWebImage</code>中需要自己解码图片。</p><blockquote><p>在我们使用 <code>UIImage</code> 的时候，创建的图片通常不会直接加载到内存，而是在渲染的时候再进行解压并加载到内存。这就会导致 <code>UIImage</code> 在渲染的时候效率上不是那么高效。为了提高效率通过 <code>decodedImageWithImage</code> 方法把图片提前解压加载到内存，这样这张新图片就不再需要重复解压了，提高了渲染效率。这是一种空间换时间的做法。</p></blockquote><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><ol><li><a href="http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/" target="_blank" rel="noopener">到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf</a> 浮生猎趣</li><li><a href="http://blog.leichunfeng.com/blog/2017/02/20/talking-about-the-decompression-of-the-image-in-ios/#jtss-tsina" target="_blank" rel="noopener">谈谈 iOS 中图片的解压缩</a> 雷纯锋的技术博客</li><li><a href="https://www.jianshu.com/p/dfa47380fc05" target="_blank" rel="noopener">SDWebImage源码解析（三）——SDWebImage图片解码/压缩模块</a> SHY圆圆圈圈圆圆</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS-中是否存在野指针的情况？&quot;&gt;&lt;a href=&quot;#iOS-中是否存在野指针的情况？&quot; class=&quot;headerlink&quot; title=&quot;iOS 中是否存在野指针的情况？&quot;&gt;&lt;/a&gt;&lt;code&gt;iOS&lt;/code&gt; 中是否存在野指针的情况？&lt;/h1&gt;&lt;h2 id=&quot;野指针&quot;&gt;&lt;a href=&quot;#野指针&quot; class=&quot;headerlink&quot; title=&quot;野指针&quot;&gt;&lt;/a&gt;野指针&lt;/h2&gt;&lt;p&gt;野指针指向一个已删除的对象或未申请访问受限内存区域的指针。特别要指出的是野指针不是空指针。&lt;/p&gt;
&lt;h2 id=&quot;Block&quot;&gt;&lt;a href=&quot;#Block&quot; class=&quot;headerlink&quot; title=&quot;Block&quot;&gt;&lt;/a&gt;&lt;code&gt;Block&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;一提到 &lt;code&gt;Block&lt;/code&gt; 大家肯定都知道要说的是循环引用。在 &lt;code&gt;ARC&lt;/code&gt; 中，如果两个对象相互持有对方，就会造成循环引用，导致内存无法释放。在 &lt;code&gt;Block&lt;/code&gt; 中，最常用的场景则是，&lt;code&gt;self&lt;/code&gt; 持有 &lt;code&gt;block&lt;/code&gt; ， &lt;code&gt;block&lt;/code&gt; 中又持有了 &lt;code&gt;self&lt;/code&gt; 。例如下方一段代码：&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/tags/iOS/"/>
    
      <category term="面试" scheme="http://bugdeveloper.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Flutter初体验</title>
    <link href="http://bugdeveloper.gitee.io/Flutter%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://bugdeveloper.gitee.io/Flutter初体验/</id>
    <published>2019-01-26T05:55:40.000Z</published>
    <updated>2019-01-26T06:05:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>在我的<code>iPhone 8</code>上，列表滑动还是比较卡的。</li><li>用<code>VS Code</code>好像代码提示不够智能。</li><li>嵌套是真的醉了。</li></ul></blockquote><h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><blockquote><p>这里介绍的是<code>Mac</code>平台下的开发环境搭建，使用的<code>IDE</code>是<code>VS Code</code>。如果你使用的是<code>Windows</code>或<code>Linux</code>，可以查看<a href="https://flutterchina.club/setup-windows/" target="_blank" rel="noopener">Flutter中文网</a>上的介绍。</p></blockquote><a id="more"></a><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装<code>Flutter</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone -b beta https://github.com/flutter/flutter.git</span><br><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br><span class="line">export PATH=`pwd`/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>上面在命令行中设置的环境变量，只是针对当前的会话。所以我们需要将他们写道系统配置中。</p><p><code>open $HOME/.bash_profile</code></p><p>如果目录下不存在改文件，则手动创建一个。然后将下面的代码粘贴进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br><span class="line">export PATH=PATH_TO_FLUTTER_GIT_DIRECTORY/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>其中<code>PATH_TO_FLUTTER_GIT_DIRECTORY</code>是你<code>clone</code>的<code>flutter</code>的目录，需要你自己替换掉。</p><p>运行<code>source $HOME/.bash_profile</code>。</p><blockquote><p>注意: 如果你使用的是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ~/.zshrc ，在其中添加：source ~/.bash_profile</p></blockquote><h2 id="iOS设置"><a href="#iOS设置" class="headerlink" title="iOS设置"></a>iOS设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>如果你之前没有用过<code>cocoapods</code>，需要设置一下镜像。命令行中运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>查看当前使用的<code>RubyGems</code>源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p>后面的<code>--remove</code>附带的参数将上一步查看到的源写上，然后再查看一下<code>RubyGems</code>源是否正确，确保如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure><p>如果还有其他关于<code>RubyGems</code>的问题，可以到 <a href="https://gems.ruby-china.com/" target="_blank" rel="noopener">https://gems.ruby-china.com/</a> 获得帮助。</p><h2 id="配置VS-Code"><a href="#配置VS-Code" class="headerlink" title="配置VS Code"></a>配置<code>VS Code</code></h2><ul><li>安装<code>VS Code</code></li></ul><p>你可以去官网下载，然后安装。这里是<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">传送门</a>。</p><ul><li>安装<code>Flutter</code>插件。</li></ul><p>打开后，点击左边侧边栏的插件按钮，搜索<code>Flutter</code>插件。<br><img src="https://img-blog.csdnimg.cn/20190119210415163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一个就是<code>Flutter</code>，安装<code>Flutter</code>同时会安装<code>Dart</code>插件，等安装完毕后，再<code>reload</code>一下就可以了。</p><h2 id="第一个Flutter工程"><a href="#第一个Flutter工程" class="headerlink" title="第一个Flutter工程"></a>第一个<code>Flutter</code>工程</h2><p>打开你的<code>VS Code</code>，<code>View-&gt;Command Palette</code>，输入<code>flutter</code>并选择<code>Flutter: New Project</code>，输入一个工程名，就叫<code>hello_flutter</code>吧。</p><blockquote><p>名称只能是小写字母和下划线，是不是很变态啊。</p></blockquote><p>回车后选择一个目录，工程就创建好了。</p><p>在<code>VS Code</code>下方的输出区域，给我们提供了<code>TERMINAL</code>功能，连接你的手机，在<code>TERMINAL</code>中敲下<code>flutter run</code>，就会看到正在编译了。完成后，就能在手机上看到你的第一个<code>flutter</code>应用了。</p><blockquote><p>这里需要先配置<code>Xcode</code>以及证书相关。</p></blockquote><p>至此，你就可以开启你的<code>flutter</code>之旅了。你可以按照<a href="https://flutterchina.club/get-started/codelab/" target="_blank" rel="noopener">这篇文章</a>来修改你的工程，创建一个列表来体验。</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><ol><li><a href="https://flutterchina.club/" target="_blank" rel="noopener"><code>Flutter</code>中文网</a></li><li><a href="https://github.com/yang7229693/flutter-study/blob/master/post/1.%20Flutter%20%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md" target="_blank" rel="noopener"><code>Flutter</code>不一样的跨平台解决方案</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在我的&lt;code&gt;iPhone 8&lt;/code&gt;上，列表滑动还是比较卡的。&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;VS Code&lt;/code&gt;好像代码提示不够智能。&lt;/li&gt;
&lt;li&gt;嵌套是真的醉了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开发环境搭建&quot;&gt;&lt;a href=&quot;#开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;开发环境搭建&quot;&gt;&lt;/a&gt;开发环境搭建&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这里介绍的是&lt;code&gt;Mac&lt;/code&gt;平台下的开发环境搭建，使用的&lt;code&gt;IDE&lt;/code&gt;是&lt;code&gt;VS Code&lt;/code&gt;。如果你使用的是&lt;code&gt;Windows&lt;/code&gt;或&lt;code&gt;Linux&lt;/code&gt;，可以查看&lt;a href=&quot;https://flutterchina.club/setup-windows/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter中文网&lt;/a&gt;上的介绍。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://bugdeveloper.gitee.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://bugdeveloper.gitee.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>小程序利用Canvas绘制图片和竖排文字</title>
    <link href="http://bugdeveloper.gitee.io/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%A9%E7%94%A8Canvas%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87%E5%92%8C%E7%AB%96%E6%8E%92%E6%96%87%E5%AD%97/"/>
    <id>http://bugdeveloper.gitee.io/小程序利用Canvas绘制图片和竖排文字/</id>
    <published>2018-05-14T13:53:44.000Z</published>
    <updated>2018-05-14T15:07:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>闲暇时间抽个空写了个三国杀武将手册的小程序，中间有个需求设计的是合成武将皮肤图、竖排的武将姓名、以及小程序码，然后提供保存图片到相册，最终让用户可以分享到朋友圈或其他平台。合成图片应该按照<code>Canvas</code>的文档来做都没什么问题，主要是有个竖排文字的需求，这里和大家分享一下。</p><a id="more"></a><h1 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h1><p>宣传一下自己的小程序，有喜欢三国杀的可以关注一下，有什么问题也可以加我微信一起讨论。</p><p><code>扫码体验小程序</code></p><p><img src="https://user-gold-cdn.xitu.io/2018/5/14/1635f1e3b5c1ccc4?w=258&amp;h=258&amp;f=jpeg&amp;s=52521" alt=""></p><p><code>扫码添加好友，请备注：三国杀</code></p><p><img src="https://user-gold-cdn.xitu.io/2018/5/14/1635f1ee2a33cc4e?w=564&amp;h=786&amp;f=jpeg&amp;s=59275" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先放一张最终保存到相册的图片吧~</p><p><img src="https://user-gold-cdn.xitu.io/2018/5/14/1635f1f27875f56d?w=640&amp;h=640&amp;f=jpeg&amp;s=69607" alt=""></p><blockquote><p>自我感觉良好，至少达到了我自己的预期吧~~~</p></blockquote><p>下面让我们一步一步来看看如何实现的吧。</p><p>整个图片分为三个部分：</p><ol><li>武将图片</li><li>小程序码</li><li>武将文字信息</li></ol><p>先来看一下<code>wxml</code>里面的代码，主要是放了一个<code>canvas</code>标签，控制了一下高度和宽度属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;canvas class=&apos;share-canvas&apos; style=&quot;width:100%;height:&#123;&#123;canvasHeight&#125;&#125;px&quot; canvas-id=&quot;share_canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="武将图片"><a href="#武将图片" class="headerlink" title="武将图片"></a>武将图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">drawHeroImage: function (path) &#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    // 拿到canvas context</span><br><span class="line">    let ctx = wx.createCanvasContext(&apos;share_canvas&apos;);</span><br><span class="line">    // 为了保证图片比例以及绘制的位置，先要拿到图片的大小</span><br><span class="line">    wx.getImageInfo(&#123;</span><br><span class="line">      src: path,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line"></span><br><span class="line">  // 计算图片占比信息</span><br><span class="line">        let maxWidth = Math.min(res.width, that.data.canvasWidth * 0.65);</span><br><span class="line">        let radio = maxWidth / res.width;</span><br><span class="line"></span><br><span class="line">        let offsetY = (that.data.canvasHeight - res.height * radio) / 2;</span><br><span class="line">        console.log(&apos;offsetY=&apos; + offsetY);</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          imageWidth: res.width * radio,</span><br><span class="line">          imageHeight: res.height * radio,</span><br><span class="line">          offsetY: offsetY,</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        // 绘制canvas背景，不属于绘制图片部分</span><br><span class="line">        ctx.setFillStyle(&apos;white&apos;)</span><br><span class="line">        ctx.fillRect(0, 0, that.data.canvasWidth, that.data.canvasHeight);</span><br><span class="line">        // 绘制武将图片，path是本地路径，不可以传网络url，如果是网络图片需要先下载</span><br><span class="line">        ctx.drawImage(path, 10, offsetY, res.width * radio, res.height * radio)</span><br><span class="line">        // 绘制小程序码</span><br><span class="line">        that.drawQrCodeImage(ctx);</span><br><span class="line">        // 绘制势力汉字：吴</span><br><span class="line">        that.drawInfluence(ctx, that.data.hero.HERO.INFLUENCE);</span><br><span class="line">        // 绘制武将姓名：陆逊</span><br><span class="line">        that.drawName(ctx, that.data.hero.HERO.NAME);</span><br><span class="line">        // 绘制武将称号：江陵侯</span><br><span class="line">        that.drawHorner(ctx, that.data.hero.HERO.HORNER);</span><br><span class="line">        // 最终调用draw函数，生成预览图</span><br><span class="line">        // 一个坑点：只能调用一次，否则后面的会覆盖前面的</span><br><span class="line">        ctx.draw();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="小程序码"><a href="#小程序码" class="headerlink" title="小程序码"></a>小程序码</h3><p>小程序码和武将图片是一个类型，无非就是需要计算绘制的位置，这里就不再展示相关代码了。</p><h3 id="武将文字信息"><a href="#武将文字信息" class="headerlink" title="武将文字信息"></a>武将文字信息</h3><p>从刚刚的代码可以看出，我分了3个部分来绘制，其实<code>吴</code>和<code>陆逊</code>应该是可以放到一起的，但是我在绘制的时候发现，空格在绘制的时候会引起异常，导致空格后面的文字无法绘制出来，所以我这里<code>吴</code>和<code>陆逊</code>中间的空白是靠位置偏移来做的。</p><p>这里就展示一下如何绘制武将称号的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 绘制武将称号：江陵侯</span><br><span class="line">drawHorner: function (ctx, text) &#123;</span><br><span class="line">// 设置字号</span><br><span class="line">    ctx.setFontSize(26);</span><br><span class="line">    // 设置字体颜色</span><br><span class="line">    ctx.setFillStyle(&quot;#000000&quot;);</span><br><span class="line">    // 计算绘制起点</span><br><span class="line">    let x = this.data.offsetX + 35;</span><br><span class="line">    let y = this.data.offsetY + 10;</span><br><span class="line">    console.log(&apos;drawHorner&apos; + text);</span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(y);</span><br><span class="line">    // 绘制竖排文字，这里是个Util函数，具体实现请继续看</span><br><span class="line">    Canvas.drawTextVertical(ctx, text, x, y);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>绘制竖排文字从网上找了个开源的代码，需要看原理的请看<a href="http://www.zhangxinxu.com/wordpress/?p=7362" target="_blank" rel="noopener">这里</a></p><p>当然我这里为了适用小程序做了些改动，函数原型是这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CanvasRenderingContext2D.prototype.letterSpacingText = function (text, x, y, letterSpacing)</span><br></pre></td></tr></table></figure><p>原谅我不是很会<code>js</code>，完全不懂这是个什么语法，看了一会没弄懂，感觉像是给类添加新的属性，不管他。</p><blockquote><p>不管白猫黑猫，能抓到耗子就是好猫</p></blockquote><p>改造后的函数像下面的样子：</p><p><code>canvas.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* @author zhangxinxu(.com)</span><br><span class="line">* @licence MIT</span><br><span class="line">* @description http://www.zhangxinxu.com/wordpress/?p=7362</span><br><span class="line">*/</span><br><span class="line">function drawTextVertical(context, text, x, y) &#123;</span><br><span class="line">  var arrText = text.split(&apos;&apos;);</span><br><span class="line">  var arrWidth = arrText.map(function (letter) &#123;</span><br><span class="line">    return 26;</span><br><span class="line">    // 这里为了找到那个空格的 bug 做了许多努力，不过似乎是白费力了</span><br><span class="line">    // const metrics = context.measureText(letter);</span><br><span class="line">    // console.log(metrics);</span><br><span class="line">    // const width = metrics.width;</span><br><span class="line">    // return width;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  var align = context.textAlign;</span><br><span class="line">  var baseline = context.textBaseline;</span><br><span class="line"></span><br><span class="line">  if (align == &apos;left&apos;) &#123;</span><br><span class="line">    x = x + Math.max.apply(null, arrWidth) / 2;</span><br><span class="line">  &#125; else if (align == &apos;right&apos;) &#123;</span><br><span class="line">    x = x - Math.max.apply(null, arrWidth) / 2;</span><br><span class="line">  &#125;</span><br><span class="line">  if (baseline == &apos;bottom&apos; || baseline == &apos;alphabetic&apos; || baseline == &apos;ideographic&apos;) &#123;</span><br><span class="line">    y = y - arrWidth[0] / 2;</span><br><span class="line">  &#125; else if (baseline == &apos;top&apos; || baseline == &apos;hanging&apos;) &#123;</span><br><span class="line">    y = y + arrWidth[0] / 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.textAlign = &apos;center&apos;;</span><br><span class="line">  context.textBaseline = &apos;middle&apos;;</span><br><span class="line"></span><br><span class="line">  // 开始逐字绘制</span><br><span class="line">  arrText.forEach(function (letter, index) &#123;</span><br><span class="line">    // 确定下一个字符的纵坐标位置</span><br><span class="line">    var letterWidth = arrWidth[index];</span><br><span class="line">    // 是否需要旋转判断</span><br><span class="line">    var code = letter.charCodeAt(0);</span><br><span class="line">    if (code &lt;= 256) &#123;</span><br><span class="line">      context.translate(x, y);</span><br><span class="line">      // 英文字符，旋转90°</span><br><span class="line">      context.rotate(90 * Math.PI / 180);</span><br><span class="line">      context.translate(-x, -y);</span><br><span class="line">    &#125; else if (index &gt; 0 &amp;&amp; text.charCodeAt(index - 1) &lt; 256) &#123;</span><br><span class="line">      // y修正</span><br><span class="line">      y = y + arrWidth[index - 1] / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    context.fillText(letter, x, y);</span><br><span class="line">    // 旋转坐标系还原成初始态</span><br><span class="line">    context.setTransform(1, 0, 0, 1, 0, 0);</span><br><span class="line">    // 确定下一个字符的纵坐标位置</span><br><span class="line">    var letterWidth = arrWidth[index];</span><br><span class="line">    y = y + letterWidth;</span><br><span class="line">  &#125;);</span><br><span class="line">  // 水平垂直对齐方式还原</span><br><span class="line">  context.textAlign = align;</span><br><span class="line">  context.textBaseline = baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  drawTextVertical: drawTextVertical</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制网络图片"><a href="#绘制网络图片" class="headerlink" title="绘制网络图片"></a>绘制网络图片</h3><p>由于网络图片无法直接绘制，所以需要先下载到本地，然后再按住本地图片绘制的流程走一遍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">downloadHeroImage: function () &#123;</span><br><span class="line">    // 微信不支持非https的图片下载，这里了个替换</span><br><span class="line">    let url = this.data.hero.HERO.ICON.replace(/http/, &quot;https&quot;);</span><br><span class="line">    var that = this;</span><br><span class="line">    wx.downloadFile(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        // 下载成功后拿到图片的路径，然后开始绘制</span><br><span class="line">        var path = res.tempFilePath;</span><br><span class="line">        that.drawHeroImage(path);</span><br><span class="line">      &#125;, fail: function (res) &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><p>说了这么多，自然少不了最终的一步，将绘制到<code>canvas</code>的图片保存到手机相册，这里需要用户授权，你需要自己处理。</p><p>用的是微信给我们提供的接口<code>wx.canvasToTempFilePath</code>。需要我们传入起点坐标<code>(x, y)</code>和画布大小<code>(width, height)</code>以及<code>canvasId</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">saveShareImage: function () &#123;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: &apos;正在保存图片..&apos;,</span><br><span class="line">    &#125;);</span><br><span class="line">    let that = this;</span><br><span class="line">    wx.canvasToTempFilePath(&#123;</span><br><span class="line">      x: 0,</span><br><span class="line">      y: 0,</span><br><span class="line">      width: that.data.canvasWidth,</span><br><span class="line">      height: that.data.canvasHeight,</span><br><span class="line">      canvasId: &apos;share_canvas&apos;,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        wx.saveImageToPhotosAlbum(&#123;</span><br><span class="line">          filePath: res.tempFilePath,</span><br><span class="line">          success(res) &#123;</span><br><span class="line">            console.log(res);</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">              title: &apos;保存到相册成功&apos;,</span><br><span class="line">              duration: 1500,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail(res) &#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">              title: &apos;保存到相册失败&apos;,</span><br><span class="line">              icon: &apos;fail&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          complete(res) &#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h1><p>本着开源的精神，源码已经放在<code>Github</code>上，大家可以去上面查看具体代码。</p><p><a href="https://github.com/HistoryZhang/SgsNoteBook" target="_blank" rel="noopener">https://github.com/HistoryZhang/SgsNoteBook</a></p><p>如果对你有帮助的话，麻烦给个<code>Star</code>吧~</p><p>点击阅读原文可以查看更好的代码格式~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;闲暇时间抽个空写了个三国杀武将手册的小程序，中间有个需求设计的是合成武将皮肤图、竖排的武将姓名、以及小程序码，然后提供保存图片到相册，最终让用户可以分享到朋友圈或其他平台。合成图片应该按照&lt;code&gt;Canvas&lt;/code&gt;的文档来做都没什么问题，主要是有个竖排文字的需求，这里和大家分享一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序, Canvas" scheme="http://bugdeveloper.gitee.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F-Canvas/"/>
    
  </entry>
  
  <entry>
    <title>公众号推荐</title>
    <link href="http://bugdeveloper.gitee.io/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E8%8D%90/"/>
    <id>http://bugdeveloper.gitee.io/公众号推荐/</id>
    <published>2018-02-07T13:44:35.000Z</published>
    <updated>2018-02-07T13:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里技术"><a href="#阿里技术" class="headerlink" title="阿里技术"></a>阿里技术</h1><h4 id="公众号介绍"><a href="#公众号介绍" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>阿里巴巴官方技术号，关于阿里的技术创新均呈现于此。</p></blockquote><p>如官方介绍所说，会推送一些阿里用到的技术。也整理出一系列的 <code>pdf</code> 出来给大家。<br><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1bbbd8bdc2?w=430&amp;h=430&amp;f=jpeg&amp;s=39741" alt=""></p><a id="more"></a><h1 id="美团点评技术团队"><a href="#美团点评技术团队" class="headerlink" title="美团点评技术团队"></a>美团点评技术团队</h1><h4 id="公众号介绍-1"><a href="#公众号介绍-1" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>这里是美团点评强大技术团队的对外窗口，每周腿送一线实践技术文章、技术活动、技术招聘信息。</p></blockquote><p>会覆盖前端、后端、算法等等，也会推送一些技术沙龙活动。该技术团队除了这个公众号另外还维护一个技术博客，<a href="https://tech.meituan.com/" target="_blank" rel="noopener">https://tech.meituan.com/</a>。<br><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1cafd9a5c7?w=430&amp;h=430&amp;f=jpeg&amp;s=39760" alt=""></p><h1 id="淘宝技术"><a href="#淘宝技术" class="headerlink" title="淘宝技术"></a>淘宝技术</h1><h4 id="公众号介绍-2"><a href="#公众号介绍-2" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>淘宝技术官方账号。</p></blockquote><p>后端、前端、机器学习，总之淘宝用到的技术，都有机会在这里领略到。</p><p><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1d52f5ebf6?w=430&amp;h=430&amp;f=jpeg&amp;s=41296" alt=""></p><h1 id="WeMobileDev"><a href="#WeMobileDev" class="headerlink" title="WeMobileDev"></a>WeMobileDev</h1><h4 id="公众号介绍-3"><a href="#公众号介绍-3" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>微信移动客户端开发团队官号，分享微信在<code>Android</code>、<code>iOS</code>、<code>Mac</code>、<code>Winphone</code>、<code>Windows</code>等平台的开发经验、前沿技术，以及一些鲜为人知的小故事。</p></blockquote><p>因为<code>WCDB</code>关注的该公众号，介绍的皆是微信在开发过程中遇到的问题解决方案，还有开源框架介绍。<br><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1dbf38cf88?w=430&amp;h=430&amp;f=jpeg&amp;s=39414" alt=""></p><h1 id="移动开发前线"><a href="#移动开发前线" class="headerlink" title="移动开发前线"></a>移动开发前线</h1><h4 id="公众号介绍-4"><a href="#公众号介绍-4" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>专注于分享移动开发前沿和一线技术。</p></blockquote><p>主要推送一些关于移动端和前端的一些精选文章，两端技术、RN等等。也会推送一些关于移动端的热点文章，<code>Kotlin</code>、<code>Swift</code>、小程序等等。<br><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e27c3f0a8?w=430&amp;h=430&amp;f=jpeg&amp;s=38830" alt=""></p><h1 id="聊聊架构"><a href="#聊聊架构" class="headerlink" title="聊聊架构"></a>聊聊架构</h1><h4 id="公众号介绍-5"><a href="#公众号介绍-5" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>以架构之“道”为基础，呈现更多务实落地的架构内容。</p></blockquote><p>主要推送一些关于架构设计的文章，包括前端后端，文章质量还是蛮高的。<br><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea133efd1e23?w=430&amp;h=430&amp;f=jpeg&amp;s=39973" alt=""></p><h1 id="云栖社区"><a href="#云栖社区" class="headerlink" title="云栖社区"></a>云栖社区</h1><h4 id="公众号介绍-6"><a href="#公众号介绍-6" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>云栖社区是由阿里云负责运营、阿里巴巴技术协会和阿里巴巴集团各技术团队提供内容支持的开放式技术社区。</p></blockquote><p>有时候会和几个阿里系的公众号发同样的文章，主要还是会发一些热点知识，人工智能、区块链、服务端架构等待。<br><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e9c536e8d?w=430&amp;h=430&amp;f=jpeg&amp;s=40049" alt=""></p><h1 id="InfoQ"><a href="#InfoQ" class="headerlink" title="InfoQ"></a>InfoQ</h1><h4 id="公众号介绍-7"><a href="#公众号介绍-7" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>有内容的技术社区媒体。</p></blockquote><p>在这里除了技术干货，还能学到如何定位自身。作为一个技术，你不仅需要掌握技术，还需要扩充横向知识面，为你的人生铺路。<br><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f4de4a960?w=430&amp;h=430&amp;f=jpeg&amp;s=39418" alt=""></p><h1 id="stromzhang"><a href="#stromzhang" class="headerlink" title="stromzhang"></a>stromzhang</h1><h4 id="公众号介绍-8"><a href="#公众号介绍-8" class="headerlink" title="公众号介绍"></a>公众号介绍</h4><blockquote><p>一名不羁的码农，我的世界不只有 <code>Coding</code>！</p></blockquote><p>最后推荐的是一个个人运营的公众号，刚开始是以为 <code>Android</code> 开发者，写一下关于 <code>Android</code> 开发的文章，后来会涉及一些管理的文章。现在已经没有限制了，包括广告，总的来说质量还可以吧。</p><p><img src="https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f9e6e7e17?w=430&amp;h=430&amp;f=jpeg&amp;s=39479" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;阿里技术&quot;&gt;&lt;a href=&quot;#阿里技术&quot; class=&quot;headerlink&quot; title=&quot;阿里技术&quot;&gt;&lt;/a&gt;阿里技术&lt;/h1&gt;&lt;h4 id=&quot;公众号介绍&quot;&gt;&lt;a href=&quot;#公众号介绍&quot; class=&quot;headerlink&quot; title=&quot;公众号介绍&quot;&gt;&lt;/a&gt;公众号介绍&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;阿里巴巴官方技术号，关于阿里的技术创新均呈现于此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如官方介绍所说，会推送一些阿里用到的技术。也整理出一系列的 &lt;code&gt;pdf&lt;/code&gt; 出来给大家。&lt;br&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/2/7/1616ea1bbbd8bdc2?w=430&amp;amp;h=430&amp;amp;f=jpeg&amp;amp;s=39741&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://bugdeveloper.gitee.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="公众号" scheme="http://bugdeveloper.gitee.io/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Swift关于!和?的Tip</title>
    <link href="http://bugdeveloper.gitee.io/Swift%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%8C%85%E7%9A%84Tip/"/>
    <id>http://bugdeveloper.gitee.io/Swift关于解包的Tip/</id>
    <published>2018-02-06T13:45:07.000Z</published>
    <updated>2018-02-06T14:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Q: 为什么我现在还在写这些入门级别的语法 <code>Tip</code> 呢？</p><p>A: 因为我现在才开始学习 <code>Swift</code> 呗~</p><p>Q: 为什么我现在才开始学习 <code>Swift</code> 呢？</p><p>A: 因为懒呗~</p></blockquote><a id="more"></a><p>哈哈~分享一些自己看到的小 <code>Tip</code> 给大家，让那些也才入门 <code>Swift</code> 的童鞋也能多了解一些~</p><h2 id="关于-和"><a href="#关于-和" class="headerlink" title="关于 ! 和 ?"></a>关于 <code>!</code> 和 <code>?</code></h2><p>今天这里不打算介绍为什么 <code>Swift</code> 里面会有 <code>!</code> 和 <code>?</code>，有什么不明白的可以看看这里：<a href="https://www.jianshu.com/p/89a2afb82488" target="_blank" rel="noopener">Swift中 ！和 ？的区别及使用</a></p><p>现在我们看一个平时用到的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let width: Int? = 3</span><br><span class="line">var area: Int?</span><br><span class="line">    </span><br><span class="line">area = width! * width!</span><br></pre></td></tr></table></figure><p>为什么这里 <code>let area = width! * width!</code> 会有这么多的 <code>!</code> 呢？因为机（愚）智（蠢）的 <code>Xcode</code> 建议我们这样写。最关键的是如果 <code>width</code> 真的就是 <code>nil</code> 会这么样呢？机智如你，会 <code>Crash</code>。</p><p>那保险一点的写法应该是这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let width: Int? = 3</span><br><span class="line">var area: Int?</span><br><span class="line"></span><br><span class="line">if let tmp = width &#123;</span><br><span class="line">    area = tmp * tmp</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    area = nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全不符合 <code>Swift</code> 作为一门<code>优雅</code>的语言的称号。</p><h2 id="Optional-Map"><a href="#Optional-Map" class="headerlink" title="Optional Map"></a>Optional Map</h2><p>面对上面的问题，有个很优雅的写法，那就是 <code>Optional Map</code>。让我们先看一下 <code>Optional</code> 中关于 <code>map</code> 的声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum Optional&lt;Wrapped&gt; : ExpressibleByNilLiteral &#123;</span><br><span class="line">    public func map&lt;U&gt;(_ transform: (Wrapped) throws -&gt; U) rethrows -&gt; U?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的作用是，如果输入有值，则进入 <code>transform</code> 的闭包进行变化，并返回一个 <code>U?</code> ;如果输入就是 <code>nil</code> 的话，则直接返回 <code>nil</code> 的 <code>U?</code>。</p><p>那么我们就有如下优雅的写法了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let width: Int? = 3</span><br><span class="line">let area = width.map &#123;</span><br><span class="line">    $0 * $0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>我们还能在 <code>Collection</code> 中看到 <code>map</code> 的身影。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">extension Collection &#123;</span><br><span class="line"></span><br><span class="line">    /// Returns an array containing the results of mapping the given closure</span><br><span class="line">    /// over the sequence&apos;s elements.</span><br><span class="line">    ///</span><br><span class="line">    /// In this example, `map` is used first to convert the names in the array</span><br><span class="line">    /// to lowercase strings and then to count their characters.</span><br><span class="line">    ///</span><br><span class="line">    ///     let cast = [&quot;Vivien&quot;, &quot;Marlon&quot;, &quot;Kim&quot;, &quot;Karl&quot;]</span><br><span class="line">    ///     let lowercaseNames = cast.map &#123; $0.lowercaseString &#125;</span><br><span class="line">    ///     // &apos;lowercaseNames&apos; == [&quot;vivien&quot;, &quot;marlon&quot;, &quot;kim&quot;, &quot;karl&quot;]</span><br><span class="line">    ///     let letterCounts = cast.map &#123; $0.count &#125;</span><br><span class="line">    ///     // &apos;letterCounts&apos; == [6, 6, 3, 4]</span><br><span class="line">    ///</span><br><span class="line">    /// - Parameter transform: A mapping closure. `transform` accepts an</span><br><span class="line">    ///   element of this sequence as its parameter and returns a transformed</span><br><span class="line">    ///   value of the same or of a different type.</span><br><span class="line">    /// - Returns: An array containing the transformed elements of this</span><br><span class="line">    ///   sequence.</span><br><span class="line">    public func map&lt;T&gt;(_ transform: (Self.Element) throws -&gt; T) rethrows -&gt; [T]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释的很清楚了，就不多介绍了。值得注意的是 <code>Collection</code> 本身是一个 <code>protocol</code>，所以所有实现了 <code>Collection</code> 协议的都有这个方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Q: 为什么我现在还在写这些入门级别的语法 &lt;code&gt;Tip&lt;/code&gt; 呢？&lt;/p&gt;
&lt;p&gt;A: 因为我现在才开始学习 &lt;code&gt;Swift&lt;/code&gt; 呗~&lt;/p&gt;
&lt;p&gt;Q: 为什么我现在才开始学习 &lt;code&gt;Swift&lt;/code&gt; 呢？&lt;/p&gt;
&lt;p&gt;A: 因为懒呗~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://bugdeveloper.gitee.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Github源码索引</title>
    <link href="http://bugdeveloper.gitee.io/Github%E6%BA%90%E7%A0%81%E7%B4%A2%E5%BC%95/"/>
    <id>http://bugdeveloper.gitee.io/Github源码索引/</id>
    <published>2018-01-27T06:12:05.000Z</published>
    <updated>2018-02-03T07:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、UI相关"><a href="#一、UI相关" class="headerlink" title="一、UI相关"></a>一、<code>UI</code>相关</h2><ul><li><a href="https://github.com/Daltron/NotificationBanner" target="_blank" rel="noopener">NotificationBanner</a> <code>通知栏提醒</code></li><li><a href="https://github.com/zhangao0086/DKImagePickerController" target="_blank" rel="noopener"><code>DKImagePickerController</code></a> <a id="more"></a>系统相册</li><li><a href="https://github.com/SwipeCellKit/SwipeCellKit" target="_blank" rel="noopener">SwipeCellKit</a> <code>系统邮箱手势的Cell</code></li><li><a href="https://github.com/jonathantribouharet/JTCalendar" target="_blank" rel="noopener">JTCalendar</a> <code>日历</code></li><li><a href="https://github.com/CVCalendar/CVCalendar" target="_blank" rel="noopener">CVCalendar</a> <code>日历</code></li><li><a href="https://github.com/xmartlabs/XLForm" target="_blank" rel="noopener">XLForm</a> <code>表单系统</code></li><li><a href="https://github.com/xmartlabs/Eureka" target="_blank" rel="noopener">Eureka</a> <code>表单系统</code><h2 id="二、Extension"><a href="#二、Extension" class="headerlink" title="二、Extension"></a>二、<code>Extension</code></h2></li><li><a href="https://github.com/SwifterSwift/SwifterSwift" target="_blank" rel="noopener">SwifterSwift</a><h2 id="三、工具"><a href="#三、工具" class="headerlink" title="三、工具"></a>三、工具</h2></li><li><a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a> <code>JSON转Model</code><h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2></li><li><a href="https://github.com/byoungd/English-level-up-tips-for-Chinese" target="_blank" rel="noopener">英语进阶指南</a></li><li><a href="https://github.com/fancymax/12306ForMac" target="_blank" rel="noopener">12306ForMac</a> <code>12306 订票/捡票 助手</code></li><li><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener"><code>跳一跳</code>辅助</a></li><li><a href="https://github.com/rrdssfgcs/wenda-helper" target="_blank" rel="noopener"><code>答题App辅助</code></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、UI相关&quot;&gt;&lt;a href=&quot;#一、UI相关&quot; class=&quot;headerlink&quot; title=&quot;一、UI相关&quot;&gt;&lt;/a&gt;一、&lt;code&gt;UI&lt;/code&gt;相关&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Daltron/NotificationBanner&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NotificationBanner&lt;/a&gt; &lt;code&gt;通知栏提醒&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhangao0086/DKImagePickerController&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DKImagePickerController&lt;/code&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="源码" scheme="http://bugdeveloper.gitee.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Github" scheme="http://bugdeveloper.gitee.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Github源码推荐(1.22~1.28)</title>
    <link href="http://bugdeveloper.gitee.io/Github%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90(1.22-1.28)/"/>
    <id>http://bugdeveloper.gitee.io/Github源码推荐(1.22-1.28)/</id>
    <published>2018-01-27T04:39:11.000Z</published>
    <updated>2018-02-03T07:50:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>除了推荐一些源码，如果遇到其他相关我也会推荐给大家，排名来自于心情。</p><h2 id="一、英语进阶指南"><a href="#一、英语进阶指南" class="headerlink" title="一、英语进阶指南"></a>一、英语进阶指南</h2><p>夫人最近也在学习英语，不知道这个对她是否有用呢？</p><blockquote><p>英语作为一门语言，学习起来应该是一件比较自然而然的事情，就像我们自然而然地学会汉语那样。</p></blockquote><a id="more"></a><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/Feature.png"><img src="/images/blog/How.png"><h3 id="热度"><a href="#热度" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 7800+</span><br></pre></td></tr></table></figure><h3 id="Github主页"><a href="#Github主页" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/byoungd/English-level-up-tips-for-Chinese" target="_blank" rel="noopener">https://github.com/byoungd/English-level-up-tips-for-Chinese</a></p><h2 id="二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac-OS打造的12306-订票-捡票-助手。"><a href="#二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac-OS打造的12306-订票-捡票-助手。" class="headerlink" title="二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac OS打造的12306 订票/捡票 助手。"></a>二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是<code>Mac</code>系统，那就试试这个吧，专为<code>Mac OS</code>打造的<code>12306 订票/捡票 助手</code>。</h2><h3 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/12306ForMac.jpg"><h3 id="热度-1"><a href="#热度-1" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 2000+</span><br></pre></td></tr></table></figure><h3 id="Github主页-1"><a href="#Github主页-1" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/fancymax/12306ForMac" target="_blank" rel="noopener">https://github.com/fancymax/12306ForMac</a></p><h2 id="三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。"><a href="#三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。" class="headerlink" title="三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。"></a>三、习惯了<code>OC</code>下的<code>YYModel</code>等<code>Dictionary</code>转<code>Model</code>工具，在<code>Swift</code>下是否不适应呢？试试<code>SwiftyJSON</code>吧，一定会为你带来更好的体验。</h2><h3 id="热度-2"><a href="#热度-2" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 16000+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;SwiftyJSON&apos;</span><br></pre></td></tr></table></figure><h3 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github &quot;SwiftyJSON/SwiftyJSON&quot;</span><br></pre></td></tr></table></figure><h3 id="Github主页-2"><a href="#Github主页-2" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">https://github.com/SwiftyJSON/SwiftyJSON</a></p><h2 id="四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。"><a href="#四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。" class="headerlink" title="四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。"></a>四、是否厌倦了<code>Toast</code>一成不变的样式呢？你可以试试<code>NotificationBanner</code>，漂亮的动画样式，新颖的交互体验。</h2><h3 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/NotificationBanner-1.gif"><img src="/images/blog/NotificationBanner-2.gif"><img src="/images/blog/NotificationBanner-3.gif"><h3 id="热度-3"><a href="#热度-3" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 1700+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods-1"><a href="#CocoaPods-1" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;NotificationBannerSwift&apos;</span><br></pre></td></tr></table></figure><h3 id="Carthage-1"><a href="#Carthage-1" class="headerlink" title="Carthage"></a>Carthage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github &quot;Daltron/NotificationBanner&quot; &quot;master&quot;</span><br></pre></td></tr></table></figure><h3 id="Github主页-3"><a href="#Github主页-3" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/Daltron/NotificationBanner" target="_blank" rel="noopener">https://github.com/Daltron/NotificationBanner</a></p><p>好了，暂时就推荐这么多给大家，下周我们再见。</p><p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了推荐一些源码，如果遇到其他相关我也会推荐给大家，排名来自于心情。&lt;/p&gt;
&lt;h2 id=&quot;一、英语进阶指南&quot;&gt;&lt;a href=&quot;#一、英语进阶指南&quot; class=&quot;headerlink&quot; title=&quot;一、英语进阶指南&quot;&gt;&lt;/a&gt;一、英语进阶指南&lt;/h2&gt;&lt;p&gt;夫人最近也在学习英语，不知道这个对她是否有用呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;英语作为一门语言，学习起来应该是一件比较自然而然的事情，就像我们自然而然地学会汉语那样。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="源码" scheme="http://bugdeveloper.gitee.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Github" scheme="http://bugdeveloper.gitee.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Github源码推荐(1.15~1.21)</title>
    <link href="http://bugdeveloper.gitee.io/Github%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90(1.15~1.21)/"/>
    <id>http://bugdeveloper.gitee.io/Github源码推荐(1.15~1.21)/</id>
    <published>2018-01-21T03:21:06.000Z</published>
    <updated>2018-02-03T07:50:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，一周时间过得真快，本次主题依旧，推荐一些<code>Github</code>上的源码，排名不分先后。</p><h2 id="一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。"><a href="#一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。" class="headerlink" title="一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。"></a>一、答题<code>App</code>莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员<code>Show</code>一把的场面，下面推荐的就是使用<code>OCR</code>做的辅助答题助手。</h2><blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>使用手机模拟器，快速识别~</li><li>浏览器自动搜索显示结果，搜索引擎可配置，结果一目了然~</li><li>模拟器还能多开哦~全部答对奖金翻倍，遇到不会的可以多选乱蒙</li><li>万英雄/知识超人/冲顶大会都支持哦~</li></ul></blockquote><a id="more"></a><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/wenda-helper.gif"><h3 id="热度"><a href="#热度" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 800+</span><br></pre></td></tr></table></figure><h3 id="Github主页"><a href="#Github主页" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/rrdssfgcs/wenda-helper" target="_blank" rel="noopener">https://github.com/rrdssfgcs/wenda-helper</a></p><h2 id="二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。"><a href="#二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。" class="headerlink" title="二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。"></a>二、上一周给大家推荐了一个<code>Objective-C</code>的日历，这次给大家推荐一个<code>Swift4</code>的日历控件，作者写的非常好棒，支持<code>Storyboard</code>。</h2><h3 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/CVCalendar.gif"><h3 id="热度-1"><a href="#热度-1" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 2800+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;CVCalendar&apos;, &apos;~&gt; 1.6.0&apos;</span><br></pre></td></tr></table></figure><h3 id="Github主页-1"><a href="#Github主页-1" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/CVCalendar/CVCalendar" target="_blank" rel="noopener">https://github.com/CVCalendar/CVCalendar</a></p><h2 id="三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。"><a href="#三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。" class="headerlink" title="三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。"></a>三、使用<code>Swift</code>的时候是不是需要写好多的<code>Extension</code>呢？使用这个开源库后就再也不用劳心劳力的写很多的<code>Extension</code>了。</h2><blockquote><p>SwifterSwift is a collection of over 500 native Swift extensions, with handy methods, syntactic sugar, and performance improvements for wide range of primitive data types, UIKit and Cocoa classes –over 500 in 1– for iOS, macOS, tvOS and watchOS.</p></blockquote><p>简直不要太强大，而且支持<code>Swift4</code>。</p><h3 id="热度-2"><a href="#热度-2" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 4200+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods-1"><a href="#CocoaPods-1" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;SwifterSwift&apos;</span><br></pre></td></tr></table></figure><p>你也可以只集成部分<code>Extension</code>，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;SwifterSwift/Foundation&apos;</span><br></pre></td></tr></table></figure></p><p>具体还是去作者主页看吧。</p><h3 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github &quot;SwifterSwift/SwifterSwift&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure><h3 id="Github主页-2"><a href="#Github主页-2" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/SwifterSwift/SwifterSwift" target="_blank" rel="noopener">https://github.com/SwifterSwift/SwifterSwift</a></p><h2 id="四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。"><a href="#四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。" class="headerlink" title="四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。"></a>四、基本上所有的<code>App</code>都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个<code>Cell</code>达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是<code>OC</code>和<code>Swift</code>都有，各取所需。</h2><ul><li><code>OC</code>版</li></ul><h3 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/XLForm.gif"><h3 id="热度-3"><a href="#热度-3" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 4800+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods-2"><a href="#CocoaPods-2" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;XLForm&apos;, &apos;~&gt; 4.0&apos;</span><br></pre></td></tr></table></figure><h3 id="Carthage-1"><a href="#Carthage-1" class="headerlink" title="Carthage"></a>Carthage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github &quot;xmartlabs/XLForm&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure><h3 id="Github主页-3"><a href="#Github主页-3" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/xmartlabs/XLForm" target="_blank" rel="noopener">https://github.com/xmartlabs/XLForm</a></p><ul><li><code>Swift</code>版</li></ul><h3 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/Eureka-1.gif"><h3 id="热度-4"><a href="#热度-4" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 7500+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods-3"><a href="#CocoaPods-3" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;Eureka&apos;</span><br></pre></td></tr></table></figure><h3 id="Carthage-2"><a href="#Carthage-2" class="headerlink" title="Carthage"></a>Carthage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github &quot;xmartlabs/Eureka&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure><h3 id="Github主页-4"><a href="#Github主页-4" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/xmartlabs/Eureka" target="_blank" rel="noopener">https://github.com/xmartlabs/Eureka</a></p><p>关于使用方法这里就不再介绍了，项目主页上介绍的非常清楚，有需求的小伙伴就自己去查看吧~</p><p>好了，暂时就推荐这么多给大家，下周我们再见。</p><p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，一周时间过得真快，本次主题依旧，推荐一些&lt;code&gt;Github&lt;/code&gt;上的源码，排名不分先后。&lt;/p&gt;
&lt;h2 id=&quot;一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。&quot;&gt;&lt;a href=&quot;#一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。&quot; class=&quot;headerlink&quot; title=&quot;一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。&quot;&gt;&lt;/a&gt;一、答题&lt;code&gt;App&lt;/code&gt;莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员&lt;code&gt;Show&lt;/code&gt;一把的场面，下面推荐的就是使用&lt;code&gt;OCR&lt;/code&gt;做的辅助答题助手。&lt;/h2&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用手机模拟器，快速识别~&lt;/li&gt;
&lt;li&gt;浏览器自动搜索显示结果，搜索引擎可配置，结果一目了然~&lt;/li&gt;
&lt;li&gt;模拟器还能多开哦~全部答对奖金翻倍，遇到不会的可以多选乱蒙&lt;/li&gt;
&lt;li&gt;万英雄/知识超人/冲顶大会都支持哦~&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="源码" scheme="http://bugdeveloper.gitee.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Github" scheme="http://bugdeveloper.gitee.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Github源码推荐(1.8~1.14)</title>
    <link href="http://bugdeveloper.gitee.io/Github%E6%BA%90%E7%A0%81%E6%8E%A8%E8%8D%90(1.8~1.14)/"/>
    <id>http://bugdeveloper.gitee.io/Github源码推荐(1.8~1.14)/</id>
    <published>2018-01-14T14:22:30.000Z</published>
    <updated>2018-02-03T07:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本次给大家推荐一些<code>Github</code>上的源码，排名不分先后。</p><h2 id="一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。"><a href="#一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。" class="headerlink" title="一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。"></a>一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用<code>Python</code>开发的<code>跳一跳</code>辅助。</h2><h3 id="原理说明-摘自作者原文"><a href="#原理说明-摘自作者原文" class="headerlink" title="原理说明(摘自作者原文)"></a>原理说明(摘自作者原文)</h3><ol><li><p>将手机点击到《跳一跳》小程序界面</p></li><li><p>用 ADB 工具获取当前手机截图，并用 ADB 将截图 pull 上来</p></li><li><p>计算按压时间</p><ul><li>手动版：用 Matplotlib 显示截图，用鼠标先点击起始点位置，然后点击目标位置，计算像素距离；</li><li>自动版：靠棋子的颜色来识别棋子，靠底色和方块的色差来识别棋盘；</li></ul></li><li><p>用 ADB 工具点击屏幕蓄力一跳</p></li></ol><a id="more"></a><h3 id="热度"><a href="#热度" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 11800+</span><br></pre></td></tr></table></figure><h3 id="Github主页"><a href="#Github主页" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">https://github.com/wangshub/wechat_jump_game</a> </p><h2 id="二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。"><a href="#二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。" class="headerlink" title="二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。"></a>二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试<code>DKImagePickerController</code>吧，作者完全使用<code>Swift</code>编写，支持<code>CocoaPods</code>。</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/DKImagePickerController-1.png"><img src="/images/blog/DKImagePickerController-2.png"><h3 id="热度-1"><a href="#热度-1" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 890+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;DKImagePickerController&apos;</span><br></pre></td></tr></table></figure><h3 id="Github主页-1"><a href="#Github主页-1" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/zhangao0086/DKImagePickerController" target="_blank" rel="noopener">https://github.com/zhangao0086/DKImagePickerController</a> </p><h2 id="三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。"><a href="#三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。" class="headerlink" title="三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。"></a>三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，<code>Github</code>上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯<code>Swift</code>编写的源码。</h2><h3 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/SwipeCellKit.gif"><h3 id="热度-2"><a href="#热度-2" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 2700+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods-1"><a href="#CocoaPods-1" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;SwipeCellKit&apos;</span><br></pre></td></tr></table></figure><h3 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github &quot;SwipeCellKit/SwipeCellKit&quot;</span><br></pre></td></tr></table></figure><h3 id="Github主页-2"><a href="#Github主页-2" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/SwipeCellKit/SwipeCellKit" target="_blank" rel="noopener">https://github.com/SwipeCellKit/SwipeCellKit</a></p><h2 id="四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。"><a href="#四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。" class="headerlink" title="四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。"></a>四、相信很多人都有编写日历的需求，在<code>Todo</code>，万年历等中，都需要日历，本次为大家推荐一个<code>Objective-C</code>编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持<code>Localization</code>。</h2><h3 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h3><img src="/images/blog/JTCalendar.gif"><img src="/images/blog/JTCalendar-2.png"><h3 id="热度-3"><a href="#热度-3" class="headerlink" title="热度"></a>热度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star: 2400+</span><br></pre></td></tr></table></figure><h3 id="CocoaPods-2"><a href="#CocoaPods-2" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;JTCalendar&apos;, &apos;~&gt; 2.0&apos;</span><br></pre></td></tr></table></figure><h3 id="Carthage-1"><a href="#Carthage-1" class="headerlink" title="Carthage"></a>Carthage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github &quot;jonathantribouharet/JTCalendar&quot; ~&gt; 2.2</span><br></pre></td></tr></table></figure><h3 id="Github主页-3"><a href="#Github主页-3" class="headerlink" title="Github主页"></a><code>Github</code>主页</h3><p><a href="https://github.com/jonathantribouharet/JTCalendar" target="_blank" rel="noopener">https://github.com/jonathantribouharet/JTCalendar</a></p><p>好了，暂时就推荐这么多给大家，下周我们再见。</p><p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次给大家推荐一些&lt;code&gt;Github&lt;/code&gt;上的源码，排名不分先后。&lt;/p&gt;
&lt;h2 id=&quot;一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。&quot;&gt;&lt;a href=&quot;#一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。&quot; class=&quot;headerlink&quot; title=&quot;一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。&quot;&gt;&lt;/a&gt;一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用&lt;code&gt;Python&lt;/code&gt;开发的&lt;code&gt;跳一跳&lt;/code&gt;辅助。&lt;/h2&gt;&lt;h3 id=&quot;原理说明-摘自作者原文&quot;&gt;&lt;a href=&quot;#原理说明-摘自作者原文&quot; class=&quot;headerlink&quot; title=&quot;原理说明(摘自作者原文)&quot;&gt;&lt;/a&gt;原理说明(摘自作者原文)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将手机点击到《跳一跳》小程序界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 ADB 工具获取当前手机截图，并用 ADB 将截图 pull 上来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算按压时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动版：用 Matplotlib 显示截图，用鼠标先点击起始点位置，然后点击目标位置，计算像素距离；&lt;/li&gt;
&lt;li&gt;自动版：靠棋子的颜色来识别棋子，靠底色和方块的色差来识别棋盘；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 ADB 工具点击屏幕蓄力一跳&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="源码" scheme="http://bugdeveloper.gitee.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Github" scheme="http://bugdeveloper.gitee.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods设置target支持的swift版本 </title>
    <link href="http://bugdeveloper.gitee.io/CocoaPods%E8%AE%BE%E7%BD%AEtarget%E6%94%AF%E6%8C%81%E7%9A%84swift%E7%89%88%E6%9C%AC/"/>
    <id>http://bugdeveloper.gitee.io/CocoaPods设置target支持的swift版本/</id>
    <published>2017-11-24T00:50:33.000Z</published>
    <updated>2018-02-03T07:46:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章说道在<code>Swift4.0</code>中如何引用<code>3.0</code>版本的第三方库，详见<a href="https://historyzhang.github.io/2017/10/21/Swift4.0%E5%BC%95%E7%94%A83.0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/" target="_blank" rel="noopener">这篇文章</a>。但是如果<code>Pods</code>中有很多第三方库都只支持<code>3.0</code>，一个一个修改恐怕是要累死。而且每次执行<code>pod update</code>之后之前设置的都会被重置，恐怕是想死的心都有了。<br><a id="more"></a><br>有一句是说：”懒惰”推动了人类的进步。所以程序猿总是有办法的。</p><blockquote><p>Talk is cheap, Show me the code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;10.0&apos;</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">target &apos;YourTarget&apos; do</span><br><span class="line">    pod &apos;SnapKit&apos;, &apos;~&gt; 4.0.0&apos;</span><br><span class="line">    pod &apos;Toast-Swift&apos;, &apos;~&gt; 2.0.0&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">post_install do |installer|</span><br><span class="line">    installer.pods_project.targets.each do |target|</span><br><span class="line">        if target.name == &apos;Toast-Swift&apos;</span><br><span class="line">            target.build_configurations.each do |config|</span><br><span class="line">                config.build_settings[&apos;SWIFT_VERSION&apos;] = &apos;3.2&apos;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章说道在&lt;code&gt;Swift4.0&lt;/code&gt;中如何引用&lt;code&gt;3.0&lt;/code&gt;版本的第三方库，详见&lt;a href=&quot;https://historyzhang.github.io/2017/10/21/Swift4.0%E5%BC%95%E7%94%A83.0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;。但是如果&lt;code&gt;Pods&lt;/code&gt;中有很多第三方库都只支持&lt;code&gt;3.0&lt;/code&gt;，一个一个修改恐怕是要累死。而且每次执行&lt;code&gt;pod update&lt;/code&gt;之后之前设置的都会被重置，恐怕是想死的心都有了。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/categories/iOS/"/>
    
    
      <category term="Swift4" scheme="http://bugdeveloper.gitee.io/tags/Swift4/"/>
    
      <category term="CocoaPods" scheme="http://bugdeveloper.gitee.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Xcode9下自动化编译错误</title>
    <link href="http://bugdeveloper.gitee.io/Xcode9%E4%B8%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/"/>
    <id>http://bugdeveloper.gitee.io/Xcode9下自动化编译错误/</id>
    <published>2017-11-09T14:03:20.000Z</published>
    <updated>2018-02-03T07:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用<code>CI</code>平台打包时突然失败了，查看日志后发现是在<code>exportArchive</code>时失败了。之前一直都是好好地，升级了<code>Xcode</code>之后突然就不行了，提示如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error: exportArchive: &quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features.</span><br><span class="line">Error Domain=IDEProvisioningErrorDomain Code=9</span><br><span class="line">&quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features.&quot; UserInfo=&#123;NSLocalizedDescription=&quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features., NSLocalizedRecoverySuggestion=Add a profile to the &quot;provisioningProfiles&quot; dictionary in your Export Options property list.&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>查阅资料后发现，在<code>Xcode9</code>下，<code>xcodebuild</code>需要配置更多的信息才能导出<code>ipa</code>，最主要的一个就是<code>provisioningProfiles</code>。<br>具体的操作步骤如下。</p><ol><li><p>使用<code>Xcode</code> <code>Archive</code>一个新的版本<br><img src="http://upload-images.jianshu.io/upload_images/606479-78a2269f27ebb3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p></li><li><p>在<code>Organizer</code>中找到刚刚<code>Archive</code>出来的版本，选择<code>Export</code>。<br><img src="http://upload-images.jianshu.io/upload_images/606479-7d463a8e3b69181a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p></li><li><p>选择你要导出的<code>ipa</code>类型，如果你需要不同版本，可以重复该流程，就可以得到其他类型所需要的信息了。<br><img src="http://upload-images.jianshu.io/upload_images/606479-ac0a0a0c788747a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p></li><li><p>导出<code>ipa</code>到目录<br><img src="http://upload-images.jianshu.io/upload_images/606479-7c81d9a2d4c0f347.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></p></li><li><p>最终导出的目录下会有<code>4</code>个文件，除了<code>ipa</code>文件还有一个<code>ExportOptions.plist</code>文件，这个文件就是我们使用<code>xcodebuild -exportArchive</code>命令时，<code>-exportOptionsPlist</code>参数需要指定的<code>plist</code>文件。<br><img src="http://upload-images.jianshu.io/upload_images/606479-da5c33fac97fc3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"></p></li></ol><p>我们用这个新的<code>plist</code>文件就可以了。如果你需要打其他类型的<code>ipa</code>，可以重复上述步骤，在<code>第三步</code>重新选择即可。你也可以按照刚才导出的<code>plist</code>自己修改。</p><p>新的<code>plist</code>中有如下一些选项，你也可以参照修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;compileBitcode&lt;/key&gt;</span><br><span class="line">    &lt;false/&gt;</span><br><span class="line">    &lt;key&gt;method&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;ad-hoc&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;provisioningProfiles&lt;/key&gt;</span><br><span class="line">    &lt;dict&gt;</span><br><span class="line">        &lt;key&gt;com.tsing.calculate&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;calculate_adhoc&lt;/string&gt;</span><br><span class="line">    &lt;/dict&gt;</span><br><span class="line">    &lt;key&gt;signingCertificate&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;iPhone Distribution&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;signingStyle&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;manual&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;stripSwiftSymbols&lt;/key&gt;</span><br><span class="line">    &lt;true/&gt;</span><br><span class="line">    &lt;key&gt;teamID&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;CL32FD34&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;thinning&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;&amp;lt;none&amp;gt;&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用&lt;code&gt;CI&lt;/code&gt;平台打包时突然失败了，查看日志后发现是在&lt;code&gt;exportArchive&lt;/code&gt;时失败了。之前一直都是好好地，升级了&lt;code&gt;Xcode&lt;/code&gt;之后突然就不行了，提示如下信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error: exportArchive: &amp;quot;AppName.app&amp;quot; requires a provisioning profile with the Push Notifications and App Groups features.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error Domain=IDEProvisioningErrorDomain Code=9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;AppName.app&amp;quot; requires a provisioning profile with the Push Notifications and App Groups features.&amp;quot; UserInfo=&amp;#123;NSLocalizedDescription=&amp;quot;AppName.app&amp;quot; requires a provisioning profile with the Push Notifications and App Groups features., NSLocalizedRecoverySuggestion=Add a profile to the &amp;quot;provisioningProfiles&amp;quot; dictionary in your Export Options property list.&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/categories/iOS/"/>
    
    
      <category term="自动打包" scheme="http://bugdeveloper.gitee.io/tags/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    
      <category term="xcodebuild" scheme="http://bugdeveloper.gitee.io/tags/xcodebuild/"/>
    
      <category term="Jenkins" scheme="http://bugdeveloper.gitee.io/tags/Jenkins/"/>
    
      <category term="Xcode9" scheme="http://bugdeveloper.gitee.io/tags/Xcode9/"/>
    
  </entry>
  
  <entry>
    <title>Swift4.0引用3.0第三方库</title>
    <link href="http://bugdeveloper.gitee.io/Swift4.0%E5%BC%95%E7%94%A83.0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <id>http://bugdeveloper.gitee.io/Swift4.0引用3.0第三方库/</id>
    <published>2017-10-21T15:56:21.000Z</published>
    <updated>2018-02-03T07:47:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Swift</code>已经发布了<code>4.0</code>版本，在<code>Xcode9</code>中新建项目后，默认是使用<code>4.0</code>语法的。项目中的引用的第三方库，虽然有很多已经发不了<code>4.0</code>版本，但是还是有一些未及时更新的，那在作者未更新之前我们是否有更好的办法来使用这些第三方库呢？答案当然是<strong>肯定</strong>的，<code>Xcode9</code>中是同时支持<code>3.2</code>和<code>4.0</code>语法的。具体的设置可以看下图。</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/606479-6a28ff6e929e5fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置Swift语法版本"></p><p>那么下面就说说如何设置同时支持<code>3.2</code>和<code>4.0</code>。</p><ol><li><p>项目中如果使用<code>Cocoapods</code>来管理第三方库时，可以找到不支持<code>4.0</code>语法的库所在<code>target</code>，然后找到<code>Swift Language Version</code>选项，改为<code>3.2</code>，然后就可以顺利编译通过了。<br><img src="http://upload-images.jianshu.io/upload_images/606479-6d08d94bf9c81df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Cocoapods库设置"></p></li><li><p>如果还有以源码集成进项目的，那就选择<code>Edit &gt; Convert &gt; To Current Swift Syntax..</code>吧</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;已经发布了&lt;code&gt;4.0&lt;/code&gt;版本，在&lt;code&gt;Xcode9&lt;/code&gt;中新建项目后，默认是使用&lt;code&gt;4.0&lt;/code&gt;语法的。项目中的引用的第三方库，虽然有很多已经发不了&lt;code&gt;4.0&lt;/code&gt;版本，但是还是有一些未及时更新的，那在作者未更新之前我们是否有更好的办法来使用这些第三方库呢？答案当然是&lt;strong&gt;肯定&lt;/strong&gt;的，&lt;code&gt;Xcode9&lt;/code&gt;中是同时支持&lt;code&gt;3.2&lt;/code&gt;和&lt;code&gt;4.0&lt;/code&gt;语法的。具体的设置可以看下图。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/categories/iOS/"/>
    
    
      <category term="Swift4" scheme="http://bugdeveloper.gitee.io/tags/Swift4/"/>
    
      <category term="iOS" scheme="http://bugdeveloper.gitee.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS下更改系统音量</title>
    <link href="http://bugdeveloper.gitee.io/iOS%E4%B8%8B%E6%9B%B4%E6%94%B9%E7%B3%BB%E7%BB%9F%E9%9F%B3%E9%87%8F/"/>
    <id>http://bugdeveloper.gitee.io/iOS下更改系统音量/</id>
    <published>2017-09-30T13:29:38.000Z</published>
    <updated>2018-02-03T07:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>iOS</code>中，如果想更改系统音量，只有2个方法，一是使用私有方法；二是使用<code>MPVolumeView</code>。</p><p>私有方法不在我们的讨论范围之列，我们来讨论一下如何使用<code>MPVolumeView</code>。</p><p>用过一系列的音乐播放器都知道，添加一个<code>MPVolumeView</code>在<code>View</code>上，然后设置<code>showsVolumeSlider = YES</code>，就会有一个<code>SliderView</code>，用户滑动时，就能更改系统音量。</p><p>这样带来的问题就是，<br><a id="more"></a></p><ol><li><p>会显示一个<code>MPVolumeView</code>;</p></li><li><p>需要手动触发滑动事件;</p></li></ol><p>对于第一个问题很简单，<code>MPVolumeView</code>的<code>hidden</code>属性设置为<code>YES</code>即可；所以主要解决如何模拟用户手动滑动事件即可。</p><p>不多说，有了思路后就变得很简单了，下面奉上实现代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 设置音量</span><br><span class="line"> */</span><br><span class="line">- (void)setVolume:(float)value &#123;</span><br><span class="line"></span><br><span class="line">    UISlider *volumeSlider = [self volumeSlider];</span><br><span class="line">    self.volumeView.showsVolumeSlider = YES; // 需要设置 showsVolumeSlider 为 YES</span><br><span class="line">    // 下面两句代码是关键</span><br><span class="line">    [volumeSlider setValue:value animated:NO];</span><br><span class="line">    [volumeSlider sendActionsForControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [self.volumeView sizeToFit];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (MPVolumeView *)volumeView &#123;</span><br><span class="line">    if (!_volumeView) &#123;</span><br><span class="line">        _volumeView = [[MPVolumeView alloc] init];</span><br><span class="line">        _volumeView.hidden = YES;</span><br><span class="line">        [self.window addSubview:_volumeView];</span><br><span class="line">    &#125;</span><br><span class="line">    return _volumeView;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line"> * 遍历控件，拿到UISlider</span><br><span class="line"> */</span><br><span class="line">- (UISlider *)volumeSlider &#123;</span><br><span class="line">    UISlider* volumeSlider = nil;</span><br><span class="line">    for (UIView *view in [self.volumeView subviews]) &#123;</span><br><span class="line">        if ([view.class.description isEqualToString:@&quot;MPVolumeSlider&quot;])&#123;</span><br><span class="line">            volumeSlider = (UISlider *)view;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return volumeSlider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;iOS&lt;/code&gt;中，如果想更改系统音量，只有2个方法，一是使用私有方法；二是使用&lt;code&gt;MPVolumeView&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;私有方法不在我们的讨论范围之列，我们来讨论一下如何使用&lt;code&gt;MPVolumeView&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;用过一系列的音乐播放器都知道，添加一个&lt;code&gt;MPVolumeView&lt;/code&gt;在&lt;code&gt;View&lt;/code&gt;上，然后设置&lt;code&gt;showsVolumeSlider = YES&lt;/code&gt;，就会有一个&lt;code&gt;SliderView&lt;/code&gt;，用户滑动时，就能更改系统音量。&lt;/p&gt;
&lt;p&gt;这样带来的问题就是，&lt;br&gt;
    
    </summary>
    
      <category term="小飞鱼" scheme="http://bugdeveloper.gitee.io/categories/%E5%B0%8F%E9%A3%9E%E9%B1%BC/"/>
    
    
      <category term="音量" scheme="http://bugdeveloper.gitee.io/tags/%E9%9F%B3%E9%87%8F/"/>
    
      <category term="MPVolumeView" scheme="http://bugdeveloper.gitee.io/tags/MPVolumeView/"/>
    
  </entry>
  
  <entry>
    <title>iOS拨打电话对话框问题解决</title>
    <link href="http://bugdeveloper.gitee.io/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E5%AF%B9%E8%AF%9D%E6%A1%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://bugdeveloper.gitee.io/iOS拨打电话对话框问题解决/</id>
    <published>2017-09-28T14:14:20.000Z</published>
    <updated>2018-02-03T07:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>iOS</code>中拨打电话大家应该都很清楚了，如果还有什么疑问的话可以参考<a href="https://historyzhang.github.io/2014/09/05/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/" target="_blank" rel="noopener">这篇文章</a>。但是<code>iOS10</code>的系统会先有个对话框确认，这与并不符合小飞鱼的需求。小飞鱼是由语音控制拨打电话，当用户查找到号码后，只需语音确认一次即可拨打电话，如果有系统的确认对话框，不仅多了一个步骤，而且还需要模拟点击对话框按钮事件，比较繁琐。<br><a id="more"></a><br>由于小飞鱼中，<code>App</code>和设备之间是通过<code>BLE</code>和传统蓝牙来连接的，而用过蓝牙耳机的都应该知道，可以之间通过蓝牙耳机拨打电话。所以方案就有了：<br><img src="http://upload-images.jianshu.io/upload_images/606479-40f070fe687c0735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小飞鱼打电话方案"><br>如上图，<code>App</code>端先通过<code>BLE</code>把号码发送给设备，然后设备通过传统蓝牙协议(<code>PBAP</code>中<code>AT Command</code>)，直接拨号即可，不会弹出确认框。</p><p>具体的指令如下：<code>AT#CW13012341234\r\n</code>；<br>整个<code>PBAP</code>协议参见<a href="http://file.yizimg.com/440517/2015090120595853.pdf" target="_blank" rel="noopener">这篇文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;iOS&lt;/code&gt;中拨打电话大家应该都很清楚了，如果还有什么疑问的话可以参考&lt;a href=&quot;https://historyzhang.github.io/2014/09/05/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;。但是&lt;code&gt;iOS10&lt;/code&gt;的系统会先有个对话框确认，这与并不符合小飞鱼的需求。小飞鱼是由语音控制拨打电话，当用户查找到号码后，只需语音确认一次即可拨打电话，如果有系统的确认对话框，不仅多了一个步骤，而且还需要模拟点击对话框按钮事件，比较繁琐。&lt;br&gt;
    
    </summary>
    
      <category term="小飞鱼" scheme="http://bugdeveloper.gitee.io/categories/%E5%B0%8F%E9%A3%9E%E9%B1%BC/"/>
    
    
      <category term="打电话" scheme="http://bugdeveloper.gitee.io/tags/%E6%89%93%E7%94%B5%E8%AF%9D/"/>
    
      <category term="蓝牙" scheme="http://bugdeveloper.gitee.io/tags/%E8%93%9D%E7%89%99/"/>
    
      <category term="PBAP" scheme="http://bugdeveloper.gitee.io/tags/PBAP/"/>
    
  </entry>
  
  <entry>
    <title>小飞鱼项目有感</title>
    <link href="http://bugdeveloper.gitee.io/%E5%B0%8F%E9%A3%9E%E9%B1%BC%E9%A1%B9%E7%9B%AE%E6%9C%89%E6%84%9F/"/>
    <id>http://bugdeveloper.gitee.io/小飞鱼项目有感/</id>
    <published>2017-09-27T15:36:00.000Z</published>
    <updated>2018-02-03T07:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小飞鱼是科大讯飞车载开发的一款智能行车助手，通过语音操作，让你在开车过程中解放双手，使你在开车过程中更加安全，体验更优。<br>小飞鱼目前支持使用语音导航，打电话，听音乐、节目、电台，查询天气、股票，还支持对话闲聊，让你的旅途不再寂寞。</p></blockquote><p>整个项目涉及蓝牙、BLE、电话、高德导航以及媒体播放，在项目过程中遇到很多坑，后续会逐步介绍项目中遇到的问题。<br><a id="more"></a><br>这里先在这里打个广告吧（微信文章直接长按识别二维码，或者可以点击底部阅读原文）。<br><a href="https://itunes.apple.com/us/app/%E5%B0%8F%E9%A3%9E%E9%B1%BC/id1207190161?mt=8" target="_blank" rel="noopener">iOS App下载地址</a><br><img src="http://upload-images.jianshu.io/upload_images/606479-de8292a52cc9a2c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS App下载地址"></p><p><a href="https://item.jd.com/16895582778.html" target="_blank" rel="noopener">设备购买地址</a><br><img src="http://upload-images.jianshu.io/upload_images/606479-c26d5a8a702fb914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设备购买地址"></p><h2 id="1-iOS拨打电话对话框问题解决"><a href="#1-iOS拨打电话对话框问题解决" class="headerlink" title="1. iOS拨打电话对话框问题解决"></a><a href="https://historyzhang.github.io/2017/09/28/iOS拨打电话对话框问题解决" target="_blank" rel="noopener">1. iOS拨打电话对话框问题解决</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;小飞鱼是科大讯飞车载开发的一款智能行车助手，通过语音操作，让你在开车过程中解放双手，使你在开车过程中更加安全，体验更优。&lt;br&gt;小飞鱼目前支持使用语音导航，打电话，听音乐、节目、电台，查询天气、股票，还支持对话闲聊，让你的旅途不再寂寞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;整个项目涉及蓝牙、BLE、电话、高德导航以及媒体播放，在项目过程中遇到很多坑，后续会逐步介绍项目中遇到的问题。&lt;br&gt;
    
    </summary>
    
      <category term="小飞鱼" scheme="http://bugdeveloper.gitee.io/categories/%E5%B0%8F%E9%A3%9E%E9%B1%BC/"/>
    
    
      <category term="电话" scheme="http://bugdeveloper.gitee.io/tags/%E7%94%B5%E8%AF%9D/"/>
    
      <category term="小飞鱼" scheme="http://bugdeveloper.gitee.io/tags/%E5%B0%8F%E9%A3%9E%E9%B1%BC/"/>
    
  </entry>
  
</feed>
