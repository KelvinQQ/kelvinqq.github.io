{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/ali_pay.jpg","path":"images/ali_pay.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":0},{"_id":"source/images/history.jpg","path":"images/history.jpg","modified":0,"renderable":0},{"_id":"source/images/weixin_pay.jpg","path":"images/weixin_pay.jpg","modified":0,"renderable":0},{"_id":"source/images/weixin_qrcode.jpg","path":"images/weixin_qrcode.jpg","modified":0,"renderable":0},{"_id":"source/images/zzzp_shot_1.png","path":"images/zzzp_shot_1.png","modified":0,"renderable":0},{"_id":"source/images/blog/12306ForMac.jpg","path":"images/blog/12306ForMac.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/2015-04-27-16-00.png","path":"images/blog/2015-04-27-16-00.png","modified":0,"renderable":0},{"_id":"source/images/blog/2015-05-04-14-00.jpg","path":"images/blog/2015-05-04-14-00.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/CVCalendar.gif","path":"images/blog/CVCalendar.gif","modified":0,"renderable":0},{"_id":"source/images/blog/DKImagePickerController-1.png","path":"images/blog/DKImagePickerController-1.png","modified":0,"renderable":0},{"_id":"source/images/blog/DKImagePickerController-2.png","path":"images/blog/DKImagePickerController-2.png","modified":0,"renderable":0},{"_id":"source/images/blog/Eureka-1.gif","path":"images/blog/Eureka-1.gif","modified":0,"renderable":0},{"_id":"source/images/blog/Feature.png","path":"images/blog/Feature.png","modified":0,"renderable":0},{"_id":"source/images/blog/How.png","path":"images/blog/How.png","modified":0,"renderable":0},{"_id":"source/images/blog/JTCalendar-2.png","path":"images/blog/JTCalendar-2.png","modified":0,"renderable":0},{"_id":"source/images/blog/JTCalendar.gif","path":"images/blog/JTCalendar.gif","modified":0,"renderable":0},{"_id":"source/images/blog/NotificationBanner-1.gif","path":"images/blog/NotificationBanner-1.gif","modified":0,"renderable":0},{"_id":"source/images/blog/NotificationBanner-2.gif","path":"images/blog/NotificationBanner-2.gif","modified":0,"renderable":0},{"_id":"source/images/blog/NotificationBanner-3.gif","path":"images/blog/NotificationBanner-3.gif","modified":0,"renderable":0},{"_id":"source/images/blog/SwipeCellKit.gif","path":"images/blog/SwipeCellKit.gif","modified":0,"renderable":0},{"_id":"source/images/blog/XLForm.gif","path":"images/blog/XLForm.gif","modified":0,"renderable":0},{"_id":"source/images/blog/calculate_app_qrcode.png","path":"images/blog/calculate_app_qrcode.png","modified":0,"renderable":0},{"_id":"source/images/blog/circle_head.png","path":"images/blog/circle_head.png","modified":0,"renderable":0},{"_id":"source/images/blog/geohash_1.jpg","path":"images/blog/geohash_1.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/geohash_2.jpg","path":"images/blog/geohash_2.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/geohash_3.jpg","path":"images/blog/geohash_3.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/geohash_4.jpg","path":"images/blog/geohash_4.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/geohash_5.jpg","path":"images/blog/geohash_5.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/me.jpeg","path":"images/blog/me.jpeg","modified":0,"renderable":0},{"_id":"source/images/blog/page_after.png","path":"images/blog/page_after.png","modified":0,"renderable":0},{"_id":"source/images/blog/page_before.png","path":"images/blog/page_before.png","modified":0,"renderable":0},{"_id":"source/images/blog/runtime_storyboard_1.png","path":"images/blog/runtime_storyboard_1.png","modified":0,"renderable":0},{"_id":"source/images/blog/runtime_storyboard_2.png","path":"images/blog/runtime_storyboard_2.png","modified":0,"renderable":0},{"_id":"source/images/blog/scrollview_autolayout_1.png","path":"images/blog/scrollview_autolayout_1.png","modified":0,"renderable":0},{"_id":"source/images/blog/scrollview_autolayout_2.png","path":"images/blog/scrollview_autolayout_2.png","modified":0,"renderable":0},{"_id":"source/images/blog/scrollview_autolayout_3.png","path":"images/blog/scrollview_autolayout_3.png","modified":0,"renderable":0},{"_id":"source/images/blog/scrollview_autolayout_4.png","path":"images/blog/scrollview_autolayout_4.png","modified":0,"renderable":0},{"_id":"source/images/blog/sgs.jpeg","path":"images/blog/sgs.jpeg","modified":0,"renderable":0},{"_id":"source/images/blog/sgs_qrcode.jpg","path":"images/blog/sgs_qrcode.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/wenda-helper.gif","path":"images/blog/wenda-helper.gif","modified":0,"renderable":0},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-1.png","path":"images/blog/GitHubWeekly-20190913/bnd-1.png","modified":0,"renderable":0},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-2.png","path":"images/blog/GitHubWeekly-20190913/bnd-2.png","modified":0,"renderable":0},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-3.png","path":"images/blog/GitHubWeekly-20190913/bnd-3.png","modified":0,"renderable":0},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-4.png","path":"images/blog/GitHubWeekly-20190913/bnd-4.png","modified":0,"renderable":0},{"_id":"source/images/blog/GitHubWeekly-20190913/cover.jpg","path":"images/blog/GitHubWeekly-20190913/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/GitHubWeekly-20190913/mall-1.gif","path":"images/blog/GitHubWeekly-20190913/mall-1.gif","modified":0,"renderable":0},{"_id":"source/images/blog/GitHubWeekly-20190913/lookin-1.jpg","path":"images/blog/GitHubWeekly-20190913/lookin-1.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/12306-1.png","path":"images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/12306-1.png","modified":0,"renderable":0},{"_id":"source/images/blog/两个Bug引发的阴谋论/cover.webp","path":"images/blog/两个Bug引发的阴谋论/cover.webp","modified":0,"renderable":0},{"_id":"source/images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/cover.jpg","path":"images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/两个Bug引发的阴谋论/image_1.webp","path":"images/blog/两个Bug引发的阴谋论/image_1.webp","modified":0,"renderable":0},{"_id":"source/images/blog/两个Bug引发的阴谋论/image_2.webp","path":"images/blog/两个Bug引发的阴谋论/image_2.webp","modified":0,"renderable":0},{"_id":"source/images/blog/两个Bug引发的阴谋论/image_3.webp","path":"images/blog/两个Bug引发的阴谋论/image_3.webp","modified":0,"renderable":0},{"_id":"source/images/blog/利用Xcode修改iPhone定位/cover.jpg","path":"images/blog/利用Xcode修改iPhone定位/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-2.png","path":"images/blog/利用Xcode修改iPhone定位/image-2.png","modified":0,"renderable":0},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-3.png","path":"images/blog/利用Xcode修改iPhone定位/image-3.png","modified":0,"renderable":0},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-1.png","path":"images/blog/利用Xcode修改iPhone定位/image-1.png","modified":0,"renderable":0},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-4.png","path":"images/blog/利用Xcode修改iPhone定位/image-4.png","modified":0,"renderable":0},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/cover.jpg","path":"images/blog/安利一个颜值最高的GitHub小程序/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-1.png","path":"images/blog/安利一个颜值最高的GitHub小程序/xcx-1.png","modified":0,"renderable":0},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-3.png","path":"images/blog/安利一个颜值最高的GitHub小程序/xcx-3.png","modified":0,"renderable":0},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-2.png","path":"images/blog/安利一个颜值最高的GitHub小程序/xcx-2.png","modified":0,"renderable":0},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-4.png","path":"images/blog/安利一个颜值最高的GitHub小程序/xcx-4.png","modified":0,"renderable":0},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-5.png","path":"images/blog/安利一个颜值最高的GitHub小程序/xcx-5.png","modified":0,"renderable":0},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-3.png","path":"images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-3.png","modified":0,"renderable":0},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-4.png","path":"images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-4.png","modified":0,"renderable":0},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-2.png","path":"images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-2.png","modified":0,"renderable":0},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery.jpg","path":"images/blog/生活不止眼前的苟且还有诗和远方的田野/potery.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/wechat.png","path":"images/blog/生活不止眼前的苟且还有诗和远方的田野/wechat.png","modified":0,"renderable":0},{"_id":"source/images/blog/猿创日记/210822/蚂蚁金服.jpg","path":"images/blog/猿创日记/210822/蚂蚁金服.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/猿创日记/210826/朝霞.jpg","path":"images/blog/猿创日记/210826/朝霞.jpg","modified":0,"renderable":0},{"_id":"source/images/weixin_blog.jpg","path":"images/weixin_blog.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/ali_pay.jpg","path":"images/ali_pay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/history.jpg","path":"images/history.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixin_blog.jpg","path":"images/weixin_blog.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixin_pay.jpg","path":"images/weixin_pay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/images/blog/猿创日记/210828/花.jpg","path":"images/blog/猿创日记/210828/花.jpg","modified":0,"renderable":0},{"_id":"source/images/blog/猿创日记/210828/热搜.png","path":"images/blog/猿创日记/210828/热搜.png","modified":0,"renderable":0},{"_id":"source/images/blog/猿创日记/210831/蓝天白云.jpeg","path":"images/blog/猿创日记/210831/蓝天白云.jpeg","modified":0,"renderable":0},{"_id":"source/images/blog/猿创日记/210905/百度搜索.jpeg","path":"images/blog/猿创日记/210905/百度搜索.jpeg","modified":1,"renderable":0},{"_id":"source/images/blog/猿创日记/210905/文章配图.jpeg","path":"images/blog/猿创日记/210905/文章配图.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/App内打开AppStore.markdown","hash":"aed2bbe6fc2ecebfe0dcaf49a470035f22d29d63","modified":1630071282819},{"_id":"source/_posts/CocoaPods设置target支持的swift版本.md","hash":"4b0177fa5250e01219bade11088cc3b3a36fc901","modified":1630071282819},{"_id":"source/_posts/AutoLayout的使用.markdown","hash":"29e724d8d0893801ebdbd325a382d26b91a12e4a","modified":1630071282819},{"_id":"source/_posts/FFmpeg iOS库编译与集成.md","hash":"f81cb38ae2f8687bc735d6129ec246a9212df7a2","modified":1630071282820},{"_id":"source/_posts/FFmpeg解码流程.md","hash":"592e3efd9b0d88344fe0c1cadbfce2e891a6272a","modified":1630071282820},{"_id":"source/_posts/Flutter初体验.md","hash":"01e6a111808d10979f9910b5c4db1cb264931fa1","modified":1630071282820},{"_id":"source/_posts/GeoHash系列 —— 一、基本介绍.markdown","hash":"9119adc86c2d77e8aee7c36daf035e0519d70b05","modified":1630071282820},{"_id":"source/_posts/GeoHash系列 —— 二、算法步骤.markdown","hash":"9b848a85235cca6a794faa36a288b341739767a6","modified":1630071282820},{"_id":"source/_posts/GitHubWeekly-20190921.md","hash":"48f8a95a3adf9427f4f2bdd2ab6bf36dbd7b11b2","modified":1630071282821},{"_id":"source/_posts/GitHub-Weekly-20190913.md","hash":"8d3e9a07ff6c560040130ab180d9dbd00fb59366","modified":1630071282820},{"_id":"source/_posts/GitHub博客访问超慢解决.markdown","hash":"e5ad2d2add0bc8190af31a897d21551467d20c69","modified":1630071282821},{"_id":"source/_posts/GitHub标星14k+，这个项目既能学Python又能抢票.md","hash":"44ad9fa78471b1583f4bf13f3a34e845347b8969","modified":1630071282821},{"_id":"source/_posts/Github源码推荐(1.22-1.28).md","hash":"90a3cc051ae5ed32f3f583829cabf2aeb7036a8a","modified":1630071282821},{"_id":"source/_posts/Github源码推荐(1.15~1.21).md","hash":"16393b5d475c463ca62813fab38f24212d7d04f0","modified":1630071282821},{"_id":"source/_posts/Github源码推荐(1.8~1.14).md","hash":"ea2b2d6acb2f0482774ef3e490f222e7cb358a34","modified":1630071282821},{"_id":"source/_posts/Github源码索引.md","hash":"1014cb04e157aedee47e88429357a23cf5fdb4bb","modified":1630071282821},{"_id":"source/_posts/NSArray对所有元素操作.markdown","hash":"4519f035142239f8e17ffa81f7603cba1eb3c567","modified":1630071282822},{"_id":"source/_posts/Swift关于解包的Tip.md","hash":"9882db1001661f8b7f58836a0fe801da58f21d64","modified":1630071282822},{"_id":"source/_posts/Podfile引用第三方库设定版本.markdown","hash":"3f30c2c8eeb31544881b2ab598994b5d52557bb6","modified":1630852528418},{"_id":"source/_posts/Runtime在Storyboard中的应用.markdown","hash":"65d6d6c2918e4b19efd052abfefeae940cefa77f","modified":1630071282822},{"_id":"source/_posts/Swift4.0引用3.0第三方库.md","hash":"5beaad93e8d7706c879165c19df2112c2a194536","modified":1630071282822},{"_id":"source/_posts/UIScrollView点击StatusBar返回顶部失效的解决.markdown","hash":"e40b4d6b0ff7c15f0b96a7a8613e44084fccaec1","modified":1630071282823},{"_id":"source/_posts/Xcode9下自动化编译错误.md","hash":"2470056d98b9dca1b816aa83b567389213e77e60","modified":1630071282823},{"_id":"source/_posts/XCode自动打包ipa脚本.markdown","hash":"f4d0ac3fe884208465e5271149f271bd6f7ee65e","modified":1630071282823},{"_id":"source/_posts/UITableView多余分割线.markdown","hash":"093c55292821f2b9d1a0d9b6d54690d6e53a06f4","modified":1630071282823},{"_id":"source/_posts/Xcode多Target设置.md","hash":"c94f5544b00e734b4983d98337113efd4bc91453","modified":1630071282823},{"_id":"source/_posts/hidesBottomBarWhenPushed用法.markdown","hash":"0d6d797e879ac604f4fb7dfe5474d55631a9b4d6","modified":1630071282824},{"_id":"source/_posts/iOS10下使用AutoLayout动画失效解决.md","hash":"2e466a4285fa6671a64270bf1da43e6b804789a9","modified":1630071282824},{"_id":"source/_posts/iOS8下TabBarController push后控件下移闪动.markdown","hash":"e3b8fad7d5b84ce646068652748b4dd87146cfa2","modified":1630852481611},{"_id":"source/_posts/iOS-高性能异构滚动视图-LazyScrollView实现.md","hash":"13106cce299b7c1d988bcfda7127b3aba1a640f5","modified":1630071282824},{"_id":"source/_posts/iOS下日志记录.md","hash":"e552f766b36178d986af4e6e2f68b625e1b71408","modified":1630071282824},{"_id":"source/_posts/iOS下更改系统音量.md","hash":"b2d981094c58b5b90fff22dc7cea0991d591dd06","modified":1630852500458},{"_id":"source/_posts/iOS创建单例.md","hash":"806c07b0fcf55cd62fa25c6f1d9e25d4d760e6bf","modified":1630071282825},{"_id":"source/_posts/iOS拨打电话.markdown","hash":"4dabc5e43b3f7f932c4e167824014a8831267b66","modified":1630071282825},{"_id":"source/_posts/iOS合并真机和模拟器静态库.markdown","hash":"99b277b97be00ab6e22cb14f8fd46e324a1f503c","modified":1630071282825},{"_id":"source/_posts/iOS唯一标志.markdown","hash":"31314624ddf765f978769a1d53b450c8374b8d15","modified":1630071282825},{"_id":"source/_posts/iOS汉字转拼音.markdown","hash":"12eee43fede7eba556003f3f683cb0205619682d","modified":1630071282825},{"_id":"source/_posts/iOS拨打电话对话框问题解决.md","hash":"bf5808bc2936442430585b3fdd43db2e984f1bff","modified":1630852511490},{"_id":"source/_posts/iOS配置gitignore文件.markdown","hash":"852f03367a496b76806857a57820d6313191c6d1","modified":1630071282826},{"_id":"source/_posts/iOS提交AppStore时描述翻译.markdown","hash":"5bdcaaa95f290affac368ae7e207bf3a1bd56160","modified":1630071282825},{"_id":"source/_posts/从两道面试题说起.md","hash":"963995d7483574e0dc30f3a06d511a29d92bd14b","modified":1630071282826},{"_id":"source/_posts/公众号推荐.md","hash":"46cb7fc25179fff15d447481d079fc0ecfb99f6d","modified":1630852632941},{"_id":"source/_posts/两个Bug引发的阴谋论.md","hash":"e1ca2e46f54acc9007dee24777b93ac3a2225bb6","modified":1630852300331},{"_id":"source/_posts/使用LeanCloud快速开发一款小程序.md","hash":"c80f8ff9c98b8da572da6695774491fe6e8ece81","modified":1630071282826},{"_id":"source/_posts/利用Xcode修改iPhone定位.md","hash":"e1d89e3ed065af24aad9c14ef9e7b2f31139f08b","modified":1630071282827},{"_id":"source/_posts/安利一个颜值最高的GitHub小程序.md","hash":"3b5ea5b04daa32fc5402c3f180c8e31c012a5dfd","modified":1630071282827},{"_id":"source/_posts/博客分页和阅读更多功能.markdown","hash":"7367c4641730133a70ed923d1326f31fb68d91e0","modified":1630852640926},{"_id":"source/_posts/圆形头像.markdown","hash":"6325a2a49d54695879a5d2e1ed6558a3fab45d18","modified":1630071282827},{"_id":"source/_posts/在小程序中集成赞赏.md","hash":"62d715b02b31116a701032a70643ef60b8b725d6","modified":1630071282827},{"_id":"source/_posts/小程序利用Canvas绘制图片和竖排文字.md","hash":"04d024ff126c56e7cdc2ebaca2b82a0f57d14000","modified":1630852679649},{"_id":"source/_posts/安家GitHub.markdown","hash":"d4449ac846e4eaa7bebbc7c7a089c95c57b31a3a","modified":1630852656861},{"_id":"source/_posts/小飞鱼项目有感.md","hash":"b0a228ccdfe452e7b72efcaa7dd99401481978d2","modified":1630852691933},{"_id":"source/_posts/引入三方库编译错误解决.markdown","hash":"30dafa8aec11a4da537a91625bbaf5d3b213c8f8","modified":1630071282828},{"_id":"source/about/index.md","hash":"aec9675a0a3e8d7370fd7d4d9de238fe190a4657","modified":1630071282828},{"_id":"source/_posts/开源协议知多少.md","hash":"6b731da0f763825fbf9a5c654915e293c8caf06f","modified":1630852698005},{"_id":"source/categories/index.md","hash":"89679d18b86e64637b879c348e55746e103567c5","modified":1630071282829},{"_id":"source/_posts/房贷个税一个都不能少.markdown","hash":"669bd7cd4d329868ae184d993eed7191a946bdf4","modified":1630852720532},{"_id":"source/_posts/生活不止眼前的苟且还有诗和远方的田野.md","hash":"d30e0aaee71308409226bb618e829aeffee6d6d9","modified":1630071282828},{"_id":"source/tags/index.md","hash":"1e5199cccab8a4b04949f7f472a265c341c60197","modified":1630071282990},{"_id":"source/images/favicon.png","hash":"0d6a85250d6ab473b790133bbc76462749ec9306","modified":1629978991079},{"_id":"source/images/blog/2015-04-27-16-00.png","hash":"c7d78192d1bc3452c0f5f97ce0a8647cfb8af462","modified":1629978990595},{"_id":"source/_posts/cocos2d v3.x mac 安装.markdown","hash":"9ada32487fc4fb539e495d736b10360045d63e8e","modified":1630071282823},{"_id":"source/images/blog/circle_head.png","hash":"ee77e8656d9cdbd2df127ed1a7d3fdf945a4dcb6","modified":1629978990952},{"_id":"source/images/blog/geohash_1.jpg","hash":"d3295308232618283b5dec680cc32eb22b768e30","modified":1629978990953},{"_id":"source/images/blog/geohash_2.jpg","hash":"d3295308232618283b5dec680cc32eb22b768e30","modified":1629978990955},{"_id":"source/images/blog/geohash_4.jpg","hash":"8f23c9e9adfdc9dee442567568a1329ae53329c2","modified":1629978990958},{"_id":"source/images/blog/geohash_3.jpg","hash":"59ce311ca66dbfa609e6fcb5d1bfefe7caa495ec","modified":1629978990956},{"_id":"source/images/blog/page_after.png","hash":"2772593cc3fc205f46a404a480e388e9e1918fc1","modified":1629978990966},{"_id":"source/images/blog/me.jpeg","hash":"7c08ab6ce516f6426a644c5fde542739c4133827","modified":1629978990964},{"_id":"source/images/blog/geohash_5.jpg","hash":"d39ed62a7ad83b7eedaf26ecd541d662c019baf4","modified":1629978990960},{"_id":"source/images/blog/page_before.png","hash":"5b19e8d96866c6e117053a7804a06b109accbe09","modified":1629978990968},{"_id":"source/images/blog/runtime_storyboard_2.png","hash":"4942de1e493c9812aabecfd9d5672ef19953c5fe","modified":1629978990972},{"_id":"source/images/blog/runtime_storyboard_1.png","hash":"a8dc214f28aedb5137f50166927a53ecece13ae7","modified":1629978990970},{"_id":"source/images/blog/scrollview_autolayout_2.png","hash":"0d15f93893d551c068973721c35fd6d6e62e8aab","modified":1629978990979},{"_id":"source/images/blog/scrollview_autolayout_4.png","hash":"e38dd0faa45f6c3cc0f44fa031178436ae885fea","modified":1629978990983},{"_id":"source/images/blog/sgs_qrcode.jpg","hash":"bf4b8746708d1aa785f3d5d9b6ec29f724b27ef4","modified":1629978990987},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-2.png","hash":"56f64c2504c300dd071b3283c19391ffee6e18b9","modified":1629978990691},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-1.png","hash":"c1b30c4d771fee645d68c4f06e8ffd01aa346b6a","modified":1629978990690},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-3.png","hash":"735e5e424a74e34847dded53e21bbc1be7348c1e","modified":1629978990692},{"_id":"source/images/blog/两个Bug引发的阴谋论/cover.webp","hash":"8976c71a53a823f18e884e066a251c2e2f5d70fe","modified":1629978990997},{"_id":"source/images/blog/GitHubWeekly-20190913/bnd-4.png","hash":"ff1076cc2d2634e0c36e80d4d770fe58aac288cd","modified":1629978990694},{"_id":"source/images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/12306-1.png","hash":"8d2ac81cc02009cbe6833915cb68a65e1ce8fbbb","modified":1629978990812},{"_id":"source/images/blog/两个Bug引发的阴谋论/image_3.webp","hash":"03966a9c251c9e55cb51bf14d4591642cd095402","modified":1629978991002},{"_id":"source/images/blog/两个Bug引发的阴谋论/image_1.webp","hash":"6a755c4b58a892b73952ac638785bcc5ee02da9e","modified":1629978990999},{"_id":"source/images/blog/两个Bug引发的阴谋论/image_2.webp","hash":"323a8ba951c06bf22f319236b38d20fbb4c10ea8","modified":1629978991000},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-5.png","hash":"1f47057f0c8e9959fbd34b626b8c2c70d1d7ee60","modified":1629978991034},{"_id":"source/images/ali_pay.jpg","hash":"643a08d9d1207b7538f80791a75d0f5f1d592c46","modified":1630155961981},{"_id":"source/images/weixin_qrcode.jpg","hash":"187bc797f0c6b359e70251fa87f7a52813ca0199","modified":1630026620214},{"_id":"source/images/weixin_pay.jpg","hash":"4dcf2417e66175efefb0830069885e4b68887449","modified":1630155961983},{"_id":"source/images/weixin_qrcode.png","hash":"bfc65f9b83e1e18fad3d2e36fc1548c064cc3979","modified":1629978991089},{"_id":"source/images/blog/JTCalendar-2.png","hash":"23627bdedcadfddcc0b60022d62cf92ff925c6d8","modified":1629978990842},{"_id":"source/images/blog/JTCalendar.gif","hash":"d784c7a0031fa3f12a1294108fce1d32b84182a1","modified":1629978990844},{"_id":"source/images/blog/scrollview_autolayout_1.png","hash":"3b82081055787f30ce7e434a49a93812645a34c7","modified":1629978990975},{"_id":"source/images/blog/scrollview_autolayout_3.png","hash":"83c51a5491a3d38b8b1d057c7e25a12a6dafba8b","modified":1629978990982},{"_id":"source/images/blog/sgs.jpeg","hash":"c8cd083e320ccc3d86f1ef9fefd32c8f8ad4286b","modified":1629978990986},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-2.png","hash":"dffeff01fbd72cf7b339ab5335b0a47ba30234ff","modified":1629978991011},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/cover.jpg","hash":"65bf906f067e22a4156ccf60f348c44dda38bae9","modified":1629978991019},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-4.png","hash":"72d59e23f3ac620b184b0bd1ca62f55e665c1f94","modified":1629978991017},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-3.png","hash":"f405b425c94296ee38e47330473dfcd660529c1d","modified":1629978991031},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-4.png","hash":"8d3da0acd920ee7b09c8022066026932d1637ec4","modified":1629978991033},{"_id":"source/images/blog/2015-05-04-14-00.jpg","hash":"d361aae74ffce2b71805632da4c1f3a5bb22b18a","modified":1629978990599},{"_id":"source/images/blog/GitHubWeekly-20190913/cover.jpg","hash":"6868df39b65e6fa16b25de15addf8e299be34d7f","modified":1629978990696},{"_id":"source/images/blog/GitHubWeekly-20190913/lookin-1.jpg","hash":"9ae26da4324904d9406e64c687ea1f766f1a61ef","modified":1629978990700},{"_id":"source/images/blog/利用Xcode修改iPhone定位/cover.jpg","hash":"dd0fae9f7fffdd546db265202c21f4938ac24c0f","modified":1629978991004},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-3.png","hash":"1f96aadd7f41b1ccbb788ee157736c763cb26c7c","modified":1629978991014},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-2.png","hash":"cdd07735336bddc36e33454758b9b725022472dc","modified":1629978991029},{"_id":"source/images/blog/calculate_app_qrcode.png","hash":"31150f82732ef75f5582beae5393285415069e64","modified":1629978990951},{"_id":"source/images/blog/利用Xcode修改iPhone定位/image-1.png","hash":"bcd3527af0ed5aab67b0ceb130fa4f4f3c1c6fcc","modified":1629978991008},{"_id":"source/images/history.jpg","hash":"15e9efdcf071782a808916322001564482e768f6","modified":1629978991083},{"_id":"source/images/blog/DKImagePickerController-2.png","hash":"8674525a558abc2fe6326d00babe9b5ce14a2970","modified":1629978990626},{"_id":"source/images/blog/Feature.png","hash":"b22ee41a0561f0512522ff61c5f2498774c7628e","modified":1629978990689},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1630054406189},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1630054406189},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1630054406194},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1630054406190},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1630054406195},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1630054406194},{"_id":"themes/next/_config.yml","hash":"3e12fcc96b2ceb5fe27bfdd9e06211747eef9a9f","modified":1630290478130},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1630054406196},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1630054406194},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1630054406204},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1630054406234},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1630054406190},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1630054406195},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1630054406192},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1630054406193},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1630054406193},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1630054406193},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1630054406190},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1630054406193},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1630054406193},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1630054406194},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1630054406192},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1630054406194},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1630054406196},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1630054406197},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1630054406197},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1630054406197},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1630054406198},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1630054406199},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1630054406199},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1630054406199},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1630054406199},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1630054406204},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1630054406205},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1630054406205},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1630054406205},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1630054406206},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1630054406206},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1630054406206},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1630054406207},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1630054406207},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1630054406207},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1630054406207},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1630054406208},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1630054406208},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1630054406208},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1630054406208},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1630054406209},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1630054406209},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1630054406209},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1630054406210},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1630054406209},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1630054406210},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1630054406210},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1630054406211},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1630054406233},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1630054406233},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1630054406233},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1630054406234},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1630054406234},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1630054406234},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1630054406241},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1630054406191},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1630054406191},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1630054406191},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1630054406192},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1630054406200},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1630054406200},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1630054406200},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1630054406201},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1630054406201},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1630054406201},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1630054406202},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1630054406202},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1630054406202},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1630054406203},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1630054406203},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1630054406203},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1630054406204},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1630054406211},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1630054406211},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1630054406212},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1630054406212},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1630054406212},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1630054406215},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1630054406216},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1630054406219},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1630054406220},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1630054406220},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1630054406221},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1630054406222},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1630054406223},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1630054406224},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1630054406228},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1630054406229},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1630054406229},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1630054406244},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1630054406265},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1630054406272},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1630054406273},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1630054406273},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1630054406274},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1630054406274},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1630054406275},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1630054406275},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1630054406275},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1630054406273},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1630054406276},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1630054406274},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1630054406276},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1630054406276},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1630054406277},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1630054406277},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1630054406277},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1630054406278},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1630054406278},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1630054406278},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1630054406279},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1630054406280},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1630054406235},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1630054406238},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1630054406239},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1630054406239},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1630054406239},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1630054406240},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1630054406240},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1630054406240},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1630054406241},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1630054406241},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1630054406241},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1630054406242},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1630054406242},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1630054406242},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1630054406243},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1630054406243},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1630054406243},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1630054406243},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1630054406244},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1630054406244},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1630054406213},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1630054406213},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1630054406214},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1630054406214},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1630054406214},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1630054406215},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1630054406215},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1630054406216},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1630054406216},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1630054406216},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1630054406217},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1630054406217},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1630054406218},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1630054406218},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1630054406218},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1630054406218},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1630054406219},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1630054406219},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1630054406221},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1630054406221},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1630054406222},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1630054406222},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1630054406222},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1630054406223},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1630054406224},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1630054406224},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1630054406224},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1630054406225},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1630054406225},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1630054406226},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1630054406226},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1630054406226},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1630054406227},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1630054406227},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1630054406228},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1630054406228},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1630054406228},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1630054406229},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1630054406230},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1630054406230},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1630054406230},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1630054406231},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1630054406231},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1630054406231},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1630054406232},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1630054406232},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1630054406232},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1630054406233},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1630054406271},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1630054406272},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1630054406272},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1630054406272},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1630054406279},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1630054406279},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1630054406284},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1630054406235},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1630054406235},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1630054406236},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1630054406284},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1630054406236},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1630054406236},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1630054406271},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1630054406237},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1630054406237},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1630054406238},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1630054406238},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1630054406238},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1630054406237},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1630054406246},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1630054406245},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1630054406245},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1630054406251},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1630054406255},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1630054406256},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1630054406259},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1630054406259},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1630054406260},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1630054406261},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1630054406262},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1630054406262},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1630054406265},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1630054406262},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1630054406266},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1630054406266},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1630054406266},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1630054406267},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1630054406267},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1630054406267},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1630054406265},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1630054406268},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1630054406268},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1630054406268},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1630054406268},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1630054406269},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1630054406269},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1630054406269},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1630054406270},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1630054406270},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1630054406270},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1630054406270},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1630054406281},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1630054406282},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1630054406246},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1630054406247},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1630054406247},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1630054406246},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1630054406247},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1630054406248},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1630054406248},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1630054406249},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1630054406249},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1630054406249},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1630054406249},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1630054406250},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1630054406250},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1630054406250},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1630054406250},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1630054406250},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1630054406251},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1630054406251},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1630054406252},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1630054406252},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1630054406252},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1630054406253},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1630054406253},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1630054406253},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1630054406254},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1630054406254},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1630054406254},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1630054406255},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1630054406255},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1630054406255},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1630054406256},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1630054406256},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1630054406257},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1630054406257},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1630054406257},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1630054406258},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1630054406258},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1630054406258},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1630054406258},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1630054406259},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1630054406260},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1630054406261},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1630054406260},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1630054406261},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1630054406263},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1630054406263},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1630054406263},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1630054406264},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1630054406264},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1630054406264},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1630054406264},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1630054406248},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/wechat.png","hash":"e54d79e950f4de530b1efa72d4947c4f9e24e5b0","modified":1629978991078},{"_id":"source/images/blog/How.png","hash":"df745ccf2fb7ee2e44ef76f26a48ddbb8099b74d","modified":1629978990841},{"_id":"source/images/blog/NotificationBanner-3.gif","hash":"914d4a9e3bb05dd8bb40a1484ebec000182dc44a","modified":1629978990874},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1630054406282},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1630054406283},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-3.png","hash":"dae7a5bd0f4e39efc08bba8957eafd49b8d52790","modified":1629978991043},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-2.png","hash":"3b822a4588721ff2664f34097721795cc96fd4f2","modified":1629978991039},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-4.png","hash":"181a0dff40d51861c4806dfccaf7bd37f77cad26","modified":1629978991047},{"_id":"source/images/blog/wenda-helper.gif","hash":"85143ffafb196b961f0e2d2bba65993dcf9d957d","modified":1629978990995},{"_id":"source/images/blog/安利一个颜值最高的GitHub小程序/xcx-1.png","hash":"ff88b39c24386e3376bdf706d5a56a8f0c90f753","modified":1629978991026},{"_id":"source/images/blog/12306ForMac.jpg","hash":"d0c81d01c37fdd54a0c334edab47b900a67a6b68","modified":1629978990594},{"_id":"source/images/blog/DKImagePickerController-1.png","hash":"3de47d013295118a6075305bbcc24403d0f3c7c1","modified":1629978990620},{"_id":"source/images/blog/CVCalendar.gif","hash":"4fa66b62a82c437f4097f17391f3778d620ecffe","modified":1629978990613},{"_id":"source/images/blog/NotificationBanner-1.gif","hash":"2aa810f8cfd1f0e8e1e486575d7a8317c8e0cf5c","modified":1629978990850},{"_id":"source/images/zzzp_shot_1.png","hash":"1b88b89121695b29cc9fbf01db73e4defaf6f000","modified":1630026829058},{"_id":"source/images/blog/XLForm.gif","hash":"d57b954487989555b97d323ac4ba2a84a3f7692c","modified":1629978990948},{"_id":"source/images/blog/NotificationBanner-2.gif","hash":"a4ec7ae02bd69ec7df31007a7f1b29ae80c2c0de","modified":1629978990866},{"_id":"source/images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/cover.jpg","hash":"23afc804d14e94adc7fd8bd1891cdc5cebb4c20f","modified":1629978990836},{"_id":"source/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery.jpg","hash":"2a87d0b6a796733a2adfb62bd387e4fea6e111ee","modified":1629978991073},{"_id":"source/images/blog/Eureka-1.gif","hash":"e18fd17b84aa7881d761ef4f8be835de5918ce76","modified":1629978990682},{"_id":"source/images/blog/SwipeCellKit.gif","hash":"18eb4ad4d517adc0cd029c23abbac0f9fd6129c3","modified":1629978990927},{"_id":"source/images/blog/GitHubWeekly-20190913/mall-1.gif","hash":"a9bbb358efcede152cb042abf959de9586de3d31","modified":1629978990809},{"_id":"public/categories/index.html","hash":"6f32bda2a71a97d6d9fcb52deae87cf9ccb215f6","modified":1630852737712},{"_id":"public/about/index.html","hash":"e2375a61122d8e52fb4075377136b32656968c62","modified":1630852737712},{"_id":"public/tags/index.html","hash":"a87ff00c02456cb03b954427f211e3698e0fec0b","modified":1630852737712},{"_id":"public/2019/09/14/GitHubWeekly-20190921/index.html","hash":"760f3857a8a81dcb954dd090cc87aa2b6e141df3","modified":1630852737712},{"_id":"public/2015/09/25/Podfile引用第三方库设定版本/index.html","hash":"58aa2d32893b841003d788774eceb4cd33388eee","modified":1630852737712},{"_id":"public/2015/06/12/房贷个税一个都不能少/index.html","hash":"c58cc8df4e00d04cd6062fc6e957b3369653087e","modified":1630852737712},{"_id":"public/2015/04/27/iOS8下TabBarController push后控件下移闪动/index.html","hash":"c08d06a11def64bedcd435539eab6cf50203eff5","modified":1630852737712},{"_id":"public/2014/12/12/iOS汉字转拼音/index.html","hash":"f6cfdd7b9f984677c86f38a5c3ad0f54945c3bd2","modified":1630852737712},{"_id":"public/2014/12/04/UITableView多余分割线/index.html","hash":"847c14a1f48c02fa54a1e192023f6a6a832ddad3","modified":1630852737712},{"_id":"public/2014/09/05/iOS拨打电话/index.html","hash":"cf56944db795fbb76160617c6104d41cc49f80a5","modified":1630852737712},{"_id":"public/2014/09/01/Runtime在Storyboard中的应用/index.html","hash":"9882c2c76086b320d430fabb9237df023c7c5333","modified":1630852737712},{"_id":"public/2014/08/06/博客分页和阅读更多功能/index.html","hash":"fdb369cc179ac31c48bdae8f4a578ecb4e8770f9","modified":1630852737712},{"_id":"public/2014/08/04/iOS提交AppStore时描述翻译/index.html","hash":"f9d8342db0150f0bfc06dff33319c6f4cef659b2","modified":1630852737712},{"_id":"public/2014/08/03/iOS合并真机和模拟器静态库/index.html","hash":"26edb91e9af1647d9e7f555483af5c10087d7c72","modified":1630852737712},{"_id":"public/2014/08/02/hidesBottomBarWhenPushed用法/index.html","hash":"01608fb0d19077507d70b4b398aa43f3f45fd4a3","modified":1630852737712},{"_id":"public/2014/07/29/圆形头像/index.html","hash":"2d466e5e2d769ed843f7a0172d8e5e05269b58f6","modified":1630852737712},{"_id":"public/2014/07/23/NSArray对所有元素操作/index.html","hash":"e3320dc321d22a805c1bed8ca7623ecdf6c5ff78","modified":1630852737712},{"_id":"public/archives/page/6/index.html","hash":"abd4773412559e40310adc7d156421247b75a553","modified":1630852737712},{"_id":"public/archives/2014/page/2/index.html","hash":"45344b5688e924418b3bb538dbad20923212ceb8","modified":1630852737712},{"_id":"public/archives/2014/07/index.html","hash":"34ceb24e400531c543341c5008b0b8192e187961","modified":1630852737712},{"_id":"public/archives/2014/08/index.html","hash":"ac171d314f340e7e7a5676ab9299dfd7ca65296d","modified":1630852737712},{"_id":"public/archives/2014/09/index.html","hash":"748e69e4913ea6bf41c60fa3683e983b376ca461","modified":1630852737712},{"_id":"public/archives/2014/12/index.html","hash":"ddfa8e936c8ba6ddd7aab6fd0dcc28a307613a7e","modified":1630852737712},{"_id":"public/archives/2015/index.html","hash":"951dedc443b1ad3191c315799442e6ef615ffc1a","modified":1630852737712},{"_id":"public/archives/2015/04/index.html","hash":"047175ceeccbc2e2fe311c73e9bdd833cf238d67","modified":1630852737712},{"_id":"public/archives/2015/05/index.html","hash":"ee624eeb76f574c04535a0200621e4b545384ac9","modified":1630852737712},{"_id":"public/archives/2015/06/index.html","hash":"fb85e0b5c98187f2d4d8b17593e1079f3e497425","modified":1630852737712},{"_id":"public/archives/2015/08/index.html","hash":"564a7939c847c5cd846216e7499bf7761193567c","modified":1630852737712},{"_id":"public/archives/2015/09/index.html","hash":"9e6f83c32934ba2f2b7f3c79c9e1c37f56d8425e","modified":1630852737712},{"_id":"public/archives/2016/index.html","hash":"031d7cb48bf9016ec3a8395356e16d221dea4eef","modified":1630852737712},{"_id":"public/archives/2016/09/index.html","hash":"719dd822d908806a2899882d2dfb710d8c134401","modified":1630852737712},{"_id":"public/archives/2016/10/index.html","hash":"ede1582779399973c87b94affa2564c99424f095","modified":1630852737712},{"_id":"public/archives/2016/11/index.html","hash":"04943232b8b19c89d472902f1180f94098ea3e61","modified":1630852737712},{"_id":"public/archives/2016/12/index.html","hash":"c8040987f3933b13090fec4e32141590363c8b4f","modified":1630852737712},{"_id":"public/archives/2017/index.html","hash":"a6385c415a42185bbe1a0efe1a54df3ee4dbc232","modified":1630852737712},{"_id":"public/archives/2017/09/index.html","hash":"53fa8035f52f73d1bc77dd1315ba48ada6ac15d3","modified":1630852737712},{"_id":"public/archives/2017/10/index.html","hash":"8d679bd45404bb24f48487cbb3b454d0552d4c23","modified":1630852737712},{"_id":"public/archives/2017/11/index.html","hash":"38c0f1d0fe455531753cba424acc4cc868eae941","modified":1630852737712},{"_id":"public/archives/2018/index.html","hash":"b1ae6a0aa4ab8b087d2533ce71e67eaf0143e22d","modified":1630852737712},{"_id":"public/archives/2018/01/index.html","hash":"55ef5da4ff5657c81fb7dffe5f2ce8ca3ad6dd9a","modified":1630852737712},{"_id":"public/archives/2018/02/index.html","hash":"81b76fe0a39808e59c3c8e67dc64cebc2d6d349c","modified":1630852737712},{"_id":"public/archives/2018/05/index.html","hash":"813c5268fd6480f618efbf21c9bb7c69762c9b24","modified":1630852737712},{"_id":"public/archives/2019/page/2/index.html","hash":"b60bb23bbef151adf6a1a5fe8a91aec9cda71c5d","modified":1630852737712},{"_id":"public/archives/2019/01/index.html","hash":"4212d36699bd30534ca8efc01118142fdb839fa3","modified":1630852737712},{"_id":"public/archives/2019/09/index.html","hash":"141588d067c95451916283010ee90d1fe79cf66a","modified":1630852737712},{"_id":"public/categories/iOS/page/3/index.html","hash":"17442f771c00fecdfa0d7a9e52b6633051c7181a","modified":1630852737712},{"_id":"public/categories/FFmpeg/index.html","hash":"768834318e347ca6fe11a4bef349b9009bbaa8d3","modified":1630852737712},{"_id":"public/categories/Flutter/index.html","hash":"9169d2f2afde2678892a03f41092b6cccc9fdc21","modified":1630852737712},{"_id":"public/categories/Geohash系列/index.html","hash":"9951216368964ead7edae3f4670bc7fa275b690d","modified":1630852737712},{"_id":"public/categories/源码/index.html","hash":"9e3268ccf171f49584fa88d92cb5432dda843c69","modified":1630852737712},{"_id":"public/categories/杂谈/index.html","hash":"e0886bddcb3eabae255debaac3ca012acd392860","modified":1630852737712},{"_id":"public/categories/cocos2d-x/index.html","hash":"343b211282fd5845cd8162169c1e5edca818c2ae","modified":1630852737712},{"_id":"public/categories/小飞鱼/index.html","hash":"f5e97d7b0aba3c23df929073ce4c232b0372d976","modified":1630373180846},{"_id":"public/categories/疯言疯语/index.html","hash":"713d40883729b8442e3f34900fdf06bbd9bc4f90","modified":1630373180846},{"_id":"public/categories/小程序/index.html","hash":"68264f0a9db7b50caac1a524984aba9f8c6a093c","modified":1630852737712},{"_id":"public/categories/开源/index.html","hash":"aea16828817cab392a32f1d1336d730b224d2107","modified":1630852737712},{"_id":"public/tags/AppStore/index.html","hash":"2824fb3a7bdad153d1b140c2b4d305ab62d438e6","modified":1630852737712},{"_id":"public/tags/iOS8/index.html","hash":"d2edb52ad4240717219f4baeb9804f837b7e22f2","modified":1630852737712},{"_id":"public/tags/AutoLayout/index.html","hash":"e572cfc916a1f675101f55e858df445f56db8b63","modified":1630852737712},{"_id":"public/tags/Swift4/index.html","hash":"a79fa8c06ff0897e0de5bdd5672e7af7cef12bd7","modified":1630852737712},{"_id":"public/tags/CocoaPods/index.html","hash":"f483ecde826bf938a7ef6bbdd41e36294fa8fd71","modified":1630852737712},{"_id":"public/tags/FFmpeg/index.html","hash":"7c0e579a8adf93a1417ab0b391196164b735ad07","modified":1630852737712},{"_id":"public/tags/Flutter/index.html","hash":"35713e6a8644c4bd5ac36605c91c5375f62deaa5","modified":1630852737712},{"_id":"public/tags/Geohash/index.html","hash":"6133bb9cc993daea1e7c855396534c4962993fa1","modified":1630852737712},{"_id":"public/tags/Github/index.html","hash":"faacb2a651d6b0d030f530317f9f5c2e859fb455","modified":1630852737712},{"_id":"public/tags/博客/index.html","hash":"b17a2c57e1f1dd13a7c4bb758e3381199262ae83","modified":1630852737712},{"_id":"public/tags/NSArray/index.html","hash":"e80002a33eab3b58a75535147d4df24e7205e78f","modified":1630852737712},{"_id":"public/tags/Runtime/index.html","hash":"24400703e105d69a8d56372d3c7d23345d1beca4","modified":1630852737712},{"_id":"public/tags/iOS/index.html","hash":"118c87091045e5278b358057aac03514721e856e","modified":1630852737712},{"_id":"public/tags/Swift/index.html","hash":"0b2f1fe51e24a0fa4f96c7d537ec0f7d142ca95a","modified":1630852737712},{"_id":"public/tags/ScrollView/index.html","hash":"b6702ca2e96bd8430af77d93a25c9767644a0284","modified":1630852737712},{"_id":"public/tags/UITableView/index.html","hash":"22e428cc958cd315f4026a7f6b61b113a9237ca2","modified":1630852737712},{"_id":"public/tags/shell/index.html","hash":"e2357c549c5dcc3a87ed326d97a64b6fcd459e27","modified":1630852737712},{"_id":"public/tags/自动打包/index.html","hash":"f47f6c5a1a044b8acb3eda0f204509fd93581cfb","modified":1630852737712},{"_id":"public/tags/xcodebuild/index.html","hash":"7ef0705fa6d62760ec22bd0c931c77b8fdbc89ae","modified":1630852737712},{"_id":"public/tags/Jenkins/index.html","hash":"3002f0617dba7da340e476cfdcb63c2e7227005b","modified":1630852737712},{"_id":"public/tags/Xcode9/index.html","hash":"2d0d742c0994d8616e4336a2d277e662299fa6df","modified":1630852737712},{"_id":"public/tags/多Target/index.html","hash":"d3d4bd25d608e90d84c599efed7083c46805af2a","modified":1630852737712},{"_id":"public/tags/多版本/index.html","hash":"57295649a9f22bfe7cadfe01d0282d4389084456","modified":1630852737712},{"_id":"public/tags/cocos2d/index.html","hash":"99f19ca07602fa37feb67e4fb77893a82e0fa722","modified":1630852737712},{"_id":"public/tags/TabBar/index.html","hash":"d3a10008f9c100532a52ec91751b23f1dc9caf19","modified":1630852737712},{"_id":"public/tags/LazyScrollView/index.html","hash":"0ce1f198d718ab5ff7ef9e7067ea8cebfd9951c7","modified":1630852737712},{"_id":"public/tags/高性能/index.html","hash":"d816257c1fc69729a0169cdd99e0d51734e92157","modified":1630852737712},{"_id":"public/tags/iOS10/index.html","hash":"9d706c7c7040675dd899e25c8e6aadec02288f25","modified":1630852737712},{"_id":"public/tags/iOS随笔/index.html","hash":"6cf525592e6e478338c63caef8efa9e5751e4ccf","modified":1630373180846},{"_id":"public/tags/Log/index.html","hash":"301b1b41ebc642d319d55cd29c7cb96f06896e97","modified":1630852737712},{"_id":"public/tags/音量/index.html","hash":"5f66867423f6cef09f86de27605bc1615212f279","modified":1630852737712},{"_id":"public/tags/MPVolumeView/index.html","hash":"73f8037a644cc1521aa1c4ea6fcc55d334511eb8","modified":1630852737712},{"_id":"public/tags/单例/index.html","hash":"5a15b1a05e2929e381b1f1f3ee441b0e70f9e6bc","modified":1630852737712},{"_id":"public/tags/静态库/index.html","hash":"bf70d8dd2bd97249d75d8ae4bd7151751c06229b","modified":1630852737712},{"_id":"public/tags/UDID/index.html","hash":"516d9d766abf421ff4b7fe9bfa30e852a26b40e5","modified":1630852737712},{"_id":"public/tags/唯一标志/index.html","hash":"f2cca866c1b334acf14801c14453fe59fe501320","modified":1630852737712},{"_id":"public/tags/电话/index.html","hash":"2e582217d656d07d58129182806a5321f14cd874","modified":1630852737712},{"_id":"public/tags/打电话/index.html","hash":"c8698d8025fee6ba570644dce484f599c1b7b4bc","modified":1630852737712},{"_id":"public/tags/蓝牙/index.html","hash":"76dc13fdfc09f2cd8d115e55c806944a8e0ba0c7","modified":1630852737712},{"_id":"public/tags/PBAP/index.html","hash":"a4528b41a9b7c893f75ee9f4572cf7188ed18f04","modified":1630852737712},{"_id":"public/tags/翻译/index.html","hash":"cba8b90b8c1f5949c43365c474629b6b6648ab53","modified":1630852737712},{"_id":"public/tags/拼音/index.html","hash":"1a9201b253fc057ef6b4dcbfe79246b979b5c346","modified":1630852737712},{"_id":"public/tags/Git/index.html","hash":"7873a696b21e9d9e32ce25a0fd684b119310a4d6","modified":1630852737712},{"_id":"public/tags/疯言疯语/index.html","hash":"377d7b8273e4366e564b507133daaa81c10d3151","modified":1630852737712},{"_id":"public/tags/面试/index.html","hash":"44c1e67343080e0c28877ea2d2886861166d484c","modified":1630852737712},{"_id":"public/tags/小程序/index.html","hash":"45e4fe03d3d4721e6ea4c6909af5cb37ffebf674","modified":1630852737712},{"_id":"public/tags/LeanCloud/index.html","hash":"9be8f77a4f0ac37cf79dfce33f2408c2ec6925d5","modified":1630852737712},{"_id":"public/tags/公众号/index.html","hash":"a8dd461c18cc07a5b538d88de8f2eeb5d2b61562","modified":1630852737712},{"_id":"public/tags/定位/index.html","hash":"e1b1433b8e7795f8b3cc77301abca214b8c0d98e","modified":1630852737712},{"_id":"public/tags/圆形头像/index.html","hash":"5b21876f891c11eb561d83feb80bee2a3025288f","modified":1630852737712},{"_id":"public/tags/赞赏/index.html","hash":"7b8b2f9aabe432383ecb5182939e353be6dac327","modified":1630852737712},{"_id":"public/tags/小程序-Canvas/index.html","hash":"dcb06ad9c6f0825939dedbdcdb9f09f7f56c1a1f","modified":1630373180846},{"_id":"public/tags/小飞鱼/index.html","hash":"c530d3d3ba320b0bf626829a1a5a0a44755e3b9c","modified":1630852737712},{"_id":"public/tags/开源协议/index.html","hash":"11079d68120e8b41b0831d194c36d2d1e93fe2f5","modified":1630852737712},{"_id":"public/tags/编译/index.html","hash":"4389dc3a0b59482ef708b10206b22eb4df86662d","modified":1630852737712},{"_id":"public/tags/古诗/index.html","hash":"96b652cfc609ec912ceea1d17c9da49a3afc0f11","modified":1630852737712},{"_id":"public/2019/09/21/安利一个颜值最高的GitHub小程序/index.html","hash":"090fd1e75ec70faf9583bfccfb7551ebde6c79a8","modified":1630852737712},{"_id":"public/2019/09/20/生活不止眼前的苟且还有诗和远方的田野/index.html","hash":"50fe810f0a8a640853667021e10b2600ffe87e93","modified":1630852737712},{"_id":"public/2019/09/18/GitHub标星14k+，这个项目既能学Python又能抢票/index.html","hash":"096c3707f96e3b1e74fcf2d10278f586fedd29fb","modified":1630852737712},{"_id":"public/2019/09/13/GitHub-Weekly-20190913/index.html","hash":"107de277f8acdce1334fd60ed3d0ff506177e5f4","modified":1630852737712},{"_id":"public/2019/01/30/利用Xcode修改iPhone定位/index.html","hash":"65f0a30cdcb561e838cd73b10250ba7120680382","modified":1630852737712},{"_id":"public/2019/01/30/两个Bug引发的阴谋论/index.html","hash":"f3536b93b682cc6a9a5c4caa7180cf9c1ec69e64","modified":1630852737712},{"_id":"public/2019/01/26/使用LeanCloud快速开发一款小程序/index.html","hash":"4242b99a5e0372836ea12497644fffb5c764770d","modified":1630852737712},{"_id":"public/2019/01/26/在小程序中集成赞赏/index.html","hash":"1c7c242786f831ad0f539a1b5392c1d98086bfc6","modified":1630852737712},{"_id":"public/2019/01/26/从两道面试题说起/index.html","hash":"00c42387d66f453cb4d8266df69d1e871b307973","modified":1630852737712},{"_id":"public/2019/01/26/Flutter初体验/index.html","hash":"54940a27055124856f76f491660b814eba95855c","modified":1630852737712},{"_id":"public/2018/05/14/小程序利用Canvas绘制图片和竖排文字/index.html","hash":"f39511fa997140eb8c849660483691671c35ad3a","modified":1630852737712},{"_id":"public/2018/02/07/公众号推荐/index.html","hash":"da55be51dec2929e40f61b96ff0a2373a504ab58","modified":1630852737712},{"_id":"public/2018/02/06/Swift关于解包的Tip/index.html","hash":"c3b6ecbe5c925a25395856368e7d490de398c17e","modified":1630852737712},{"_id":"public/2018/01/27/Github源码索引/index.html","hash":"437f5e1c8c184c927ed433a8abf297d6e1994545","modified":1630852737712},{"_id":"public/2018/01/27/Github源码推荐(1.22-1.28)/index.html","hash":"c3670c97cc4ed2b45de8cb4beeb20eb8d104cf6e","modified":1630852737712},{"_id":"public/2018/01/21/Github源码推荐(1.15~1.21)/index.html","hash":"dbd89f7e9380ef72afc8018b0c3859c24ceb57e7","modified":1630852737712},{"_id":"public/2018/01/14/Github源码推荐(1.8~1.14)/index.html","hash":"d8d6d5e05f2adc8307557689955ffc460f7b14e4","modified":1630852737712},{"_id":"public/2017/11/24/CocoaPods设置target支持的swift版本/index.html","hash":"09c9a83d1da2ea8e48e16f572f81ab2c2cb5e1b8","modified":1630852737712},{"_id":"public/2017/11/09/Xcode9下自动化编译错误/index.html","hash":"1d5c6f1256d7bbf4861162ca44bcb4f3734afdea","modified":1630852737712},{"_id":"public/2017/10/21/Swift4.0引用3.0第三方库/index.html","hash":"ce460340314d017fea0c2a6c63cccb0c5fd08c5e","modified":1630852737712},{"_id":"public/2017/09/30/iOS下更改系统音量/index.html","hash":"bde3bcc06098cd0aaa6c3749d541d315e65cb7fa","modified":1630852737712},{"_id":"public/2017/09/28/iOS拨打电话对话框问题解决/index.html","hash":"cdc354616fcacc4fb94b23e30ec207ebc9b9918b","modified":1630852737712},{"_id":"public/2017/09/27/小飞鱼项目有感/index.html","hash":"8c296126087c68f3b1cd76017d7eabb55994ca24","modified":1630852737712},{"_id":"public/2017/09/24/iOS下日志记录/index.html","hash":"391400a91d6d5fb73fdf8b01cf9c5351bef8c032","modified":1630852737712},{"_id":"public/2016/12/30/开源协议知多少/index.html","hash":"76c58b67cc9f57b7fd7a7bc8a71174bffd7df8ba","modified":1630852737712},{"_id":"public/2016/12/08/iOS-高性能异构滚动视图-LazyScrollView实现/index.html","hash":"a939ddbec80b60c440e2e67a82aada1596a1c63f","modified":1630852737712},{"_id":"public/2016/11/01/iOS创建单例/index.html","hash":"c6761711ee327c8c83edbd788b9bdb91b409a68f","modified":1630852737712},{"_id":"public/2016/11/01/iOS10下使用AutoLayout动画失效解决/index.html","hash":"38cbdba761b4fbf503f87b5066424de293e760da","modified":1630852737712},{"_id":"public/2016/10/01/Xcode多Target设置/index.html","hash":"c501dd79c59e7694a34771fb6b031a1c9dc65c32","modified":1630852737712},{"_id":"public/2016/09/30/FFmpeg解码流程/index.html","hash":"e64523d085bc8d35379e86a3e14e9aa2f0e8105a","modified":1630852737712},{"_id":"public/2016/09/26/FFmpeg iOS库编译与集成/index.html","hash":"c321cc6d2e866e30812296433ba091d930c56f73","modified":1630852737712},{"_id":"public/2015/08/27/GeoHash系列 —— 二、算法步骤/index.html","hash":"2b2fecbec3e1b33ca4ba688ca6a0a0e6f57f2429","modified":1630852737712},{"_id":"public/2015/08/26/GeoHash系列 —— 一、基本介绍/index.html","hash":"55db634a20e2db574addf32d1aa0e1abc7493952","modified":1630852737712},{"_id":"public/2015/08/21/UIScrollView点击StatusBar返回顶部失效的解决/index.html","hash":"228ed906b6b64cd3aef988825563a3dfa7b73eb2","modified":1630852737712},{"_id":"public/2015/05/19/App内打开AppStore/index.html","hash":"c2536326854dd0b2477e3132049f41efc5ab9547","modified":1630852737712},{"_id":"public/2014/08/11/XCode自动打包ipa脚本/index.html","hash":"e63491cd2e532643e5c11c0a676b9c6813e2d9a1","modified":1630852737712},{"_id":"public/2014/08/08/cocos2d v3.x mac 安装/index.html","hash":"b09eece1da182c625486b8ba074d78de08bfb041","modified":1630852737712},{"_id":"public/2014/08/04/iOS配置gitignore文件/index.html","hash":"7c69015f2c0cfba487ae9b0722e70cb9e9ebd39a","modified":1630852737712},{"_id":"public/2014/08/01/GitHub博客访问超慢解决/index.html","hash":"b576388c7956c34e24bc7a67f8853e05a6a51390","modified":1630852737712},{"_id":"public/2014/07/27/引入三方库编译错误解决/index.html","hash":"02f807c690fc24ba4f72efba07573f7792fb1061","modified":1630852737712},{"_id":"public/2014/07/20/AutoLayout的使用/index.html","hash":"5c2b62a31ee54d4338dcc42861d10713ecbb9271","modified":1630852737712},{"_id":"public/2014/07/19/iOS唯一标志/index.html","hash":"273589cd7c9222a66adcb2a5d4b1e00e2e86873f","modified":1630852737712},{"_id":"public/2014/07/19/安家GitHub/index.html","hash":"75d57e57766560afc96aec8e57495f63323b4787","modified":1630852737712},{"_id":"public/archives/index.html","hash":"e1f78f23503a378a72e3abd7b375515db90fc176","modified":1630852737712},{"_id":"public/archives/page/2/index.html","hash":"85dd4b5288e7ad822d52c1b324bda5347028e809","modified":1630852737712},{"_id":"public/archives/page/3/index.html","hash":"b63ec844f20de15a75a95514b706da3f015dad08","modified":1630852737712},{"_id":"public/archives/page/4/index.html","hash":"ef38e9b23066ef4c39953267adbde2222e54517a","modified":1630852737712},{"_id":"public/archives/page/5/index.html","hash":"f41ff26357d04d29ce5bd4811055003aa64aa97e","modified":1630852737712},{"_id":"public/archives/2014/index.html","hash":"8cb00c05e9fb38cc06d5743976db7c065e0285a4","modified":1630852737712},{"_id":"public/archives/2019/index.html","hash":"9fe4caca6eb317eea663f219318274ed0d28f0c5","modified":1630852737712},{"_id":"public/categories/iOS/index.html","hash":"721b0b2186262431fbb70b8132c94eb2dbf6c7d7","modified":1630852737712},{"_id":"public/categories/iOS/page/2/index.html","hash":"bed1a277fa5ded3ba62cc0eb0b992eef43cd461f","modified":1630852737712},{"_id":"public/index.html","hash":"a8c132519cdb733c6febafe704e7e89453a7794d","modified":1630852898811},{"_id":"public/page/2/index.html","hash":"d8ddfa067bfe87849526e7915d74ade075e362a1","modified":1630852737712},{"_id":"public/page/3/index.html","hash":"fc53e1e1984521e39aee260990996cb8a322333a","modified":1630852737712},{"_id":"public/page/4/index.html","hash":"4a96ad6dc74d513f3197031afd77f1a8f1b81204","modified":1630852737712},{"_id":"public/page/5/index.html","hash":"ba76932c24b61f11b4ae5d2071fc01d3e9fefdd2","modified":1630852737712},{"_id":"public/page/6/index.html","hash":"a2a1e1a6d98ba05d83012b98ee7c74d49d197e19","modified":1630852737712},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1630159418221},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1630159418221},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1630159418221},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1630159418221},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1630159418221},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1630159418221},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1630159418221},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1630159418221},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1630159418221},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1630159418221},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1630159418221},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1630159418221},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1630159418221},{"_id":"public/images/favicon.png","hash":"0d6a85250d6ab473b790133bbc76462749ec9306","modified":1630056084453},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1630159418221},{"_id":"public/images/blog/2015-04-27-16-00.png","hash":"c7d78192d1bc3452c0f5f97ce0a8647cfb8af462","modified":1630056084453},{"_id":"public/images/blog/circle_head.png","hash":"ee77e8656d9cdbd2df127ed1a7d3fdf945a4dcb6","modified":1630056084453},{"_id":"public/images/blog/geohash_1.jpg","hash":"d3295308232618283b5dec680cc32eb22b768e30","modified":1630056084453},{"_id":"public/images/blog/geohash_2.jpg","hash":"d3295308232618283b5dec680cc32eb22b768e30","modified":1630056084453},{"_id":"public/images/blog/geohash_4.jpg","hash":"8f23c9e9adfdc9dee442567568a1329ae53329c2","modified":1630056084453},{"_id":"public/images/blog/geohash_3.jpg","hash":"59ce311ca66dbfa609e6fcb5d1bfefe7caa495ec","modified":1630056084453},{"_id":"public/images/blog/me.jpeg","hash":"7c08ab6ce516f6426a644c5fde542739c4133827","modified":1630056084453},{"_id":"public/images/blog/geohash_5.jpg","hash":"d39ed62a7ad83b7eedaf26ecd541d662c019baf4","modified":1630056084453},{"_id":"public/images/blog/page_after.png","hash":"2772593cc3fc205f46a404a480e388e9e1918fc1","modified":1630056084453},{"_id":"public/images/blog/page_before.png","hash":"5b19e8d96866c6e117053a7804a06b109accbe09","modified":1630056084453},{"_id":"public/images/blog/runtime_storyboard_1.png","hash":"a8dc214f28aedb5137f50166927a53ecece13ae7","modified":1630056084453},{"_id":"public/images/blog/scrollview_autolayout_2.png","hash":"0d15f93893d551c068973721c35fd6d6e62e8aab","modified":1630056084453},{"_id":"public/images/blog/runtime_storyboard_2.png","hash":"4942de1e493c9812aabecfd9d5672ef19953c5fe","modified":1630056084453},{"_id":"public/images/blog/scrollview_autolayout_4.png","hash":"e38dd0faa45f6c3cc0f44fa031178436ae885fea","modified":1630056084453},{"_id":"public/images/blog/sgs_qrcode.jpg","hash":"bf4b8746708d1aa785f3d5d9b6ec29f724b27ef4","modified":1630056084453},{"_id":"public/images/blog/GitHubWeekly-20190913/bnd-1.png","hash":"c1b30c4d771fee645d68c4f06e8ffd01aa346b6a","modified":1630056084453},{"_id":"public/images/blog/GitHubWeekly-20190913/bnd-2.png","hash":"56f64c2504c300dd071b3283c19391ffee6e18b9","modified":1630056084453},{"_id":"public/images/blog/GitHubWeekly-20190913/bnd-3.png","hash":"735e5e424a74e34847dded53e21bbc1be7348c1e","modified":1630056084453},{"_id":"public/images/blog/GitHubWeekly-20190913/bnd-4.png","hash":"ff1076cc2d2634e0c36e80d4d770fe58aac288cd","modified":1630056084453},{"_id":"public/images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/12306-1.png","hash":"8d2ac81cc02009cbe6833915cb68a65e1ce8fbbb","modified":1630056084453},{"_id":"public/images/blog/两个Bug引发的阴谋论/image_1.webp","hash":"6a755c4b58a892b73952ac638785bcc5ee02da9e","modified":1630056084453},{"_id":"public/images/blog/两个Bug引发的阴谋论/image_2.webp","hash":"323a8ba951c06bf22f319236b38d20fbb4c10ea8","modified":1630056084453},{"_id":"public/images/blog/两个Bug引发的阴谋论/image_3.webp","hash":"03966a9c251c9e55cb51bf14d4591642cd095402","modified":1630056084453},{"_id":"public/images/blog/两个Bug引发的阴谋论/cover.webp","hash":"8976c71a53a823f18e884e066a251c2e2f5d70fe","modified":1630056084453},{"_id":"public/images/blog/安利一个颜值最高的GitHub小程序/xcx-5.png","hash":"1f47057f0c8e9959fbd34b626b8c2c70d1d7ee60","modified":1630056084453},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1630056084453},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1630159418221},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1630159418221},{"_id":"public/images/ali_pay.jpg","hash":"643a08d9d1207b7538f80791a75d0f5f1d592c46","modified":1630159393622},{"_id":"public/images/weixin_qrcode.jpg","hash":"187bc797f0c6b359e70251fa87f7a52813ca0199","modified":1630056084453},{"_id":"public/images/weixin_pay.jpg","hash":"4dcf2417e66175efefb0830069885e4b68887449","modified":1630159393622},{"_id":"public/images/weixin_qrcode.png","hash":"bfc65f9b83e1e18fad3d2e36fc1548c064cc3979","modified":1630056084453},{"_id":"public/images/blog/JTCalendar-2.png","hash":"23627bdedcadfddcc0b60022d62cf92ff925c6d8","modified":1630056084453},{"_id":"public/images/blog/JTCalendar.gif","hash":"d784c7a0031fa3f12a1294108fce1d32b84182a1","modified":1630056084453},{"_id":"public/images/blog/scrollview_autolayout_1.png","hash":"3b82081055787f30ce7e434a49a93812645a34c7","modified":1630056084453},{"_id":"public/images/blog/scrollview_autolayout_3.png","hash":"83c51a5491a3d38b8b1d057c7e25a12a6dafba8b","modified":1630056084453},{"_id":"public/images/blog/sgs.jpeg","hash":"c8cd083e320ccc3d86f1ef9fefd32c8f8ad4286b","modified":1630056084453},{"_id":"public/images/blog/利用Xcode修改iPhone定位/image-2.png","hash":"dffeff01fbd72cf7b339ab5335b0a47ba30234ff","modified":1630056084453},{"_id":"public/images/blog/利用Xcode修改iPhone定位/image-4.png","hash":"72d59e23f3ac620b184b0bd1ca62f55e665c1f94","modified":1630056084453},{"_id":"public/images/blog/安利一个颜值最高的GitHub小程序/cover.jpg","hash":"65bf906f067e22a4156ccf60f348c44dda38bae9","modified":1630056084453},{"_id":"public/images/blog/安利一个颜值最高的GitHub小程序/xcx-3.png","hash":"f405b425c94296ee38e47330473dfcd660529c1d","modified":1630056084453},{"_id":"public/images/blog/安利一个颜值最高的GitHub小程序/xcx-4.png","hash":"8d3da0acd920ee7b09c8022066026932d1637ec4","modified":1630056084453},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1630056084453},{"_id":"public/images/blog/2015-05-04-14-00.jpg","hash":"d361aae74ffce2b71805632da4c1f3a5bb22b18a","modified":1630056084453},{"_id":"public/images/blog/GitHubWeekly-20190913/cover.jpg","hash":"6868df39b65e6fa16b25de15addf8e299be34d7f","modified":1630056084453},{"_id":"public/images/blog/GitHubWeekly-20190913/lookin-1.jpg","hash":"9ae26da4324904d9406e64c687ea1f766f1a61ef","modified":1630056084453},{"_id":"public/images/blog/利用Xcode修改iPhone定位/cover.jpg","hash":"dd0fae9f7fffdd546db265202c21f4938ac24c0f","modified":1630056084453},{"_id":"public/images/blog/利用Xcode修改iPhone定位/image-3.png","hash":"1f96aadd7f41b1ccbb788ee157736c763cb26c7c","modified":1630056084453},{"_id":"public/images/blog/安利一个颜值最高的GitHub小程序/xcx-2.png","hash":"cdd07735336bddc36e33454758b9b725022472dc","modified":1630056084453},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1630056084453},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1630159418221},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1630159418221},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1630159418221},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1630159418221},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1630159418221},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1630159418221},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1630159418221},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1630159418221},{"_id":"public/css/main.css","hash":"e6bd14db3b78f07437b8d2d0b08f40a759fd061a","modified":1630159418221},{"_id":"public/images/blog/calculate_app_qrcode.png","hash":"31150f82732ef75f5582beae5393285415069e64","modified":1630056084453},{"_id":"public/images/blog/利用Xcode修改iPhone定位/image-1.png","hash":"bcd3527af0ed5aab67b0ceb130fa4f4f3c1c6fcc","modified":1630056084453},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1630159418221},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1630159418221},{"_id":"public/images/history.jpg","hash":"15e9efdcf071782a808916322001564482e768f6","modified":1630056084453},{"_id":"public/images/blog/DKImagePickerController-2.png","hash":"8674525a558abc2fe6326d00babe9b5ce14a2970","modified":1630056084453},{"_id":"public/images/blog/Feature.png","hash":"b22ee41a0561f0512522ff61c5f2498774c7628e","modified":1630056084453},{"_id":"public/images/blog/生活不止眼前的苟且还有诗和远方的田野/wechat.png","hash":"e54d79e950f4de530b1efa72d4947c4f9e24e5b0","modified":1630056084453},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1630159418221},{"_id":"public/images/blog/How.png","hash":"df745ccf2fb7ee2e44ef76f26a48ddbb8099b74d","modified":1630056084453},{"_id":"public/images/blog/NotificationBanner-3.gif","hash":"914d4a9e3bb05dd8bb40a1484ebec000182dc44a","modified":1630056084453},{"_id":"public/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-3.png","hash":"dae7a5bd0f4e39efc08bba8957eafd49b8d52790","modified":1630056084453},{"_id":"public/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-4.png","hash":"181a0dff40d51861c4806dfccaf7bd37f77cad26","modified":1630056084453},{"_id":"public/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-2.png","hash":"3b822a4588721ff2664f34097721795cc96fd4f2","modified":1630056084453},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1630159418221},{"_id":"public/images/blog/wenda-helper.gif","hash":"85143ffafb196b961f0e2d2bba65993dcf9d957d","modified":1630056084453},{"_id":"public/images/blog/安利一个颜值最高的GitHub小程序/xcx-1.png","hash":"ff88b39c24386e3376bdf706d5a56a8f0c90f753","modified":1630056084453},{"_id":"public/images/blog/12306ForMac.jpg","hash":"d0c81d01c37fdd54a0c334edab47b900a67a6b68","modified":1630056084453},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1630056084453},{"_id":"public/images/blog/DKImagePickerController-1.png","hash":"3de47d013295118a6075305bbcc24403d0f3c7c1","modified":1630056084453},{"_id":"public/images/blog/CVCalendar.gif","hash":"4fa66b62a82c437f4097f17391f3778d620ecffe","modified":1630056084453},{"_id":"public/images/blog/NotificationBanner-1.gif","hash":"2aa810f8cfd1f0e8e1e486575d7a8317c8e0cf5c","modified":1630056084453},{"_id":"public/images/zzzp_shot_1.png","hash":"1b88b89121695b29cc9fbf01db73e4defaf6f000","modified":1630056084453},{"_id":"public/images/blog/XLForm.gif","hash":"d57b954487989555b97d323ac4ba2a84a3f7692c","modified":1630056084453},{"_id":"public/images/blog/NotificationBanner-2.gif","hash":"a4ec7ae02bd69ec7df31007a7f1b29ae80c2c0de","modified":1630056084453},{"_id":"public/images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/cover.jpg","hash":"23afc804d14e94adc7fd8bd1891cdc5cebb4c20f","modified":1630056084453},{"_id":"public/images/blog/生活不止眼前的苟且还有诗和远方的田野/potery.jpg","hash":"2a87d0b6a796733a2adfb62bd387e4fea6e111ee","modified":1630056084453},{"_id":"public/images/blog/Eureka-1.gif","hash":"e18fd17b84aa7881d761ef4f8be835de5918ce76","modified":1630056084453},{"_id":"public/images/blog/SwipeCellKit.gif","hash":"18eb4ad4d517adc0cd029c23abbac0f9fd6129c3","modified":1630056084453},{"_id":"public/images/blog/GitHubWeekly-20190913/mall-1.gif","hash":"a9bbb358efcede152cb042abf959de9586de3d31","modified":1630056084453},{"_id":"source/_posts/Tinker集成踩坑指北.md","hash":"a99e9b9f2449e891100435d85cbbdca0631eafec","modified":1630155961979},{"_id":"public/2021/08/27/Tinker集成踩坑指北/index.html","hash":"1d5f00fce971cada0a76537538a244191eb47c1d","modified":1630060365451},{"_id":"public/archives/2021/index.html","hash":"a7931da3527ab7d4f4e5f87212b2f82c4d1bf885","modified":1630852737712},{"_id":"public/archives/2021/08/index.html","hash":"e6266599895d7a2b3757322114e5f3cb1c3a294b","modified":1630852737712},{"_id":"public/categories/Android/index.html","hash":"6441735f8438d35f1591781884e2ceba19d3b5c8","modified":1630852737712},{"_id":"public/tags/Android/index.html","hash":"d6ec1b667c7aba9e5614afbcedf9ab6a348776eb","modified":1630059144062},{"_id":"source/_posts/猿创日记-21-08-22.md","hash":"bcc9ea6fca20f56f7f3d7ee9f81ac5827a58f0d2","modified":1630155961980},{"_id":"source/images/blog/猿创日记/210822/蚂蚁金服.jpg","hash":"a53a32d7682271d72529f869dcdbece7f833ff00","modified":1630059015025},{"_id":"public/2021/08/27/猿创日记-21-08-22/index.html","hash":"ee88e679346356b3e98222093048cee4b253b679","modified":1630060365451},{"_id":"public/images/blog/猿创日记/210822/蚂蚁金服.jpg","hash":"a53a32d7682271d72529f869dcdbece7f833ff00","modified":1630059144062},{"_id":"source/_posts/一次解决依赖库冲突的历程.md","hash":"1e29d91f5a4cfa8366b76d67ffed1265d83c351a","modified":1630852607648},{"_id":"source/images/blog/猿创日记/210826/朝霞.jpg","hash":"860068cd34940351ae6d58e6d8530edb183d4c2a","modified":1630059405232},{"_id":"public/tags/Tinker/index.html","hash":"48156ff52cb715d68ee0b763497dc38d254427c4","modified":1630852737712},{"_id":"public/2021/08/27/一次解决依赖库冲突的历程/index.html","hash":"3ab66c8d48e7ee61aac1bf5091ba4ca3c6f5a2b4","modified":1630060365451},{"_id":"public/images/blog/猿创日记/210826/朝霞.jpg","hash":"860068cd34940351ae6d58e6d8530edb183d4c2a","modified":1630059466597},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630059743765},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1630059743751},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1630059743753},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1630059743751},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1630059743751},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1630059743753},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1630059743753},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1630059743754},{"_id":"themes/yilia/_config.yml","hash":"575ea21089ea309ab4d0feb5dbc11b3c007a4abd","modified":1630060299905},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1630059743769},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1630059743802},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1630059743755},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1630059743755},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1630059743755},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1630059743756},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1630059743756},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1630059743756},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1630059743756},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1630059743766},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1630059743767},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1630059743767},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1630059743767},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1630059743767},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1630059743768},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1630059743768},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1630059743800},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1630059743802},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1630059743770},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1630059743794},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1630059743757},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1630059743757},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1630059743758},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1630059743758},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1630059743759},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1630059743759},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1630059743759},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1630059743759},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1630059743760},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1630059743760},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1630059743760},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1630059743761},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1630059743761},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1630059743761},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1630059743766},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1630059743766},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1630059743795},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630059743796},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1630059743798},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630059743798},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630059743798},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630059743799},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1630059743799},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1630059743799},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630059743800},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1630059743770},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1630059743770},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1630059743771},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1630059743771},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1630059743772},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1630059743772},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1630059743772},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1630059743773},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1630059743773},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1630059743778},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1630059743782},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1630059743782},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1630059743783},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1630059743784},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1630059743785},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1630059743785},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1630059743785},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1630059743786},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1630059743786},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1630059743786},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1630059743786},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1630059743787},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1630059743787},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1630059743787},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1630059743788},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1630059743788},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1630059743788},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1630059743789},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1630059743789},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1630059743790},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1630059743790},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1630059743790},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1630059743791},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1630059743791},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1630059743792},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1630059743792},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1630059743792},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1630059743793},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1630059743793},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1630059743762},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1630059743762},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1630059743762},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1630059743762},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1630059743763},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1630059743763},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1630059743763},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1630059743764},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1630059743764},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1630059743764},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1630059743774},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1630059743774},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1630059743776},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1630059743777},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1630059743777},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630059743780},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1630059743781},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630059743782},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630059743782},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1630059743784},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630059743784},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630059743785},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1630059743801},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1630059743802},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1630059743765},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1630060039132},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630060039132},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1630060039132},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630060039132},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630060039132},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630060039132},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1630060039132},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1630060039132},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630060039132},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1630060039132},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1630060039132},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1630060039132},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1630060039132},{"_id":"public/content.json","hash":"8680766b8e474effbedc7f15e54246b93e4aca66","modified":1630852898811},{"_id":"themes/next/git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1630054406186},{"_id":"themes/next/git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1630054406182},{"_id":"themes/next/git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1630054398512},{"_id":"themes/next/git/index","hash":"e9214e335a234a667b07b8dc8d92f069973bd7c3","modified":1630055668341},{"_id":"themes/next/git/packed-refs","hash":"d32f01fe00ee1fc1523e89ac7d21953e8b8c6293","modified":1630054406179},{"_id":"themes/next/git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1630054398513},{"_id":"themes/next/git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1630054398516},{"_id":"themes/next/git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1630054398514},{"_id":"themes/next/git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1630054398517},{"_id":"themes/next/git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1630054398518},{"_id":"themes/next/git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1630054398519},{"_id":"themes/next/git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1630054398516},{"_id":"themes/next/git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1630054398520},{"_id":"themes/next/git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1630054398523},{"_id":"themes/next/git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1630054398521},{"_id":"themes/next/git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1630054398524},{"_id":"themes/next/git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1630054398522},{"_id":"themes/next/git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1630054398525},{"_id":"themes/next/git/logs/HEAD","hash":"e39dc749b1508dbfbda32b4c039b99ddf67daf4d","modified":1630054406184},{"_id":"themes/next/git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1630054398525},{"_id":"themes/next/git/refs/heads/master","hash":"1f55c26e44a15c914143917709c7008edfd94073","modified":1630054406184},{"_id":"themes/next/git/logs/refs/heads/master","hash":"e39dc749b1508dbfbda32b4c039b99ddf67daf4d","modified":1630054406185},{"_id":"themes/next/git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1630054406182},{"_id":"themes/next/git/logs/refs/remotes/origin/HEAD","hash":"e39dc749b1508dbfbda32b4c039b99ddf67daf4d","modified":1630054406181},{"_id":"themes/next/git/objects/pack/pack-57afc9b3a92a6fcdeaaf69079f1d6854bff1ff71.idx","hash":"3ad4ea25ae6cabac3d3c2ba05c0f43c7796ba674","modified":1630054406151},{"_id":"themes/next/git/objects/pack/pack-57afc9b3a92a6fcdeaaf69079f1d6854bff1ff71.pack","hash":"ef9decd07fd5227ade09044954bbdd1afaaf2246","modified":1630054406146},{"_id":"source/images/weixin_blog.jpg","hash":"5c697edf8e1deadb800cfab9b4344f9eaa2285c9","modified":1630155961982},{"_id":"public/2021/08/26/一次解决依赖库冲突的历程/index.html","hash":"7bc85457a12f8fc7a97f7c125ba8f440550c5bcf","modified":1630852737712},{"_id":"public/2021/08/22/猿创日记-21-08-22/index.html","hash":"c25bed0990019c05becc110b69164463d77cd68a","modified":1630159418221},{"_id":"public/2021/08/24/Tinker集成踩坑指北/index.html","hash":"6a9c088d6249ea7e81f05b96732e95bcd49c2e0b","modified":1630852737712},{"_id":"public/live2dw/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1630159393622},{"_id":"public/live2dw/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1630159393622},{"_id":"public/live2dw/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1630159393622},{"_id":"public/images/weixin_blog.jpg","hash":"5c697edf8e1deadb800cfab9b4344f9eaa2285c9","modified":1630159393622},{"_id":"public/live2dw/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1630159393622},{"_id":"public/live2dw/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1630159393622},{"_id":"themes/next/source/images/favicon.png","hash":"0d6a85250d6ab473b790133bbc76462749ec9306","modified":1629978992000},{"_id":"themes/next/source/images/ali_pay.jpg","hash":"643a08d9d1207b7538f80791a75d0f5f1d592c46","modified":1630130436000},{"_id":"themes/next/source/images/weixin_pay.jpg","hash":"4dcf2417e66175efefb0830069885e4b68887449","modified":1630130436000},{"_id":"themes/next/source/images/weixin_blog.jpg","hash":"5c697edf8e1deadb800cfab9b4344f9eaa2285c9","modified":1630130712000},{"_id":"themes/next/source/images/history.jpg","hash":"15e9efdcf071782a808916322001564482e768f6","modified":1629978992000},{"_id":"source/images/blog/猿创日记/210826的副本/朝霞.jpg","hash":"860068cd34940351ae6d58e6d8530edb183d4c2a","modified":1630071282963},{"_id":"source/images/blog/猿创日记/210828/朝霞.jpg","hash":"860068cd34940351ae6d58e6d8530edb183d4c2a","modified":1630071282963},{"_id":"source/.DS_Store","hash":"776e70551216a37e072f1dfd04523f93c6afcbd9","modified":1630852282757},{"_id":"source/_posts/支付宝里的钱要取出来吗.md","hash":"e382c633ce92002a386037fd8d5043f3ba381b3b","modified":1630373149230},{"_id":"source/_posts/杭州共同富裕新示范.md","hash":"1a5854448b33469ceb0e4c88e11124a6a79a9780","modified":1630373149231},{"_id":"source/images/blog/猿创日记/210828/.DS_Store","hash":"d80ad58cdb85802fea00580777ce64b4ad01b75b","modified":1630160565858},{"_id":"source/images/blog/猿创日记/210828/热搜.png","hash":"43255ce7a790c4b1b63033daa3b5ecbb4136695e","modified":1630157921539},{"_id":"source/images/blog/猿创日记/210828/花.jpg","hash":"d9906481b697701b956c8b22b94c991c8673bbae","modified":1630155596193},{"_id":"public/2021/08/28/支付宝里的钱要取出来吗/index.html","hash":"ce3a6e0465d3c48c5b0eca804b24fb002a50e546","modified":1630852737712},{"_id":"public/2021/08/22/杭州共同富裕新示范/index.html","hash":"f4b81dfc19cb11b47f746d22d5f2076a15a8e9a1","modified":1630852737712},{"_id":"public/archives/page/7/index.html","hash":"52bf4bcc3f4615f1bb3e6a2b495869b61886bead","modified":1630852737712},{"_id":"public/categories/日记/index.html","hash":"ffb3bb8db342dca827eb272b47f78e1881db6cef","modified":1630852737712},{"_id":"public/page/7/index.html","hash":"eaeabc26eafd90e1a7c662c30ed7225566f5eab7","modified":1630852737712},{"_id":"public/tags/日记/index.html","hash":"e2e96f38b6b5b32021466aa3f3b5bc4b82655628","modified":1630852737712},{"_id":"public/tags/吃瓜/index.html","hash":"97a91d25e0bbf32445c79c369f80c9578783115a","modified":1630852737712},{"_id":"public/images/blog/猿创日记/210828/热搜.png","hash":"43255ce7a790c4b1b63033daa3b5ecbb4136695e","modified":1630160609670},{"_id":"public/images/blog/猿创日记/210828/花.jpg","hash":"d9906481b697701b956c8b22b94c991c8673bbae","modified":1630160609670},{"_id":"source/_posts/一次上线翻车让我总结出以下几点血的教训.md","hash":"81832744349601295e7d0112306fcd8bfb663cc3","modified":1630852587416},{"_id":"source/images/blog/猿创日记/.DS_Store","hash":"6c9e6c94d96340ba0800859ab52a41fe04bc45a1","modified":1630852830186},{"_id":"source/images/blog/猿创日记/210831/蓝天白云.jpeg","hash":"4d6c76b3fbf5099c2c7efdc6190f4fc778ac3d56","modified":1630372927979},{"_id":"public/2021/08/31/一次上线翻车让我总结出以下几点血的教训/index.html","hash":"07262e7e6d6c0b970405d236bef15b825c66bf81","modified":1630852737712},{"_id":"public/images/blog/猿创日记/210831/蓝天白云.jpeg","hash":"4d6c76b3fbf5099c2c7efdc6190f4fc778ac3d56","modified":1630373180846},{"_id":"source/_posts/聊个最近体检的事情（一）.md","hash":"4be40cede547c460f27782d215b109d697c5bd54","modified":1630852891950},{"_id":"public/2021/09/05/聊个最近体检的事情（一）/index.html","hash":"0fee563d3f3bf6ecc2eb110e832f875046d2cacb","modified":1630852898811},{"_id":"public/archives/2021/09/index.html","hash":"a12d067a2ea2d572fcdabf41e52f0ea6e1541a13","modified":1630852737712},{"_id":"public/categories/iOS/page/4/index.html","hash":"6fa84de82f95076af3db1aae2b81bb19164cbea2","modified":1630852737712},{"_id":"public/categories/日记/page/2/index.html","hash":"c0c428a5b97810d9f5063538897ca80cdcfc9c0d","modified":1630852737712},{"_id":"public/tags/上线/index.html","hash":"2dece0a03bd6b6a4bc4a6aa028ae7f9757886987","modified":1630852737712},{"_id":"public/tags/冲突/index.html","hash":"a3a7d7683926b37e5a5b3427f1d8ba6a32cc1562","modified":1630852737712},{"_id":"public/tags/Canvas/index.html","hash":"6aa5df9021aa92aa42e5b0e4adf074de59fb0b2e","modified":1630852737712},{"_id":"public/tags/计算器/index.html","hash":"52ab07127eb8d99253ef1797674d95696cc65824","modified":1630852737712},{"_id":"public/tags/体检/index.html","hash":"51e699712eb181f11300efdf05984a6c385d40fd","modified":1630852737712},{"_id":"source/images/blog/猿创日记/210905/百度搜索.jpeg","hash":"9fa2b519476afab29a9fb6b13828ca96e1f3e75a","modified":1630849438753},{"_id":"source/images/blog/猿创日记/210905/文章配图.jpeg","hash":"7d9f47f78b1e8dc0dc696eca0151cad1dc66e8bb","modified":1630851590133},{"_id":"public/images/blog/猿创日记/210905/百度搜索.jpeg","hash":"9fa2b519476afab29a9fb6b13828ca96e1f3e75a","modified":1630852898811},{"_id":"public/images/blog/猿创日记/210905/文章配图.jpeg","hash":"7d9f47f78b1e8dc0dc696eca0151cad1dc66e8bb","modified":1630852898811}],"Category":[{"name":"iOS","_id":"cksu5b14900048c205pk9hloz"},{"name":"FFmpeg","_id":"cksu5b14j000k8c2014y6hjk5"},{"name":"Flutter","_id":"cksu5b14o000w8c20eb1rhssa"},{"name":"Geohash系列","_id":"cksu5b14q00138c2096m42q4y"},{"name":"源码","_id":"cksu5b14w001f8c20b9qp5lbp"},{"name":"杂谈","_id":"cksu5b150001w8c20939f00cu"},{"name":"cocos2d-x","_id":"cksu5b15g00398c20gtrq2h9r"},{"name":"小飞鱼","_id":"cksu5b15i003g8c202fhcaag4"},{"name":"疯言疯语","_id":"cksu5b15m003u8c20brh8ewkk"},{"name":"小程序","_id":"cksu5b15o00438c20bpgge1f0"},{"name":"开源","_id":"cksu5b15s004h8c208xzeft1y"},{"name":"Android","_id":"cksu6ytie00015020edlt6tn7"},{"name":"日记","_id":"cksvux7zs0006qg924p9kbvan"}],"Data":[],"Page":[{"title":"分类","date":"2017-09-24T14:32:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-09-24 22:32:22\ntype: \"categories\"\n---\n","updated":"2021-08-27T13:34:42.829Z","path":"categories/index.html","_id":"cksu5b14200008c209nso4yif","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-09-25T16:04:47.000Z","type":"about","_content":"\n#### 蜘蛛纸牌 `for macOS`\n\n仿 `Windows` 经典单机游戏 `蜘蛛纸牌`\n\n[点此直达项目](https://github.com/KelvinQQ/SpiderCard)\n\n{% img /images/zzzp_shot_1.png %}\n\n#### 版权说明\n本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 3.0](https://creativecommons.org/licenses/by-nc-sa/3.0/) 许可协议。转载请注明出处！\n\n#### 联系方式\nE-Mail : [history_zq@163.com](mailto:history_zq@163.com)\n\n\n{% img /images/weixin_qrcode.jpg %}\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-09-26 00:04:47\ntype: \"about\"\n---\n\n#### 蜘蛛纸牌 `for macOS`\n\n仿 `Windows` 经典单机游戏 `蜘蛛纸牌`\n\n[点此直达项目](https://github.com/KelvinQQ/SpiderCard)\n\n{% img /images/zzzp_shot_1.png %}\n\n#### 版权说明\n本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 3.0](https://creativecommons.org/licenses/by-nc-sa/3.0/) 许可协议。转载请注明出处！\n\n#### 联系方式\nE-Mail : [history_zq@163.com](mailto:history_zq@163.com)\n\n\n{% img /images/weixin_qrcode.jpg %}\n","updated":"2021-08-27T13:34:42.828Z","path":"about/index.html","_id":"cksu5b14700028c20fo4f7d4f","comments":1,"layout":"page","content":"<h4 id=\"蜘蛛纸牌-for-macOS\"><a href=\"#蜘蛛纸牌-for-macOS\" class=\"headerlink\" title=\"蜘蛛纸牌 for macOS\"></a>蜘蛛纸牌 <code>for macOS</code></h4><p>仿 <code>Windows</code> 经典单机游戏 <code>蜘蛛纸牌</code></p>\n<p><a href=\"https://github.com/KelvinQQ/SpiderCard\">点此直达项目</a></p>\n<img src=\"/images/zzzp_shot_1.png\" class=\"\">\n\n<h4 id=\"版权说明\"><a href=\"#版权说明\" class=\"headerlink\" title=\"版权说明\"></a>版权说明</h4><p>本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！</p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><p>E-Mail : <a href=\"mailto:history_zq@163.com\">history_zq@163.com</a></p>\n<img src=\"/images/weixin_qrcode.jpg\" class=\"\">\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"蜘蛛纸牌-for-macOS\"><a href=\"#蜘蛛纸牌-for-macOS\" class=\"headerlink\" title=\"蜘蛛纸牌 for macOS\"></a>蜘蛛纸牌 <code>for macOS</code></h4><p>仿 <code>Windows</code> 经典单机游戏 <code>蜘蛛纸牌</code></p>\n<p><a href=\"https://github.com/KelvinQQ/SpiderCard\">点此直达项目</a></p>\n<img src=\"/images/zzzp_shot_1.png\" class=\"\">\n\n<h4 id=\"版权说明\"><a href=\"#版权说明\" class=\"headerlink\" title=\"版权说明\"></a>版权说明</h4><p>本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！</p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><p>E-Mail : <a href=\"mailto:history_zq@163.com\">history_zq@163.com</a></p>\n<img src=\"/images/weixin_qrcode.jpg\" class=\"\">\n"},{"title":"标签","date":"2017-09-24T14:28:22.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-09-24 22:28:22\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-08-27T13:34:42.990Z","path":"tags/index.html","_id":"cksu5b14a00068c20hqxv5iav","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"App内打开AppStore","date":"2015-05-19T06:53:17.000Z","_content":"\niOS7以后可以在应用内打开AppStore展示另一个App.这样就可以直接下载了.\n\n我们只要使用这段代码就可以了.\n\n* 应用库文件\n\n我们可以这样引用: `@import StoreKit;`\n\n<!--more-->\n\n* 请求App\n\n```\nSKStoreProductViewController *storeProductVc = [[SKStoreProductViewController alloc] init];\n            storeProductVc.delegate = self;\n            [storeProductVc loadProductWithParameters:@{\n                                                        SKStoreProductParameterITunesItemIdentifier: @\"XXXXXXX\",\n                                                        }\n                                      completionBlock:^(BOOL result, NSError *error) {\n                                          if (result) {\n                                              [self presentViewController:storeProductVc animated:YES completion:nil];\n                                          }\n                                      }];\n```\n\n* 实现`delegate` `dismiss` `SKStoreProductViewController`\n\n```\n- (void)productViewControllerDidFinish:(SKStoreProductViewController *)viewController\n{\n    [viewController dismissViewControllerAnimated:YES completion:nil];\n}\n```","source":"_posts/App内打开AppStore.markdown","raw":"---\ntitle: \"App内打开AppStore\"\ndate: 2015-05-19 14:53:17 +0800\ncategories : \n  - iOS\ntags:\n  - AppStore\n\n---\n\niOS7以后可以在应用内打开AppStore展示另一个App.这样就可以直接下载了.\n\n我们只要使用这段代码就可以了.\n\n* 应用库文件\n\n我们可以这样引用: `@import StoreKit;`\n\n<!--more-->\n\n* 请求App\n\n```\nSKStoreProductViewController *storeProductVc = [[SKStoreProductViewController alloc] init];\n            storeProductVc.delegate = self;\n            [storeProductVc loadProductWithParameters:@{\n                                                        SKStoreProductParameterITunesItemIdentifier: @\"XXXXXXX\",\n                                                        }\n                                      completionBlock:^(BOOL result, NSError *error) {\n                                          if (result) {\n                                              [self presentViewController:storeProductVc animated:YES completion:nil];\n                                          }\n                                      }];\n```\n\n* 实现`delegate` `dismiss` `SKStoreProductViewController`\n\n```\n- (void)productViewControllerDidFinish:(SKStoreProductViewController *)viewController\n{\n    [viewController dismissViewControllerAnimated:YES completion:nil];\n}\n```","slug":"App内打开AppStore","published":1,"updated":"2021-08-27T13:34:42.819Z","_id":"cksu5b14500018c20act8h0qy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>iOS7以后可以在应用内打开AppStore展示另一个App.这样就可以直接下载了.</p>\n<p>我们只要使用这段代码就可以了.</p>\n<ul>\n<li>应用库文件</li>\n</ul>\n<p>我们可以这样引用: <code>@import StoreKit;</code></p>\n<span id=\"more\"></span>\n\n<ul>\n<li>请求App</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SKStoreProductViewController *storeProductVc = [[SKStoreProductViewController alloc] init];</span><br><span class=\"line\">            storeProductVc.delegate = self;</span><br><span class=\"line\">            [storeProductVc loadProductWithParameters:@&#123;</span><br><span class=\"line\">                                                        SKStoreProductParameterITunesItemIdentifier: @&quot;XXXXXXX&quot;,</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                                      completionBlock:^(BOOL result, NSError *error) &#123;</span><br><span class=\"line\">                                          if (result) &#123;</span><br><span class=\"line\">                                              [self presentViewController:storeProductVc animated:YES completion:nil];</span><br><span class=\"line\">                                          &#125;</span><br><span class=\"line\">                                      &#125;];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实现<code>delegate</code> <code>dismiss</code> <code>SKStoreProductViewController</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)productViewControllerDidFinish:(SKStoreProductViewController *)viewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [viewController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>iOS7以后可以在应用内打开AppStore展示另一个App.这样就可以直接下载了.</p>\n<p>我们只要使用这段代码就可以了.</p>\n<ul>\n<li>应用库文件</li>\n</ul>\n<p>我们可以这样引用: <code>@import StoreKit;</code></p>","more":"<ul>\n<li>请求App</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SKStoreProductViewController *storeProductVc = [[SKStoreProductViewController alloc] init];</span><br><span class=\"line\">            storeProductVc.delegate = self;</span><br><span class=\"line\">            [storeProductVc loadProductWithParameters:@&#123;</span><br><span class=\"line\">                                                        SKStoreProductParameterITunesItemIdentifier: @&quot;XXXXXXX&quot;,</span><br><span class=\"line\">                                                        &#125;</span><br><span class=\"line\">                                      completionBlock:^(BOOL result, NSError *error) &#123;</span><br><span class=\"line\">                                          if (result) &#123;</span><br><span class=\"line\">                                              [self presentViewController:storeProductVc animated:YES completion:nil];</span><br><span class=\"line\">                                          &#125;</span><br><span class=\"line\">                                      &#125;];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实现<code>delegate</code> <code>dismiss</code> <code>SKStoreProductViewController</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)productViewControllerDidFinish:(SKStoreProductViewController *)viewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [viewController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"AutoLayout的使用","date":"2014-07-20T03:01:35.000Z","_content":"\n# 前言\niOS8快要发正式版了,iPhone6也要出新的尺寸了,如果你还没有用Storyboard和AutoLayout那将是一种痛苦.\n# 正文\n自从iPhone出了不同分辨率的屏幕后,iOS开发者也渐渐开始有了android开发者的痛苦了.当然Apple也提供了新的技术来尽量让开发者没有那么费劲.所以就推出了AutoLayout的技术.由于只能支持到IOS6,所以还是有部分的APP没有使用.不过相信还是大势所趋的.\n如果你的App都是使用storyboard或者xib来构建的,直接使用可视化操作就可以很轻松的完成了.但是对于复杂的UI免不了使用coding.这时候你就需要手动的去写那么autolayout代码.虽然autolayout的代码也是比较易理解,但是还是不那么的方便.这里推荐大家一个开源库,封装的还可以.是UIView的一个Category.\nGitHub上的主页在[这里](https://github.com/smileyborg/PureLayout).\n\n<!--more-->\n\n平时用的多的API也就是设置宽高,设置和父窗口的相对位置以及设置和兄弟窗口的相对位置.如下:\n\n```\n/** Centers the view in its superview. */\n- (NSArray *)autoCenterInSuperview;\n\n/** Aligns the view to the same axis of its superview. */\n- (NSLayoutConstraint *)autoAlignAxisToSuperviewAxis:(ALAxis)axis;\n\n\n# pragma mark Pin Edges to Superview\n\n/** Pins the given edge of the view to the same edge of the superview with an inset. */\n- (NSLayoutConstraint *)autoPinEdgeToSuperviewEdge:(ALEdge)edge withInset:(CGFloat)inset;\n\n/** Pins the edges of the view to the edges of its superview with the given edge insets. */\n- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets;\n\n/** Pins 3 of the 4 edges of the view to the edges of its superview with the given edge insets, excluding one edge. */\n- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets excludingEdge:(ALEdge)edge;\n\n\n# pragma mark Pin Edges\n\n/** Pins an edge of the view to a given edge of another view. */\n- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView;\n\n/** Pins an edge of the view to a given edge of another view with an offset. */\n- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView withOffset:(CGFloat)offset;\n\t\n# pragma mark Align Axes\n\n/** Aligns an axis of the view to the same axis of another view. */\n- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView;\n\n/** Aligns an axis of the view to the same axis of another view with an offset. */\n- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView withOffset:(CGFloat)offset;\n\n\n# pragma mark Match Dimensions\n\n/** Matches a dimension of the view to a given dimension of another view. */\n- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView;\n\n/** Matches a dimension of the view to a given dimension of another view with an offset. */\n- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView withOffset:(CGFloat)offset;\t\t\n\n# pragma mark Set Dimensions\n\n/** Sets the view to a specific size. */\n- (NSArray *)autoSetDimensionsToSize:(CGSize)size;\n\n/** Sets the given dimension of the view to a specific size. */\n- (NSLayoutConstraint *)autoSetDimension:(ALDimension)dimension toSize:(CGFloat)size;\n\n```\n还有其他如设置`relationship`的API,大家可自行查看GitHub上的主页.\t\t","source":"_posts/AutoLayout的使用.markdown","raw":"---\ntitle: \"AutoLayout的使用\"\ndate: 2014-07-20 11:01:35 +0800\ntags: \n    - iOS8\n    - AutoLayout\ncategories:\n    - iOS\n---\n\n# 前言\niOS8快要发正式版了,iPhone6也要出新的尺寸了,如果你还没有用Storyboard和AutoLayout那将是一种痛苦.\n# 正文\n自从iPhone出了不同分辨率的屏幕后,iOS开发者也渐渐开始有了android开发者的痛苦了.当然Apple也提供了新的技术来尽量让开发者没有那么费劲.所以就推出了AutoLayout的技术.由于只能支持到IOS6,所以还是有部分的APP没有使用.不过相信还是大势所趋的.\n如果你的App都是使用storyboard或者xib来构建的,直接使用可视化操作就可以很轻松的完成了.但是对于复杂的UI免不了使用coding.这时候你就需要手动的去写那么autolayout代码.虽然autolayout的代码也是比较易理解,但是还是不那么的方便.这里推荐大家一个开源库,封装的还可以.是UIView的一个Category.\nGitHub上的主页在[这里](https://github.com/smileyborg/PureLayout).\n\n<!--more-->\n\n平时用的多的API也就是设置宽高,设置和父窗口的相对位置以及设置和兄弟窗口的相对位置.如下:\n\n```\n/** Centers the view in its superview. */\n- (NSArray *)autoCenterInSuperview;\n\n/** Aligns the view to the same axis of its superview. */\n- (NSLayoutConstraint *)autoAlignAxisToSuperviewAxis:(ALAxis)axis;\n\n\n# pragma mark Pin Edges to Superview\n\n/** Pins the given edge of the view to the same edge of the superview with an inset. */\n- (NSLayoutConstraint *)autoPinEdgeToSuperviewEdge:(ALEdge)edge withInset:(CGFloat)inset;\n\n/** Pins the edges of the view to the edges of its superview with the given edge insets. */\n- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets;\n\n/** Pins 3 of the 4 edges of the view to the edges of its superview with the given edge insets, excluding one edge. */\n- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets excludingEdge:(ALEdge)edge;\n\n\n# pragma mark Pin Edges\n\n/** Pins an edge of the view to a given edge of another view. */\n- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView;\n\n/** Pins an edge of the view to a given edge of another view with an offset. */\n- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView withOffset:(CGFloat)offset;\n\t\n# pragma mark Align Axes\n\n/** Aligns an axis of the view to the same axis of another view. */\n- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView;\n\n/** Aligns an axis of the view to the same axis of another view with an offset. */\n- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView withOffset:(CGFloat)offset;\n\n\n# pragma mark Match Dimensions\n\n/** Matches a dimension of the view to a given dimension of another view. */\n- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView;\n\n/** Matches a dimension of the view to a given dimension of another view with an offset. */\n- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView withOffset:(CGFloat)offset;\t\t\n\n# pragma mark Set Dimensions\n\n/** Sets the view to a specific size. */\n- (NSArray *)autoSetDimensionsToSize:(CGSize)size;\n\n/** Sets the given dimension of the view to a specific size. */\n- (NSLayoutConstraint *)autoSetDimension:(ALDimension)dimension toSize:(CGFloat)size;\n\n```\n还有其他如设置`relationship`的API,大家可自行查看GitHub上的主页.\t\t","slug":"AutoLayout的使用","published":1,"updated":"2021-08-27T13:34:42.819Z","_id":"cksu5b14800038c20a1r2hjsn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS8快要发正式版了,iPhone6也要出新的尺寸了,如果你还没有用Storyboard和AutoLayout那将是一种痛苦.</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>自从iPhone出了不同分辨率的屏幕后,iOS开发者也渐渐开始有了android开发者的痛苦了.当然Apple也提供了新的技术来尽量让开发者没有那么费劲.所以就推出了AutoLayout的技术.由于只能支持到IOS6,所以还是有部分的APP没有使用.不过相信还是大势所趋的.<br>如果你的App都是使用storyboard或者xib来构建的,直接使用可视化操作就可以很轻松的完成了.但是对于复杂的UI免不了使用coding.这时候你就需要手动的去写那么autolayout代码.虽然autolayout的代码也是比较易理解,但是还是不那么的方便.这里推荐大家一个开源库,封装的还可以.是UIView的一个Category.<br>GitHub上的主页在<a href=\"https://github.com/smileyborg/PureLayout\">这里</a>.</p>\n<span id=\"more\"></span>\n\n<p>平时用的多的API也就是设置宽高,设置和父窗口的相对位置以及设置和兄弟窗口的相对位置.如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Centers the view in its superview. */</span><br><span class=\"line\">- (NSArray *)autoCenterInSuperview;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Aligns the view to the same axis of its superview. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoAlignAxisToSuperviewAxis:(ALAxis)axis;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Pin Edges to Superview</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins the given edge of the view to the same edge of the superview with an inset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoPinEdgeToSuperviewEdge:(ALEdge)edge withInset:(CGFloat)inset;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins the edges of the view to the edges of its superview with the given edge insets. */</span><br><span class=\"line\">- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins 3 of the 4 edges of the view to the edges of its superview with the given edge insets, excluding one edge. */</span><br><span class=\"line\">- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets excludingEdge:(ALEdge)edge;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Pin Edges</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins an edge of the view to a given edge of another view. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins an edge of the view to a given edge of another view with an offset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView withOffset:(CGFloat)offset;</span><br><span class=\"line\">\t</span><br><span class=\"line\"># pragma mark Align Axes</span><br><span class=\"line\"></span><br><span class=\"line\">/** Aligns an axis of the view to the same axis of another view. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Aligns an axis of the view to the same axis of another view with an offset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView withOffset:(CGFloat)offset;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Match Dimensions</span><br><span class=\"line\"></span><br><span class=\"line\">/** Matches a dimension of the view to a given dimension of another view. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Matches a dimension of the view to a given dimension of another view with an offset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView withOffset:(CGFloat)offset;\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Set Dimensions</span><br><span class=\"line\"></span><br><span class=\"line\">/** Sets the view to a specific size. */</span><br><span class=\"line\">- (NSArray *)autoSetDimensionsToSize:(CGSize)size;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Sets the given dimension of the view to a specific size. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoSetDimension:(ALDimension)dimension toSize:(CGFloat)size;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还有其他如设置<code>relationship</code>的API,大家可自行查看GitHub上的主页.        </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS8快要发正式版了,iPhone6也要出新的尺寸了,如果你还没有用Storyboard和AutoLayout那将是一种痛苦.</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>自从iPhone出了不同分辨率的屏幕后,iOS开发者也渐渐开始有了android开发者的痛苦了.当然Apple也提供了新的技术来尽量让开发者没有那么费劲.所以就推出了AutoLayout的技术.由于只能支持到IOS6,所以还是有部分的APP没有使用.不过相信还是大势所趋的.<br>如果你的App都是使用storyboard或者xib来构建的,直接使用可视化操作就可以很轻松的完成了.但是对于复杂的UI免不了使用coding.这时候你就需要手动的去写那么autolayout代码.虽然autolayout的代码也是比较易理解,但是还是不那么的方便.这里推荐大家一个开源库,封装的还可以.是UIView的一个Category.<br>GitHub上的主页在<a href=\"https://github.com/smileyborg/PureLayout\">这里</a>.</p>","more":"<p>平时用的多的API也就是设置宽高,设置和父窗口的相对位置以及设置和兄弟窗口的相对位置.如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Centers the view in its superview. */</span><br><span class=\"line\">- (NSArray *)autoCenterInSuperview;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Aligns the view to the same axis of its superview. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoAlignAxisToSuperviewAxis:(ALAxis)axis;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Pin Edges to Superview</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins the given edge of the view to the same edge of the superview with an inset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoPinEdgeToSuperviewEdge:(ALEdge)edge withInset:(CGFloat)inset;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins the edges of the view to the edges of its superview with the given edge insets. */</span><br><span class=\"line\">- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins 3 of the 4 edges of the view to the edges of its superview with the given edge insets, excluding one edge. */</span><br><span class=\"line\">- (NSArray *)autoPinEdgesToSuperviewEdgesWithInsets:(ALEdgeInsets)insets excludingEdge:(ALEdge)edge;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Pin Edges</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins an edge of the view to a given edge of another view. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Pins an edge of the view to a given edge of another view with an offset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoPinEdge:(ALEdge)edge toEdge:(ALEdge)toEdge ofView:(ALView *)peerView withOffset:(CGFloat)offset;</span><br><span class=\"line\">\t</span><br><span class=\"line\"># pragma mark Align Axes</span><br><span class=\"line\"></span><br><span class=\"line\">/** Aligns an axis of the view to the same axis of another view. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Aligns an axis of the view to the same axis of another view with an offset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoAlignAxis:(ALAxis)axis toSameAxisOfView:(ALView *)peerView withOffset:(CGFloat)offset;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Match Dimensions</span><br><span class=\"line\"></span><br><span class=\"line\">/** Matches a dimension of the view to a given dimension of another view. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Matches a dimension of the view to a given dimension of another view with an offset. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoMatchDimension:(ALDimension)dimension toDimension:(ALDimension)toDimension ofView:(ALView *)peerView withOffset:(CGFloat)offset;\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"># pragma mark Set Dimensions</span><br><span class=\"line\"></span><br><span class=\"line\">/** Sets the view to a specific size. */</span><br><span class=\"line\">- (NSArray *)autoSetDimensionsToSize:(CGSize)size;</span><br><span class=\"line\"></span><br><span class=\"line\">/** Sets the given dimension of the view to a specific size. */</span><br><span class=\"line\">- (NSLayoutConstraint *)autoSetDimension:(ALDimension)dimension toSize:(CGFloat)size;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还有其他如设置<code>relationship</code>的API,大家可自行查看GitHub上的主页.        </p>"},{"title":"CocoaPods设置target支持的swift版本 ","date":"2017-11-24T00:50:33.000Z","_content":"上一篇文章说道在`Swift4.0`中如何引用`3.0`版本的第三方库，详见[这篇文章](https://historyzhang.github.io/2017/10/21/Swift4.0%E5%BC%95%E7%94%A83.0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/)。但是如果`Pods`中有很多第三方库都只支持`3.0`，一个一个修改恐怕是要累死。而且每次执行`pod update`之后之前设置的都会被重置，恐怕是想死的心都有了。\n<!--more-->\n有一句是说：\"懒惰\"推动了人类的进步。所以程序猿总是有办法的。\n> Talk is cheap, Show me the code\n```\nplatform :ios, '10.0'\nuse_frameworks!\n\ntarget 'YourTarget' do\n    pod 'SnapKit', '~> 4.0.0'\n    pod 'Toast-Swift', '~> 2.0.0'\nend\n\npost_install do |installer|\n    installer.pods_project.targets.each do |target|\n        if target.name == 'Toast-Swift'\n            target.build_configurations.each do |config|\n                config.build_settings['SWIFT_VERSION'] = '3.2'\n            end\n        end\n    end\nend\n```\n","source":"_posts/CocoaPods设置target支持的swift版本.md","raw":"---\ntitle: 'CocoaPods设置target支持的swift版本 '\ndate: 2017-11-24 08:50:33\ntags: [Swift4, CocoaPods]\ncategories: [iOS]\n---\n上一篇文章说道在`Swift4.0`中如何引用`3.0`版本的第三方库，详见[这篇文章](https://historyzhang.github.io/2017/10/21/Swift4.0%E5%BC%95%E7%94%A83.0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/)。但是如果`Pods`中有很多第三方库都只支持`3.0`，一个一个修改恐怕是要累死。而且每次执行`pod update`之后之前设置的都会被重置，恐怕是想死的心都有了。\n<!--more-->\n有一句是说：\"懒惰\"推动了人类的进步。所以程序猿总是有办法的。\n> Talk is cheap, Show me the code\n```\nplatform :ios, '10.0'\nuse_frameworks!\n\ntarget 'YourTarget' do\n    pod 'SnapKit', '~> 4.0.0'\n    pod 'Toast-Swift', '~> 2.0.0'\nend\n\npost_install do |installer|\n    installer.pods_project.targets.each do |target|\n        if target.name == 'Toast-Swift'\n            target.build_configurations.each do |config|\n                config.build_settings['SWIFT_VERSION'] = '3.2'\n            end\n        end\n    end\nend\n```\n","slug":"CocoaPods设置target支持的swift版本","published":1,"updated":"2021-08-27T13:34:42.819Z","_id":"cksu5b14b00078c20415g4e2m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上一篇文章说道在<code>Swift4.0</code>中如何引用<code>3.0</code>版本的第三方库，详见<a href=\"https://historyzhang.github.io/2017/10/21/Swift4.0%E5%BC%95%E7%94%A83.0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/\">这篇文章</a>。但是如果<code>Pods</code>中有很多第三方库都只支持<code>3.0</code>，一个一个修改恐怕是要累死。而且每次执行<code>pod update</code>之后之前设置的都会被重置，恐怕是想死的心都有了。</p>\n<span id=\"more\"></span>\n<p>有一句是说：”懒惰”推动了人类的进步。所以程序猿总是有办法的。</p>\n<blockquote>\n<p>Talk is cheap, Show me the code</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform :ios, &#x27;10.0&#x27;</span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">target &#x27;YourTarget&#x27; do</span><br><span class=\"line\">    pod &#x27;SnapKit&#x27;, &#x27;~&gt; 4.0.0&#x27;</span><br><span class=\"line\">    pod &#x27;Toast-Swift&#x27;, &#x27;~&gt; 2.0.0&#x27;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">post_install do |installer|</span><br><span class=\"line\">    installer.pods_project.targets.each do |target|</span><br><span class=\"line\">        if target.name == &#x27;Toast-Swift&#x27;</span><br><span class=\"line\">            target.build_configurations.each do |config|</span><br><span class=\"line\">                config.build_settings[&#x27;SWIFT_VERSION&#x27;] = &#x27;3.2&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>上一篇文章说道在<code>Swift4.0</code>中如何引用<code>3.0</code>版本的第三方库，详见<a href=\"https://historyzhang.github.io/2017/10/21/Swift4.0%E5%BC%95%E7%94%A83.0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/\">这篇文章</a>。但是如果<code>Pods</code>中有很多第三方库都只支持<code>3.0</code>，一个一个修改恐怕是要累死。而且每次执行<code>pod update</code>之后之前设置的都会被重置，恐怕是想死的心都有了。</p>","more":"<p>有一句是说：”懒惰”推动了人类的进步。所以程序猿总是有办法的。</p>\n<blockquote>\n<p>Talk is cheap, Show me the code</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform :ios, &#x27;10.0&#x27;</span><br><span class=\"line\">use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">target &#x27;YourTarget&#x27; do</span><br><span class=\"line\">    pod &#x27;SnapKit&#x27;, &#x27;~&gt; 4.0.0&#x27;</span><br><span class=\"line\">    pod &#x27;Toast-Swift&#x27;, &#x27;~&gt; 2.0.0&#x27;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">post_install do |installer|</span><br><span class=\"line\">    installer.pods_project.targets.each do |target|</span><br><span class=\"line\">        if target.name == &#x27;Toast-Swift&#x27;</span><br><span class=\"line\">            target.build_configurations.each do |config|</span><br><span class=\"line\">                config.build_settings[&#x27;SWIFT_VERSION&#x27;] = &#x27;3.2&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>"},{"title":"FFmpeg iOS库编译与集成","date":"2016-09-26T13:44:05.000Z","_content":"\n\n## 以下系列文章基于FFmpeg 3.1.1和Xcode8。\n\n\n#### [FFmpeg iOS库编译与集成](http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/)\n\n#### [FFmpeg解码流程](http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/)\n\n\n由于FFmpeg工程太大，很难一下子理解透彻，所以就边看边记一些笔记，理清一下思路，顺便也留给其他人一些意见。\n\n<!--more-->\n\n## 1. 下载FFmpeg的源码编译iOS库。\n而编译FFmpeg还需要另外两项的支持\n\n* [https://github.com/libav/gas-preprocessor](https://github.com/libav/gas-preprocessor)\n* yasm\n\n这样就比较复杂，如果想自己一步一步的按照流程来做，可以参考这篇文章 [iOS配置FFmpeg框架(原创)\n](https://cnbin.github.io/blog/2015/05/19/iospei-zhi-ffmpegkuang-jia/) 。\n\n所以 Github 上有个开源的脚本，[https://github.com/kewlbear/FFmpeg-iOS-build-script](https://github.com/kewlbear/FFmpeg-iOS-build-script) ，下载之后，直接 `./build-ffmpeg.sh`，脚本会自动帮你下载相关文件以及配置。\n\n编译成功之后，就会在文件夹里面看到 `FFmpeg-iOS` 的文件夹，里面就是静态库，还有个 `ffmpeg-3.1.1` 的文件夹，就是源码。当然，如果你熟悉脚本语言可以看一下里面的脚本，可以修改一些配置，达到你想要的结果。这里暂时先不展开了。\n\n## 2. 集成静态库至Xcode\n* 新建工程。\n\n新建一个 `Single View Application` ，然后将 `FFmpeg-iOS` 文件夹拖进工程。然后需要在 `Build Setting` 里面配置一下 `Header Search Paths` ，需要将 `include` 以及 `include` 下面的子文件夹都配置进去。\n\n* 添加依赖库。\n\n需要添加以下几个 `framework` 和 `lib` ： `CoreMedia.framework` ， `VideoToolbox.framework` ， `AudioToolbox.framework` ， `libiconv.2.4.0.tbd` ， `libbz2.1.0.tbd` ， `libz.1.2.5.tbd`。\n\n* 编译\n\n在 `ViewController` 里包含头文件 `#import \"avcodec.h\"`， 然后在 `viewDidLoad` 中调用 `avcodec_register_all();` ，应该就可以编译通过了。\n\n在我的 `Xcode8` 中会有一堆警告，提示 `empty paragraph passed to @param command` ，这里我们需要处理一下。在引用头文件的时候使用宏包含一下。\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdocumentation\"\n\n#import \"avcodec.h\"\n\n#pragma clang pop\n```\n\n至此，`FFmpeg` 就集成完毕了。","source":"_posts/FFmpeg iOS库编译与集成.md","raw":"---\ntitle: FFmpeg iOS库编译与集成\ndate: 2016-09-26 21:44:05\ntags: \n\t- FFmpeg\ncategories:\n\t- FFmpeg\n\n---\n\n\n## 以下系列文章基于FFmpeg 3.1.1和Xcode8。\n\n\n#### [FFmpeg iOS库编译与集成](http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/)\n\n#### [FFmpeg解码流程](http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/)\n\n\n由于FFmpeg工程太大，很难一下子理解透彻，所以就边看边记一些笔记，理清一下思路，顺便也留给其他人一些意见。\n\n<!--more-->\n\n## 1. 下载FFmpeg的源码编译iOS库。\n而编译FFmpeg还需要另外两项的支持\n\n* [https://github.com/libav/gas-preprocessor](https://github.com/libav/gas-preprocessor)\n* yasm\n\n这样就比较复杂，如果想自己一步一步的按照流程来做，可以参考这篇文章 [iOS配置FFmpeg框架(原创)\n](https://cnbin.github.io/blog/2015/05/19/iospei-zhi-ffmpegkuang-jia/) 。\n\n所以 Github 上有个开源的脚本，[https://github.com/kewlbear/FFmpeg-iOS-build-script](https://github.com/kewlbear/FFmpeg-iOS-build-script) ，下载之后，直接 `./build-ffmpeg.sh`，脚本会自动帮你下载相关文件以及配置。\n\n编译成功之后，就会在文件夹里面看到 `FFmpeg-iOS` 的文件夹，里面就是静态库，还有个 `ffmpeg-3.1.1` 的文件夹，就是源码。当然，如果你熟悉脚本语言可以看一下里面的脚本，可以修改一些配置，达到你想要的结果。这里暂时先不展开了。\n\n## 2. 集成静态库至Xcode\n* 新建工程。\n\n新建一个 `Single View Application` ，然后将 `FFmpeg-iOS` 文件夹拖进工程。然后需要在 `Build Setting` 里面配置一下 `Header Search Paths` ，需要将 `include` 以及 `include` 下面的子文件夹都配置进去。\n\n* 添加依赖库。\n\n需要添加以下几个 `framework` 和 `lib` ： `CoreMedia.framework` ， `VideoToolbox.framework` ， `AudioToolbox.framework` ， `libiconv.2.4.0.tbd` ， `libbz2.1.0.tbd` ， `libz.1.2.5.tbd`。\n\n* 编译\n\n在 `ViewController` 里包含头文件 `#import \"avcodec.h\"`， 然后在 `viewDidLoad` 中调用 `avcodec_register_all();` ，应该就可以编译通过了。\n\n在我的 `Xcode8` 中会有一堆警告，提示 `empty paragraph passed to @param command` ，这里我们需要处理一下。在引用头文件的时候使用宏包含一下。\n\n```\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdocumentation\"\n\n#import \"avcodec.h\"\n\n#pragma clang pop\n```\n\n至此，`FFmpeg` 就集成完毕了。","slug":"FFmpeg iOS库编译与集成","published":1,"updated":"2021-08-27T13:34:42.820Z","_id":"cksu5b14c00088c209sfhg6ce","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"以下系列文章基于FFmpeg-3-1-1和Xcode8。\"><a href=\"#以下系列文章基于FFmpeg-3-1-1和Xcode8。\" class=\"headerlink\" title=\"以下系列文章基于FFmpeg 3.1.1和Xcode8。\"></a>以下系列文章基于FFmpeg 3.1.1和Xcode8。</h2><h4 id=\"FFmpeg-iOS库编译与集成\"><a href=\"#FFmpeg-iOS库编译与集成\" class=\"headerlink\" title=\"FFmpeg iOS库编译与集成\"></a><a href=\"http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/\">FFmpeg iOS库编译与集成</a></h4><h4 id=\"FFmpeg解码流程\"><a href=\"#FFmpeg解码流程\" class=\"headerlink\" title=\"FFmpeg解码流程\"></a><a href=\"http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/\">FFmpeg解码流程</a></h4><p>由于FFmpeg工程太大，很难一下子理解透彻，所以就边看边记一些笔记，理清一下思路，顺便也留给其他人一些意见。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-下载FFmpeg的源码编译iOS库。\"><a href=\"#1-下载FFmpeg的源码编译iOS库。\" class=\"headerlink\" title=\"1. 下载FFmpeg的源码编译iOS库。\"></a>1. 下载FFmpeg的源码编译iOS库。</h2><p>而编译FFmpeg还需要另外两项的支持</p>\n<ul>\n<li><a href=\"https://github.com/libav/gas-preprocessor\">https://github.com/libav/gas-preprocessor</a></li>\n<li>yasm</li>\n</ul>\n<p>这样就比较复杂，如果想自己一步一步的按照流程来做，可以参考这篇文章 <a href=\"https://cnbin.github.io/blog/2015/05/19/iospei-zhi-ffmpegkuang-jia/\">iOS配置FFmpeg框架(原创)\n</a> 。</p>\n<p>所以 Github 上有个开源的脚本，<a href=\"https://github.com/kewlbear/FFmpeg-iOS-build-script\">https://github.com/kewlbear/FFmpeg-iOS-build-script</a> ，下载之后，直接 <code>./build-ffmpeg.sh</code>，脚本会自动帮你下载相关文件以及配置。</p>\n<p>编译成功之后，就会在文件夹里面看到 <code>FFmpeg-iOS</code> 的文件夹，里面就是静态库，还有个 <code>ffmpeg-3.1.1</code> 的文件夹，就是源码。当然，如果你熟悉脚本语言可以看一下里面的脚本，可以修改一些配置，达到你想要的结果。这里暂时先不展开了。</p>\n<h2 id=\"2-集成静态库至Xcode\"><a href=\"#2-集成静态库至Xcode\" class=\"headerlink\" title=\"2. 集成静态库至Xcode\"></a>2. 集成静态库至Xcode</h2><ul>\n<li>新建工程。</li>\n</ul>\n<p>新建一个 <code>Single View Application</code> ，然后将 <code>FFmpeg-iOS</code> 文件夹拖进工程。然后需要在 <code>Build Setting</code> 里面配置一下 <code>Header Search Paths</code> ，需要将 <code>include</code> 以及 <code>include</code> 下面的子文件夹都配置进去。</p>\n<ul>\n<li>添加依赖库。</li>\n</ul>\n<p>需要添加以下几个 <code>framework</code> 和 <code>lib</code> ： <code>CoreMedia.framework</code> ， <code>VideoToolbox.framework</code> ， <code>AudioToolbox.framework</code> ， <code>libiconv.2.4.0.tbd</code> ， <code>libbz2.1.0.tbd</code> ， <code>libz.1.2.5.tbd</code>。</p>\n<ul>\n<li>编译</li>\n</ul>\n<p>在 <code>ViewController</code> 里包含头文件 <code>#import &quot;avcodec.h&quot;</code>， 然后在 <code>viewDidLoad</code> 中调用 <code>avcodec_register_all();</code> ，应该就可以编译通过了。</p>\n<p>在我的 <code>Xcode8</code> 中会有一堆警告，提示 <code>empty paragraph passed to @param command</code> ，这里我们需要处理一下。在引用头文件的时候使用宏包含一下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma clang diagnostic push</span><br><span class=\"line\">#pragma clang diagnostic ignored &quot;-Wdocumentation&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;avcodec.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma clang pop</span><br></pre></td></tr></table></figure>\n\n<p>至此，<code>FFmpeg</code> 就集成完毕了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"以下系列文章基于FFmpeg-3-1-1和Xcode8。\"><a href=\"#以下系列文章基于FFmpeg-3-1-1和Xcode8。\" class=\"headerlink\" title=\"以下系列文章基于FFmpeg 3.1.1和Xcode8。\"></a>以下系列文章基于FFmpeg 3.1.1和Xcode8。</h2><h4 id=\"FFmpeg-iOS库编译与集成\"><a href=\"#FFmpeg-iOS库编译与集成\" class=\"headerlink\" title=\"FFmpeg iOS库编译与集成\"></a><a href=\"http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/\">FFmpeg iOS库编译与集成</a></h4><h4 id=\"FFmpeg解码流程\"><a href=\"#FFmpeg解码流程\" class=\"headerlink\" title=\"FFmpeg解码流程\"></a><a href=\"http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/\">FFmpeg解码流程</a></h4><p>由于FFmpeg工程太大，很难一下子理解透彻，所以就边看边记一些笔记，理清一下思路，顺便也留给其他人一些意见。</p>","more":"<h2 id=\"1-下载FFmpeg的源码编译iOS库。\"><a href=\"#1-下载FFmpeg的源码编译iOS库。\" class=\"headerlink\" title=\"1. 下载FFmpeg的源码编译iOS库。\"></a>1. 下载FFmpeg的源码编译iOS库。</h2><p>而编译FFmpeg还需要另外两项的支持</p>\n<ul>\n<li><a href=\"https://github.com/libav/gas-preprocessor\">https://github.com/libav/gas-preprocessor</a></li>\n<li>yasm</li>\n</ul>\n<p>这样就比较复杂，如果想自己一步一步的按照流程来做，可以参考这篇文章 <a href=\"https://cnbin.github.io/blog/2015/05/19/iospei-zhi-ffmpegkuang-jia/\">iOS配置FFmpeg框架(原创)\n</a> 。</p>\n<p>所以 Github 上有个开源的脚本，<a href=\"https://github.com/kewlbear/FFmpeg-iOS-build-script\">https://github.com/kewlbear/FFmpeg-iOS-build-script</a> ，下载之后，直接 <code>./build-ffmpeg.sh</code>，脚本会自动帮你下载相关文件以及配置。</p>\n<p>编译成功之后，就会在文件夹里面看到 <code>FFmpeg-iOS</code> 的文件夹，里面就是静态库，还有个 <code>ffmpeg-3.1.1</code> 的文件夹，就是源码。当然，如果你熟悉脚本语言可以看一下里面的脚本，可以修改一些配置，达到你想要的结果。这里暂时先不展开了。</p>\n<h2 id=\"2-集成静态库至Xcode\"><a href=\"#2-集成静态库至Xcode\" class=\"headerlink\" title=\"2. 集成静态库至Xcode\"></a>2. 集成静态库至Xcode</h2><ul>\n<li>新建工程。</li>\n</ul>\n<p>新建一个 <code>Single View Application</code> ，然后将 <code>FFmpeg-iOS</code> 文件夹拖进工程。然后需要在 <code>Build Setting</code> 里面配置一下 <code>Header Search Paths</code> ，需要将 <code>include</code> 以及 <code>include</code> 下面的子文件夹都配置进去。</p>\n<ul>\n<li>添加依赖库。</li>\n</ul>\n<p>需要添加以下几个 <code>framework</code> 和 <code>lib</code> ： <code>CoreMedia.framework</code> ， <code>VideoToolbox.framework</code> ， <code>AudioToolbox.framework</code> ， <code>libiconv.2.4.0.tbd</code> ， <code>libbz2.1.0.tbd</code> ， <code>libz.1.2.5.tbd</code>。</p>\n<ul>\n<li>编译</li>\n</ul>\n<p>在 <code>ViewController</code> 里包含头文件 <code>#import &quot;avcodec.h&quot;</code>， 然后在 <code>viewDidLoad</code> 中调用 <code>avcodec_register_all();</code> ，应该就可以编译通过了。</p>\n<p>在我的 <code>Xcode8</code> 中会有一堆警告，提示 <code>empty paragraph passed to @param command</code> ，这里我们需要处理一下。在引用头文件的时候使用宏包含一下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma clang diagnostic push</span><br><span class=\"line\">#pragma clang diagnostic ignored &quot;-Wdocumentation&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;avcodec.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma clang pop</span><br></pre></td></tr></table></figure>\n\n<p>至此，<code>FFmpeg</code> 就集成完毕了。</p>"},{"title":"FFmpeg解码流程","date":"2016-09-30T12:11:56.000Z","_content":"\n## 以下系列文章基于FFmpeg 3.1.1和Xcode8。\n\n\n#### [FFmpeg iOS库编译与集成](http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/)\n\n#### [FFmpeg解码流程](http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/)\n\n***\n\n学习 `FFmpeg` ，就不得不提到一位大神，就是 [雷霄骅](http://my.csdn.net/leixiaohua1020)，可惜天妒英才，在这里也先缅怀一下，同时也感谢他在视音频领域以及 `FFmpeg` 解析上做出的贡献。\n***\n我们先了解一下视频播放的流程，这里主要参考的是雷神的文章，[[总结]视音频编解码技术零基础学习方法](http://blog.csdn.net/leixiaohua1020/article/details/18893769) 。过程见下图（图片同样来自雷神的文章，红色框框是我注解的）。\n\n<!--more-->\n\n![20140201120523046.jpeg](http://upload-images.jianshu.io/upload_images/606479-78a134f68de545b8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>播放一个互联网上的视频文件，需要经过以下几个步骤：解协议，解封装，解码视音频，视音频同步。\n如果播放本地文件则不需要解协议，为以下几个步骤：解封装，解码视音频，视音频同步。\n\n关于每个步骤的含义还是去雷神的文章去看，这里就不啰嗦了。\n\n本文重点讨论的是解封装、解码视频。对于音频的处理先不管。\n\n> **解码**的作用，就是将视频/音频压缩编码数据，解码成为非压缩的视频/音频原始数据。音频的压缩编码标准包含AAC，MP3，AC-3等等，视频的压缩编码标准则包含H.264，MPEG2，VC-1等等。解码是整个系统中最重要也是最复杂的一个环节。通过解码，压缩编码的视频数据输出成为非压缩的颜色数据，例如YUV420P，RGB等等；压缩编码的音频数据输出成为非压缩的音频抽样数据，例如PCM数据。\n\n好了，说了这么多理论，说点实在的。 `FFmpeg` 解码流程所需要调用的 `API` 依次为：\n\n```\n开始—->\nav_register_all();\navformat_open_input()；\nav_find_stream_info();\nav_find_best_stream();\navcodec_find_decoder();\nwhile(av_read_frame()) {\n    获取到packet—->\n    avcodec_send_packet();\n    avcodec_receive_frame();\n    获取到frame\n}\n```\n\n上面的流程参考 [笔谈FFmpeg（一）](http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/)，其中有几个函数弃用了，所以我更新了一下。\n\n简单的说一下更新的几个函数，其他的网上介绍的很多了，后面我也会推荐几篇文章。\n\n* `av_find_best_stream()`：\n\n之前用的都是这样的方法：  `穷举所有的流，查找其中种类为CODEC_TYPE_VIDEO` 。所以看别人的文章会有个 `while` 的循环。\n\n* `avcodec_send_packet();avcodec_receive_frame();`：\n\n之前用的是 `avcodec_decode_video2()` 。后来 `FFmpeg` 把函数拆分了。\n\n* 还有个需要注意的，`avcodec_find_decoder();` 步骤中所用到的也有所变动。下面是以前的用法：\n\n```\npCodecCtx = pFormatCtx->streams[videoindex]->codec;  \npCodec = avcodec_find_decoder(pCodecCtx->codec_id);  \n```\n下面是变动之后的用法：\n\n```\npCodecCtx = avcodec_alloc_context3(NULL);\navcodec_parameters_to_context(pCodecCtx, pFormatCtx->streams[videoStream]->codecpar);\npCodec = avcodec_find_decoder(pCodecCtx->codec_id);\n```\n通过以上的步骤，获取到 `frame` 数据就是解码后的原始视频数据。后面我们的存储或者播放也都是基于这个数据的。\n***\n#### 参考文章列表：\n*  [100行代码实现最简单的基于FFMPEG+SDL的视频播放器（SDL1.x）](http://blog.csdn.net/leixiaohua1020/article/details/8652605)  作者：[雷霄骅](http://my.csdn.net/leixiaohua1020)\n\n*  [笔谈FFmpeg（一）](http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/) 作者：[Minmin.Sun](http://depthlove.github.io/)\n\n*  [ffmpeg解码流程](http://blog.csdn.net/ownwell/article/details/8113980) 作者：[cyning4星运](http://my.csdn.net/ownWell)","source":"_posts/FFmpeg解码流程.md","raw":"---\ntitle: FFmpeg解码流程\ndate: 2016-09-30 20:11:56\ntags: \n\t- FFmpeg\ncategories:\n\t- FFmpeg\n\n---\n\n## 以下系列文章基于FFmpeg 3.1.1和Xcode8。\n\n\n#### [FFmpeg iOS库编译与集成](http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/)\n\n#### [FFmpeg解码流程](http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/)\n\n***\n\n学习 `FFmpeg` ，就不得不提到一位大神，就是 [雷霄骅](http://my.csdn.net/leixiaohua1020)，可惜天妒英才，在这里也先缅怀一下，同时也感谢他在视音频领域以及 `FFmpeg` 解析上做出的贡献。\n***\n我们先了解一下视频播放的流程，这里主要参考的是雷神的文章，[[总结]视音频编解码技术零基础学习方法](http://blog.csdn.net/leixiaohua1020/article/details/18893769) 。过程见下图（图片同样来自雷神的文章，红色框框是我注解的）。\n\n<!--more-->\n\n![20140201120523046.jpeg](http://upload-images.jianshu.io/upload_images/606479-78a134f68de545b8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>播放一个互联网上的视频文件，需要经过以下几个步骤：解协议，解封装，解码视音频，视音频同步。\n如果播放本地文件则不需要解协议，为以下几个步骤：解封装，解码视音频，视音频同步。\n\n关于每个步骤的含义还是去雷神的文章去看，这里就不啰嗦了。\n\n本文重点讨论的是解封装、解码视频。对于音频的处理先不管。\n\n> **解码**的作用，就是将视频/音频压缩编码数据，解码成为非压缩的视频/音频原始数据。音频的压缩编码标准包含AAC，MP3，AC-3等等，视频的压缩编码标准则包含H.264，MPEG2，VC-1等等。解码是整个系统中最重要也是最复杂的一个环节。通过解码，压缩编码的视频数据输出成为非压缩的颜色数据，例如YUV420P，RGB等等；压缩编码的音频数据输出成为非压缩的音频抽样数据，例如PCM数据。\n\n好了，说了这么多理论，说点实在的。 `FFmpeg` 解码流程所需要调用的 `API` 依次为：\n\n```\n开始—->\nav_register_all();\navformat_open_input()；\nav_find_stream_info();\nav_find_best_stream();\navcodec_find_decoder();\nwhile(av_read_frame()) {\n    获取到packet—->\n    avcodec_send_packet();\n    avcodec_receive_frame();\n    获取到frame\n}\n```\n\n上面的流程参考 [笔谈FFmpeg（一）](http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/)，其中有几个函数弃用了，所以我更新了一下。\n\n简单的说一下更新的几个函数，其他的网上介绍的很多了，后面我也会推荐几篇文章。\n\n* `av_find_best_stream()`：\n\n之前用的都是这样的方法：  `穷举所有的流，查找其中种类为CODEC_TYPE_VIDEO` 。所以看别人的文章会有个 `while` 的循环。\n\n* `avcodec_send_packet();avcodec_receive_frame();`：\n\n之前用的是 `avcodec_decode_video2()` 。后来 `FFmpeg` 把函数拆分了。\n\n* 还有个需要注意的，`avcodec_find_decoder();` 步骤中所用到的也有所变动。下面是以前的用法：\n\n```\npCodecCtx = pFormatCtx->streams[videoindex]->codec;  \npCodec = avcodec_find_decoder(pCodecCtx->codec_id);  \n```\n下面是变动之后的用法：\n\n```\npCodecCtx = avcodec_alloc_context3(NULL);\navcodec_parameters_to_context(pCodecCtx, pFormatCtx->streams[videoStream]->codecpar);\npCodec = avcodec_find_decoder(pCodecCtx->codec_id);\n```\n通过以上的步骤，获取到 `frame` 数据就是解码后的原始视频数据。后面我们的存储或者播放也都是基于这个数据的。\n***\n#### 参考文章列表：\n*  [100行代码实现最简单的基于FFMPEG+SDL的视频播放器（SDL1.x）](http://blog.csdn.net/leixiaohua1020/article/details/8652605)  作者：[雷霄骅](http://my.csdn.net/leixiaohua1020)\n\n*  [笔谈FFmpeg（一）](http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/) 作者：[Minmin.Sun](http://depthlove.github.io/)\n\n*  [ffmpeg解码流程](http://blog.csdn.net/ownwell/article/details/8113980) 作者：[cyning4星运](http://my.csdn.net/ownWell)","slug":"FFmpeg解码流程","published":1,"updated":"2021-08-27T13:34:42.820Z","_id":"cksu5b14c00098c204ar63cjp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"以下系列文章基于FFmpeg-3-1-1和Xcode8。\"><a href=\"#以下系列文章基于FFmpeg-3-1-1和Xcode8。\" class=\"headerlink\" title=\"以下系列文章基于FFmpeg 3.1.1和Xcode8。\"></a>以下系列文章基于FFmpeg 3.1.1和Xcode8。</h2><h4 id=\"FFmpeg-iOS库编译与集成\"><a href=\"#FFmpeg-iOS库编译与集成\" class=\"headerlink\" title=\"FFmpeg iOS库编译与集成\"></a><a href=\"http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/\">FFmpeg iOS库编译与集成</a></h4><h4 id=\"FFmpeg解码流程\"><a href=\"#FFmpeg解码流程\" class=\"headerlink\" title=\"FFmpeg解码流程\"></a><a href=\"http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/\">FFmpeg解码流程</a></h4><hr>\n<p>学习 <code>FFmpeg</code> ，就不得不提到一位大神，就是 <a href=\"http://my.csdn.net/leixiaohua1020\">雷霄骅</a>，可惜天妒英才，在这里也先缅怀一下，同时也感谢他在视音频领域以及 <code>FFmpeg</code> 解析上做出的贡献。</p>\n<hr>\n<p>我们先了解一下视频播放的流程，这里主要参考的是雷神的文章，<a href=\"http://blog.csdn.net/leixiaohua1020/article/details/18893769\">[总结]视音频编解码技术零基础学习方法</a> 。过程见下图（图片同样来自雷神的文章，红色框框是我注解的）。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-78a134f68de545b8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20140201120523046.jpeg\"></p>\n<blockquote>\n<p>播放一个互联网上的视频文件，需要经过以下几个步骤：解协议，解封装，解码视音频，视音频同步。<br>如果播放本地文件则不需要解协议，为以下几个步骤：解封装，解码视音频，视音频同步。</p>\n</blockquote>\n<p>关于每个步骤的含义还是去雷神的文章去看，这里就不啰嗦了。</p>\n<p>本文重点讨论的是解封装、解码视频。对于音频的处理先不管。</p>\n<blockquote>\n<p><strong>解码</strong>的作用，就是将视频/音频压缩编码数据，解码成为非压缩的视频/音频原始数据。音频的压缩编码标准包含AAC，MP3，AC-3等等，视频的压缩编码标准则包含H.264，MPEG2，VC-1等等。解码是整个系统中最重要也是最复杂的一个环节。通过解码，压缩编码的视频数据输出成为非压缩的颜色数据，例如YUV420P，RGB等等；压缩编码的音频数据输出成为非压缩的音频抽样数据，例如PCM数据。</p>\n</blockquote>\n<p>好了，说了这么多理论，说点实在的。 <code>FFmpeg</code> 解码流程所需要调用的 <code>API</code> 依次为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始—-&gt;</span><br><span class=\"line\">av_register_all();</span><br><span class=\"line\">avformat_open_input()；</span><br><span class=\"line\">av_find_stream_info();</span><br><span class=\"line\">av_find_best_stream();</span><br><span class=\"line\">avcodec_find_decoder();</span><br><span class=\"line\">while(av_read_frame()) &#123;</span><br><span class=\"line\">    获取到packet—-&gt;</span><br><span class=\"line\">    avcodec_send_packet();</span><br><span class=\"line\">    avcodec_receive_frame();</span><br><span class=\"line\">    获取到frame</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的流程参考 <a href=\"http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/\">笔谈FFmpeg（一）</a>，其中有几个函数弃用了，所以我更新了一下。</p>\n<p>简单的说一下更新的几个函数，其他的网上介绍的很多了，后面我也会推荐几篇文章。</p>\n<ul>\n<li><code>av_find_best_stream()</code>：</li>\n</ul>\n<p>之前用的都是这样的方法：  <code>穷举所有的流，查找其中种类为CODEC_TYPE_VIDEO</code> 。所以看别人的文章会有个 <code>while</code> 的循环。</p>\n<ul>\n<li><code>avcodec_send_packet();avcodec_receive_frame();</code>：</li>\n</ul>\n<p>之前用的是 <code>avcodec_decode_video2()</code> 。后来 <code>FFmpeg</code> 把函数拆分了。</p>\n<ul>\n<li>还有个需要注意的，<code>avcodec_find_decoder();</code> 步骤中所用到的也有所变动。下面是以前的用法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pCodecCtx = pFormatCtx-&gt;streams[videoindex]-&gt;codec;  </span><br><span class=\"line\">pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);  </span><br></pre></td></tr></table></figure>\n<p>下面是变动之后的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pCodecCtx = avcodec_alloc_context3(NULL);</span><br><span class=\"line\">avcodec_parameters_to_context(pCodecCtx, pFormatCtx-&gt;streams[videoStream]-&gt;codecpar);</span><br><span class=\"line\">pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br></pre></td></tr></table></figure>\n<p>通过以上的步骤，获取到 <code>frame</code> 数据就是解码后的原始视频数据。后面我们的存储或者播放也都是基于这个数据的。</p>\n<hr>\n<h4 id=\"参考文章列表：\"><a href=\"#参考文章列表：\" class=\"headerlink\" title=\"参考文章列表：\"></a>参考文章列表：</h4><ul>\n<li><p> <a href=\"http://blog.csdn.net/leixiaohua1020/article/details/8652605\">100行代码实现最简单的基于FFMPEG+SDL的视频播放器（SDL1.x）</a>  作者：<a href=\"http://my.csdn.net/leixiaohua1020\">雷霄骅</a></p>\n</li>\n<li><p> <a href=\"http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/\">笔谈FFmpeg（一）</a> 作者：<a href=\"http://depthlove.github.io/\">Minmin.Sun</a></p>\n</li>\n<li><p> <a href=\"http://blog.csdn.net/ownwell/article/details/8113980\">ffmpeg解码流程</a> 作者：<a href=\"http://my.csdn.net/ownWell\">cyning4星运</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"以下系列文章基于FFmpeg-3-1-1和Xcode8。\"><a href=\"#以下系列文章基于FFmpeg-3-1-1和Xcode8。\" class=\"headerlink\" title=\"以下系列文章基于FFmpeg 3.1.1和Xcode8。\"></a>以下系列文章基于FFmpeg 3.1.1和Xcode8。</h2><h4 id=\"FFmpeg-iOS库编译与集成\"><a href=\"#FFmpeg-iOS库编译与集成\" class=\"headerlink\" title=\"FFmpeg iOS库编译与集成\"></a><a href=\"http://historyzhang.github.io/2016/09/26/FFmpeg%20iOS%E5%BA%93%E7%BC%96%E8%AF%91%E4%B8%8E%E9%9B%86%E6%88%90/\">FFmpeg iOS库编译与集成</a></h4><h4 id=\"FFmpeg解码流程\"><a href=\"#FFmpeg解码流程\" class=\"headerlink\" title=\"FFmpeg解码流程\"></a><a href=\"http://historyzhang.github.io/2016/09/30/FFmpeg%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/\">FFmpeg解码流程</a></h4><hr>\n<p>学习 <code>FFmpeg</code> ，就不得不提到一位大神，就是 <a href=\"http://my.csdn.net/leixiaohua1020\">雷霄骅</a>，可惜天妒英才，在这里也先缅怀一下，同时也感谢他在视音频领域以及 <code>FFmpeg</code> 解析上做出的贡献。</p>\n<hr>\n<p>我们先了解一下视频播放的流程，这里主要参考的是雷神的文章，<a href=\"http://blog.csdn.net/leixiaohua1020/article/details/18893769\">[总结]视音频编解码技术零基础学习方法</a> 。过程见下图（图片同样来自雷神的文章，红色框框是我注解的）。</p>","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-78a134f68de545b8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"20140201120523046.jpeg\"></p>\n<blockquote>\n<p>播放一个互联网上的视频文件，需要经过以下几个步骤：解协议，解封装，解码视音频，视音频同步。<br>如果播放本地文件则不需要解协议，为以下几个步骤：解封装，解码视音频，视音频同步。</p>\n</blockquote>\n<p>关于每个步骤的含义还是去雷神的文章去看，这里就不啰嗦了。</p>\n<p>本文重点讨论的是解封装、解码视频。对于音频的处理先不管。</p>\n<blockquote>\n<p><strong>解码</strong>的作用，就是将视频/音频压缩编码数据，解码成为非压缩的视频/音频原始数据。音频的压缩编码标准包含AAC，MP3，AC-3等等，视频的压缩编码标准则包含H.264，MPEG2，VC-1等等。解码是整个系统中最重要也是最复杂的一个环节。通过解码，压缩编码的视频数据输出成为非压缩的颜色数据，例如YUV420P，RGB等等；压缩编码的音频数据输出成为非压缩的音频抽样数据，例如PCM数据。</p>\n</blockquote>\n<p>好了，说了这么多理论，说点实在的。 <code>FFmpeg</code> 解码流程所需要调用的 <code>API</code> 依次为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始—-&gt;</span><br><span class=\"line\">av_register_all();</span><br><span class=\"line\">avformat_open_input()；</span><br><span class=\"line\">av_find_stream_info();</span><br><span class=\"line\">av_find_best_stream();</span><br><span class=\"line\">avcodec_find_decoder();</span><br><span class=\"line\">while(av_read_frame()) &#123;</span><br><span class=\"line\">    获取到packet—-&gt;</span><br><span class=\"line\">    avcodec_send_packet();</span><br><span class=\"line\">    avcodec_receive_frame();</span><br><span class=\"line\">    获取到frame</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的流程参考 <a href=\"http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/\">笔谈FFmpeg（一）</a>，其中有几个函数弃用了，所以我更新了一下。</p>\n<p>简单的说一下更新的几个函数，其他的网上介绍的很多了，后面我也会推荐几篇文章。</p>\n<ul>\n<li><code>av_find_best_stream()</code>：</li>\n</ul>\n<p>之前用的都是这样的方法：  <code>穷举所有的流，查找其中种类为CODEC_TYPE_VIDEO</code> 。所以看别人的文章会有个 <code>while</code> 的循环。</p>\n<ul>\n<li><code>avcodec_send_packet();avcodec_receive_frame();</code>：</li>\n</ul>\n<p>之前用的是 <code>avcodec_decode_video2()</code> 。后来 <code>FFmpeg</code> 把函数拆分了。</p>\n<ul>\n<li>还有个需要注意的，<code>avcodec_find_decoder();</code> 步骤中所用到的也有所变动。下面是以前的用法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pCodecCtx = pFormatCtx-&gt;streams[videoindex]-&gt;codec;  </span><br><span class=\"line\">pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);  </span><br></pre></td></tr></table></figure>\n<p>下面是变动之后的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pCodecCtx = avcodec_alloc_context3(NULL);</span><br><span class=\"line\">avcodec_parameters_to_context(pCodecCtx, pFormatCtx-&gt;streams[videoStream]-&gt;codecpar);</span><br><span class=\"line\">pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br></pre></td></tr></table></figure>\n<p>通过以上的步骤，获取到 <code>frame</code> 数据就是解码后的原始视频数据。后面我们的存储或者播放也都是基于这个数据的。</p>\n<hr>\n<h4 id=\"参考文章列表：\"><a href=\"#参考文章列表：\" class=\"headerlink\" title=\"参考文章列表：\"></a>参考文章列表：</h4><ul>\n<li><p> <a href=\"http://blog.csdn.net/leixiaohua1020/article/details/8652605\">100行代码实现最简单的基于FFMPEG+SDL的视频播放器（SDL1.x）</a>  作者：<a href=\"http://my.csdn.net/leixiaohua1020\">雷霄骅</a></p>\n</li>\n<li><p> <a href=\"http://depthlove.github.io/2015/04/27/talk-about-FFmpeg-part1/\">笔谈FFmpeg（一）</a> 作者：<a href=\"http://depthlove.github.io/\">Minmin.Sun</a></p>\n</li>\n<li><p> <a href=\"http://blog.csdn.net/ownwell/article/details/8113980\">ffmpeg解码流程</a> 作者：<a href=\"http://my.csdn.net/ownWell\">cyning4星运</a></p>\n</li>\n</ul>"},{"title":"Flutter初体验","date":"2019-01-26T05:55:40.000Z","_content":"\n\n> * 在我的`iPhone 8`上，列表滑动还是比较卡的。\n> * 用`VS Code`好像代码提示不够智能。\n> * 嵌套是真的醉了。\n\n# 开发环境搭建\n\n> 这里介绍的是`Mac`平台下的开发环境搭建，使用的`IDE`是`VS Code`。如果你使用的是`Windows`或`Linux`，可以查看[Flutter中文网](https://flutterchina.club/setup-windows/)上的介绍。\n\n<!--more-->\n\n## 安装`Flutter`\n\n```\ngit clone -b beta https://github.com/flutter/flutter.git\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置\nexport PATH=`pwd`/flutter/bin:$PATH\n```\n\n上面在命令行中设置的环境变量，只是针对当前的会话。所以我们需要将他们写道系统配置中。\n\n`open $HOME/.bash_profile`\n\n如果目录下不存在改文件，则手动创建一个。然后将下面的代码粘贴进去：\n\n```\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置\nexport PATH=PATH_TO_FLUTTER_GIT_DIRECTORY/flutter/bin:$PATH\n```\n其中`PATH_TO_FLUTTER_GIT_DIRECTORY`是你`clone`的`flutter`的目录，需要你自己替换掉。\n\n运行`source $HOME/.bash_profile`。\n\n> 注意: 如果你使用的是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ~/.zshrc ，在其中添加：source ~/.bash_profile\n\n## iOS设置\n\n```\nbrew update\nbrew install --HEAD libimobiledevice\nbrew install ideviceinstaller ios-deploy cocoapods\npod setup\n```\n如果你之前没有用过`cocoapods`，需要设置一下镜像。命令行中运行：\n\n```\ngem sources -l\n```\n\n查看当前使用的`RubyGems`源。\n\n```\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n```\n\n后面的`--remove`附带的参数将上一步查看到的源写上，然后再查看一下`RubyGems`源是否正确，确保如下所示：\n\n```\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.com/\n```\n\n如果还有其他关于`RubyGems`的问题，可以到 [https://gems.ruby-china.com/](https://gems.ruby-china.com/) 获得帮助。\n\n## 配置`VS Code`\n\n* 安装`VS Code`\n\n你可以去官网下载，然后安装。这里是[传送门](https://code.visualstudio.com/)。\n\n* 安装`Flutter`插件。\n\n打开后，点击左边侧边栏的插件按钮，搜索`Flutter`插件。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190119210415163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n第一个就是`Flutter`，安装`Flutter`同时会安装`Dart`插件，等安装完毕后，再`reload`一下就可以了。\n\n## 第一个`Flutter`工程\n打开你的`VS Code`，`View->Command Palette`，输入`flutter`并选择`Flutter: New Project`，输入一个工程名，就叫`hello_flutter`吧。\n\n> 名称只能是小写字母和下划线，是不是很变态啊。\n\n回车后选择一个目录，工程就创建好了。\n\n在`VS Code`下方的输出区域，给我们提供了`TERMINAL`功能，连接你的手机，在`TERMINAL`中敲下`flutter run`，就会看到正在编译了。完成后，就能在手机上看到你的第一个`flutter`应用了。\n\n> 这里需要先配置`Xcode`以及证书相关。\n\n至此，你就可以开启你的`flutter`之旅了。你可以按照[这篇文章](https://flutterchina.club/get-started/codelab/)来修改你的工程，创建一个列表来体验。\n\n##### 参考文章\n1. [`Flutter`中文网](https://flutterchina.club/)\n2. [`Flutter`不一样的跨平台解决方案](https://github.com/yang7229693/flutter-study/blob/master/post/1.%20Flutter%20%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md)\n","source":"_posts/Flutter初体验.md","raw":"---\ntitle: Flutter初体验\ndate: 2019-01-26 13:55:40\ntags: \n    - Flutter\ncategories:\n    - Flutter\n---\n\n\n> * 在我的`iPhone 8`上，列表滑动还是比较卡的。\n> * 用`VS Code`好像代码提示不够智能。\n> * 嵌套是真的醉了。\n\n# 开发环境搭建\n\n> 这里介绍的是`Mac`平台下的开发环境搭建，使用的`IDE`是`VS Code`。如果你使用的是`Windows`或`Linux`，可以查看[Flutter中文网](https://flutterchina.club/setup-windows/)上的介绍。\n\n<!--more-->\n\n## 安装`Flutter`\n\n```\ngit clone -b beta https://github.com/flutter/flutter.git\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置\nexport PATH=`pwd`/flutter/bin:$PATH\n```\n\n上面在命令行中设置的环境变量，只是针对当前的会话。所以我们需要将他们写道系统配置中。\n\n`open $HOME/.bash_profile`\n\n如果目录下不存在改文件，则手动创建一个。然后将下面的代码粘贴进去：\n\n```\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置\nexport PATH=PATH_TO_FLUTTER_GIT_DIRECTORY/flutter/bin:$PATH\n```\n其中`PATH_TO_FLUTTER_GIT_DIRECTORY`是你`clone`的`flutter`的目录，需要你自己替换掉。\n\n运行`source $HOME/.bash_profile`。\n\n> 注意: 如果你使用的是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ~/.zshrc ，在其中添加：source ~/.bash_profile\n\n## iOS设置\n\n```\nbrew update\nbrew install --HEAD libimobiledevice\nbrew install ideviceinstaller ios-deploy cocoapods\npod setup\n```\n如果你之前没有用过`cocoapods`，需要设置一下镜像。命令行中运行：\n\n```\ngem sources -l\n```\n\n查看当前使用的`RubyGems`源。\n\n```\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n```\n\n后面的`--remove`附带的参数将上一步查看到的源写上，然后再查看一下`RubyGems`源是否正确，确保如下所示：\n\n```\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://gems.ruby-china.com/\n```\n\n如果还有其他关于`RubyGems`的问题，可以到 [https://gems.ruby-china.com/](https://gems.ruby-china.com/) 获得帮助。\n\n## 配置`VS Code`\n\n* 安装`VS Code`\n\n你可以去官网下载，然后安装。这里是[传送门](https://code.visualstudio.com/)。\n\n* 安装`Flutter`插件。\n\n打开后，点击左边侧边栏的插件按钮，搜索`Flutter`插件。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190119210415163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n第一个就是`Flutter`，安装`Flutter`同时会安装`Dart`插件，等安装完毕后，再`reload`一下就可以了。\n\n## 第一个`Flutter`工程\n打开你的`VS Code`，`View->Command Palette`，输入`flutter`并选择`Flutter: New Project`，输入一个工程名，就叫`hello_flutter`吧。\n\n> 名称只能是小写字母和下划线，是不是很变态啊。\n\n回车后选择一个目录，工程就创建好了。\n\n在`VS Code`下方的输出区域，给我们提供了`TERMINAL`功能，连接你的手机，在`TERMINAL`中敲下`flutter run`，就会看到正在编译了。完成后，就能在手机上看到你的第一个`flutter`应用了。\n\n> 这里需要先配置`Xcode`以及证书相关。\n\n至此，你就可以开启你的`flutter`之旅了。你可以按照[这篇文章](https://flutterchina.club/get-started/codelab/)来修改你的工程，创建一个列表来体验。\n\n##### 参考文章\n1. [`Flutter`中文网](https://flutterchina.club/)\n2. [`Flutter`不一样的跨平台解决方案](https://github.com/yang7229693/flutter-study/blob/master/post/1.%20Flutter%20%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md)\n","slug":"Flutter初体验","published":1,"updated":"2021-08-27T13:34:42.820Z","_id":"cksu5b14f000d8c2025bp24bj","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<ul>\n<li>在我的<code>iPhone 8</code>上，列表滑动还是比较卡的。</li>\n<li>用<code>VS Code</code>好像代码提示不够智能。</li>\n<li>嵌套是真的醉了。</li>\n</ul>\n</blockquote>\n<h1 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h1><blockquote>\n<p>这里介绍的是<code>Mac</code>平台下的开发环境搭建，使用的<code>IDE</code>是<code>VS Code</code>。如果你使用的是<code>Windows</code>或<code>Linux</code>，可以查看<a href=\"https://flutterchina.club/setup-windows/\">Flutter中文网</a>上的介绍。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"安装Flutter\"><a href=\"#安装Flutter\" class=\"headerlink\" title=\"安装Flutter\"></a>安装<code>Flutter</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b beta https://github.com/flutter/flutter.git</span><br><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export PATH=`pwd`/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>上面在命令行中设置的环境变量，只是针对当前的会话。所以我们需要将他们写道系统配置中。</p>\n<p><code>open $HOME/.bash_profile</code></p>\n<p>如果目录下不存在改文件，则手动创建一个。然后将下面的代码粘贴进去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export PATH=PATH_TO_FLUTTER_GIT_DIRECTORY/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>其中<code>PATH_TO_FLUTTER_GIT_DIRECTORY</code>是你<code>clone</code>的<code>flutter</code>的目录，需要你自己替换掉。</p>\n<p>运行<code>source $HOME/.bash_profile</code>。</p>\n<blockquote>\n<p>注意: 如果你使用的是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ~/.zshrc ，在其中添加：source ~/.bash_profile</p>\n</blockquote>\n<h2 id=\"iOS设置\"><a href=\"#iOS设置\" class=\"headerlink\" title=\"iOS设置\"></a>iOS设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br><span class=\"line\">brew install --HEAD libimobiledevice</span><br><span class=\"line\">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class=\"line\">pod setup</span><br></pre></td></tr></table></figure>\n<p>如果你之前没有用过<code>cocoapods</code>，需要设置一下镜像。命令行中运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure>\n\n<p>查看当前使用的<code>RubyGems</code>源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n\n<p>后面的<code>--remove</code>附带的参数将上一步查看到的源写上，然后再查看一下<code>RubyGems</code>源是否正确，确保如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure>\n\n<p>如果还有其他关于<code>RubyGems</code>的问题，可以到 <a href=\"https://gems.ruby-china.com/\">https://gems.ruby-china.com/</a> 获得帮助。</p>\n<h2 id=\"配置VS-Code\"><a href=\"#配置VS-Code\" class=\"headerlink\" title=\"配置VS Code\"></a>配置<code>VS Code</code></h2><ul>\n<li>安装<code>VS Code</code></li>\n</ul>\n<p>你可以去官网下载，然后安装。这里是<a href=\"https://code.visualstudio.com/\">传送门</a>。</p>\n<ul>\n<li>安装<code>Flutter</code>插件。</li>\n</ul>\n<p>打开后，点击左边侧边栏的插件按钮，搜索<code>Flutter</code>插件。<br><img src=\"https://img-blog.csdnimg.cn/20190119210415163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>第一个就是<code>Flutter</code>，安装<code>Flutter</code>同时会安装<code>Dart</code>插件，等安装完毕后，再<code>reload</code>一下就可以了。</p>\n<h2 id=\"第一个Flutter工程\"><a href=\"#第一个Flutter工程\" class=\"headerlink\" title=\"第一个Flutter工程\"></a>第一个<code>Flutter</code>工程</h2><p>打开你的<code>VS Code</code>，<code>View-&gt;Command Palette</code>，输入<code>flutter</code>并选择<code>Flutter: New Project</code>，输入一个工程名，就叫<code>hello_flutter</code>吧。</p>\n<blockquote>\n<p>名称只能是小写字母和下划线，是不是很变态啊。</p>\n</blockquote>\n<p>回车后选择一个目录，工程就创建好了。</p>\n<p>在<code>VS Code</code>下方的输出区域，给我们提供了<code>TERMINAL</code>功能，连接你的手机，在<code>TERMINAL</code>中敲下<code>flutter run</code>，就会看到正在编译了。完成后，就能在手机上看到你的第一个<code>flutter</code>应用了。</p>\n<blockquote>\n<p>这里需要先配置<code>Xcode</code>以及证书相关。</p>\n</blockquote>\n<p>至此，你就可以开启你的<code>flutter</code>之旅了。你可以按照<a href=\"https://flutterchina.club/get-started/codelab/\">这篇文章</a>来修改你的工程，创建一个列表来体验。</p>\n<h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><ol>\n<li><a href=\"https://flutterchina.club/\"><code>Flutter</code>中文网</a></li>\n<li><a href=\"https://github.com/yang7229693/flutter-study/blob/master/post/1.%20Flutter%20%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md\"><code>Flutter</code>不一样的跨平台解决方案</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<ul>\n<li>在我的<code>iPhone 8</code>上，列表滑动还是比较卡的。</li>\n<li>用<code>VS Code</code>好像代码提示不够智能。</li>\n<li>嵌套是真的醉了。</li>\n</ul>\n</blockquote>\n<h1 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h1><blockquote>\n<p>这里介绍的是<code>Mac</code>平台下的开发环境搭建，使用的<code>IDE</code>是<code>VS Code</code>。如果你使用的是<code>Windows</code>或<code>Linux</code>，可以查看<a href=\"https://flutterchina.club/setup-windows/\">Flutter中文网</a>上的介绍。</p>\n</blockquote>","more":"<h2 id=\"安装Flutter\"><a href=\"#安装Flutter\" class=\"headerlink\" title=\"安装Flutter\"></a>安装<code>Flutter</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b beta https://github.com/flutter/flutter.git</span><br><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export PATH=`pwd`/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>上面在命令行中设置的环境变量，只是针对当前的会话。所以我们需要将他们写道系统配置中。</p>\n<p><code>open $HOME/.bash_profile</code></p>\n<p>如果目录下不存在改文件，则手动创建一个。然后将下面的代码粘贴进去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br><span class=\"line\">export PATH=PATH_TO_FLUTTER_GIT_DIRECTORY/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>其中<code>PATH_TO_FLUTTER_GIT_DIRECTORY</code>是你<code>clone</code>的<code>flutter</code>的目录，需要你自己替换掉。</p>\n<p>运行<code>source $HOME/.bash_profile</code>。</p>\n<blockquote>\n<p>注意: 如果你使用的是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ~/.zshrc ，在其中添加：source ~/.bash_profile</p>\n</blockquote>\n<h2 id=\"iOS设置\"><a href=\"#iOS设置\" class=\"headerlink\" title=\"iOS设置\"></a>iOS设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br><span class=\"line\">brew install --HEAD libimobiledevice</span><br><span class=\"line\">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class=\"line\">pod setup</span><br></pre></td></tr></table></figure>\n<p>如果你之前没有用过<code>cocoapods</code>，需要设置一下镜像。命令行中运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure>\n\n<p>查看当前使用的<code>RubyGems</code>源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n\n<p>后面的<code>--remove</code>附带的参数将上一步查看到的源写上，然后再查看一下<code>RubyGems</code>源是否正确，确保如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure>\n\n<p>如果还有其他关于<code>RubyGems</code>的问题，可以到 <a href=\"https://gems.ruby-china.com/\">https://gems.ruby-china.com/</a> 获得帮助。</p>\n<h2 id=\"配置VS-Code\"><a href=\"#配置VS-Code\" class=\"headerlink\" title=\"配置VS Code\"></a>配置<code>VS Code</code></h2><ul>\n<li>安装<code>VS Code</code></li>\n</ul>\n<p>你可以去官网下载，然后安装。这里是<a href=\"https://code.visualstudio.com/\">传送门</a>。</p>\n<ul>\n<li>安装<code>Flutter</code>插件。</li>\n</ul>\n<p>打开后，点击左边侧边栏的插件按钮，搜索<code>Flutter</code>插件。<br><img src=\"https://img-blog.csdnimg.cn/20190119210415163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>第一个就是<code>Flutter</code>，安装<code>Flutter</code>同时会安装<code>Dart</code>插件，等安装完毕后，再<code>reload</code>一下就可以了。</p>\n<h2 id=\"第一个Flutter工程\"><a href=\"#第一个Flutter工程\" class=\"headerlink\" title=\"第一个Flutter工程\"></a>第一个<code>Flutter</code>工程</h2><p>打开你的<code>VS Code</code>，<code>View-&gt;Command Palette</code>，输入<code>flutter</code>并选择<code>Flutter: New Project</code>，输入一个工程名，就叫<code>hello_flutter</code>吧。</p>\n<blockquote>\n<p>名称只能是小写字母和下划线，是不是很变态啊。</p>\n</blockquote>\n<p>回车后选择一个目录，工程就创建好了。</p>\n<p>在<code>VS Code</code>下方的输出区域，给我们提供了<code>TERMINAL</code>功能，连接你的手机，在<code>TERMINAL</code>中敲下<code>flutter run</code>，就会看到正在编译了。完成后，就能在手机上看到你的第一个<code>flutter</code>应用了。</p>\n<blockquote>\n<p>这里需要先配置<code>Xcode</code>以及证书相关。</p>\n</blockquote>\n<p>至此，你就可以开启你的<code>flutter</code>之旅了。你可以按照<a href=\"https://flutterchina.club/get-started/codelab/\">这篇文章</a>来修改你的工程，创建一个列表来体验。</p>\n<h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><ol>\n<li><a href=\"https://flutterchina.club/\"><code>Flutter</code>中文网</a></li>\n<li><a href=\"https://github.com/yang7229693/flutter-study/blob/master/post/1.%20Flutter%20%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md\"><code>Flutter</code>不一样的跨平台解决方案</a></li>\n</ol>"},{"title":"GeoHash系列 —— 一、基本介绍","date":"2015-08-26T01:47:41.000Z","_content":"\n系列文章\n\n[`GeoHash`系列 —— 一、基本介绍](http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/)\n\n[`GeoHash`系列 —— 二、算法步骤](http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/)\n\n# 引子\n\n目前很多的App都会使用到用户的地理位置信息，然后为用户提供相关服务，也就是我们所说的`LBS`。而`LBS`最基本的就是`附近`。所以就会有这样的一个问题：\n\n`什么样叫附近？`\n\n简单来说，附件就是以我为圆心，`radius`为半径画一个圆，圆内的都叫`附近`。\n\n然而事实并没有这么简单。比如我要在地图上找附近的餐馆，不可能说把所有的餐馆和我的距离都算一遍，然后和`radius`比较。\n\n稍微有点编程基础的应该都不会用这个办法。\n\n其实那么庞大的数据，只有一小部分是我们想要的，这样我们通过某种方法来过滤掉不要的餐馆，减少计算的量，就避免了上述方法的弊端。\n\n这样我们可以使用索引技术。\n\n<!--more-->\n一提到索引，大家脑子里马上浮现出B树索引，因为大量的数据库（如MySQL、oracle、PostgreSQL等）都在使用B树。B树索引本质上是对索引字段进行排序，然后通过类似二分查找的方法进行快速查找，即它要求索引的字段是可排序的，一般而言，可排序的是一维字段，比如时间、年龄、薪水等等。但是对于空间上的一个点（二维，包括经度和纬度），如何排序呢？又如何索引呢？解决的方法很多，下文介绍一种方法来解决这一问题。\n\n>思想：如果能通过某种方法将二维的点数据转换成一维的数据，那样不就可以继续使用B树索引了嘛。那这种方法真的存在嘛，答案是肯定的。目前很火的GeoHash算法就是运用了上述思想，下面我们就开始GeoHash之旅吧。\n\n# 基本介绍\n* `GeoHash`将二维的经纬度转换成字符串，每个字符串代表某一矩形区域。这样，矩形内所有的点（经纬度）都共享相同的`GeoHash`字符串，这样就比较容易做缓存。例如下图展示了北京9个区域的`GeoHash`字符串。例如左上角这个区域内的用户不断发送位置信息请求餐馆数据，由于这些用户的GeoHash字符串都是WX4ER，所以可以把`WX4ER`当作`key`，把该区域的餐馆信息当作`value`来进行缓存，而如果不使用`GeoHash`的话，由于区域内的用户传来的经纬度是各不相同的，很难做缓存。\n\n{% img /images/blog/geohash_1.jpg %}\n\n* 字符串越长，表示的范围越精确。5位的编码能表示10平方千米范围的矩形区域，而6位编码能表示更精细的区域（约0.34平方千米）。\n\n* 字符串相似的表示距离相近（特殊情况后文阐述），这样可以利用字符串的前缀匹配来查询附近的POI信息。如下两个图所示，一个在城区，一个在郊区，城区的`GeoHash`字符串之间比较相似，郊区的字符串之间也比较相似，而城区和郊区的`GeoHash`字符串相似程度要低些。\n\n{% img /images/blog/geohash_2.jpg %}\n\n通过上面的介绍我们知道了`GeoHash`就是一种将经纬度转换成字符串的方法，并且使得在大部分情况下，字符串前缀匹配越多的距离越近，回到我们的案例，根据所在位置查询来查询附近餐馆时，只需要将所在位置经纬度转换成`GeoHash`字符串，并与各个餐馆的`GeoHash`字符串进行前缀匹配，匹配越多的距离越近。\n\n# 下集预告\n\n`GeoHash`算法的步骤\n\n","source":"_posts/GeoHash系列 —— 一、基本介绍.markdown","raw":"---\ntitle: \"GeoHash系列 —— 一、基本介绍\"\ndate: 2015-08-26 09:47:41 +0800\ntags: \n\t- Geohash\ncategories:\n\t- Geohash系列\n---\n\n系列文章\n\n[`GeoHash`系列 —— 一、基本介绍](http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/)\n\n[`GeoHash`系列 —— 二、算法步骤](http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/)\n\n# 引子\n\n目前很多的App都会使用到用户的地理位置信息，然后为用户提供相关服务，也就是我们所说的`LBS`。而`LBS`最基本的就是`附近`。所以就会有这样的一个问题：\n\n`什么样叫附近？`\n\n简单来说，附件就是以我为圆心，`radius`为半径画一个圆，圆内的都叫`附近`。\n\n然而事实并没有这么简单。比如我要在地图上找附近的餐馆，不可能说把所有的餐馆和我的距离都算一遍，然后和`radius`比较。\n\n稍微有点编程基础的应该都不会用这个办法。\n\n其实那么庞大的数据，只有一小部分是我们想要的，这样我们通过某种方法来过滤掉不要的餐馆，减少计算的量，就避免了上述方法的弊端。\n\n这样我们可以使用索引技术。\n\n<!--more-->\n一提到索引，大家脑子里马上浮现出B树索引，因为大量的数据库（如MySQL、oracle、PostgreSQL等）都在使用B树。B树索引本质上是对索引字段进行排序，然后通过类似二分查找的方法进行快速查找，即它要求索引的字段是可排序的，一般而言，可排序的是一维字段，比如时间、年龄、薪水等等。但是对于空间上的一个点（二维，包括经度和纬度），如何排序呢？又如何索引呢？解决的方法很多，下文介绍一种方法来解决这一问题。\n\n>思想：如果能通过某种方法将二维的点数据转换成一维的数据，那样不就可以继续使用B树索引了嘛。那这种方法真的存在嘛，答案是肯定的。目前很火的GeoHash算法就是运用了上述思想，下面我们就开始GeoHash之旅吧。\n\n# 基本介绍\n* `GeoHash`将二维的经纬度转换成字符串，每个字符串代表某一矩形区域。这样，矩形内所有的点（经纬度）都共享相同的`GeoHash`字符串，这样就比较容易做缓存。例如下图展示了北京9个区域的`GeoHash`字符串。例如左上角这个区域内的用户不断发送位置信息请求餐馆数据，由于这些用户的GeoHash字符串都是WX4ER，所以可以把`WX4ER`当作`key`，把该区域的餐馆信息当作`value`来进行缓存，而如果不使用`GeoHash`的话，由于区域内的用户传来的经纬度是各不相同的，很难做缓存。\n\n{% img /images/blog/geohash_1.jpg %}\n\n* 字符串越长，表示的范围越精确。5位的编码能表示10平方千米范围的矩形区域，而6位编码能表示更精细的区域（约0.34平方千米）。\n\n* 字符串相似的表示距离相近（特殊情况后文阐述），这样可以利用字符串的前缀匹配来查询附近的POI信息。如下两个图所示，一个在城区，一个在郊区，城区的`GeoHash`字符串之间比较相似，郊区的字符串之间也比较相似，而城区和郊区的`GeoHash`字符串相似程度要低些。\n\n{% img /images/blog/geohash_2.jpg %}\n\n通过上面的介绍我们知道了`GeoHash`就是一种将经纬度转换成字符串的方法，并且使得在大部分情况下，字符串前缀匹配越多的距离越近，回到我们的案例，根据所在位置查询来查询附近餐馆时，只需要将所在位置经纬度转换成`GeoHash`字符串，并与各个餐馆的`GeoHash`字符串进行前缀匹配，匹配越多的距离越近。\n\n# 下集预告\n\n`GeoHash`算法的步骤\n\n","slug":"GeoHash系列 —— 一、基本介绍","published":1,"updated":"2021-08-27T13:34:42.820Z","_id":"cksu5b14g000e8c200hk4eu5e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>系列文章</p>\n<p><a href=\"http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/\"><code>GeoHash</code>系列 —— 一、基本介绍</a></p>\n<p><a href=\"http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/\"><code>GeoHash</code>系列 —— 二、算法步骤</a></p>\n<h1 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h1><p>目前很多的App都会使用到用户的地理位置信息，然后为用户提供相关服务，也就是我们所说的<code>LBS</code>。而<code>LBS</code>最基本的就是<code>附近</code>。所以就会有这样的一个问题：</p>\n<p><code>什么样叫附近？</code></p>\n<p>简单来说，附件就是以我为圆心，<code>radius</code>为半径画一个圆，圆内的都叫<code>附近</code>。</p>\n<p>然而事实并没有这么简单。比如我要在地图上找附近的餐馆，不可能说把所有的餐馆和我的距离都算一遍，然后和<code>radius</code>比较。</p>\n<p>稍微有点编程基础的应该都不会用这个办法。</p>\n<p>其实那么庞大的数据，只有一小部分是我们想要的，这样我们通过某种方法来过滤掉不要的餐馆，减少计算的量，就避免了上述方法的弊端。</p>\n<p>这样我们可以使用索引技术。</p>\n<span id=\"more\"></span>\n<p>一提到索引，大家脑子里马上浮现出B树索引，因为大量的数据库（如MySQL、oracle、PostgreSQL等）都在使用B树。B树索引本质上是对索引字段进行排序，然后通过类似二分查找的方法进行快速查找，即它要求索引的字段是可排序的，一般而言，可排序的是一维字段，比如时间、年龄、薪水等等。但是对于空间上的一个点（二维，包括经度和纬度），如何排序呢？又如何索引呢？解决的方法很多，下文介绍一种方法来解决这一问题。</p>\n<blockquote>\n<p>思想：如果能通过某种方法将二维的点数据转换成一维的数据，那样不就可以继续使用B树索引了嘛。那这种方法真的存在嘛，答案是肯定的。目前很火的GeoHash算法就是运用了上述思想，下面我们就开始GeoHash之旅吧。</p>\n</blockquote>\n<h1 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h1><ul>\n<li><code>GeoHash</code>将二维的经纬度转换成字符串，每个字符串代表某一矩形区域。这样，矩形内所有的点（经纬度）都共享相同的<code>GeoHash</code>字符串，这样就比较容易做缓存。例如下图展示了北京9个区域的<code>GeoHash</code>字符串。例如左上角这个区域内的用户不断发送位置信息请求餐馆数据，由于这些用户的GeoHash字符串都是WX4ER，所以可以把<code>WX4ER</code>当作<code>key</code>，把该区域的餐馆信息当作<code>value</code>来进行缓存，而如果不使用<code>GeoHash</code>的话，由于区域内的用户传来的经纬度是各不相同的，很难做缓存。</li>\n</ul>\n<img src=\"/images/blog/geohash_1.jpg\" class=\"\">\n\n<ul>\n<li><p>字符串越长，表示的范围越精确。5位的编码能表示10平方千米范围的矩形区域，而6位编码能表示更精细的区域（约0.34平方千米）。</p>\n</li>\n<li><p>字符串相似的表示距离相近（特殊情况后文阐述），这样可以利用字符串的前缀匹配来查询附近的POI信息。如下两个图所示，一个在城区，一个在郊区，城区的<code>GeoHash</code>字符串之间比较相似，郊区的字符串之间也比较相似，而城区和郊区的<code>GeoHash</code>字符串相似程度要低些。</p>\n</li>\n</ul>\n<img src=\"/images/blog/geohash_2.jpg\" class=\"\">\n\n<p>通过上面的介绍我们知道了<code>GeoHash</code>就是一种将经纬度转换成字符串的方法，并且使得在大部分情况下，字符串前缀匹配越多的距离越近，回到我们的案例，根据所在位置查询来查询附近餐馆时，只需要将所在位置经纬度转换成<code>GeoHash</code>字符串，并与各个餐馆的<code>GeoHash</code>字符串进行前缀匹配，匹配越多的距离越近。</p>\n<h1 id=\"下集预告\"><a href=\"#下集预告\" class=\"headerlink\" title=\"下集预告\"></a>下集预告</h1><p><code>GeoHash</code>算法的步骤</p>\n","site":{"data":{}},"excerpt":"<p>系列文章</p>\n<p><a href=\"http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/\"><code>GeoHash</code>系列 —— 一、基本介绍</a></p>\n<p><a href=\"http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/\"><code>GeoHash</code>系列 —— 二、算法步骤</a></p>\n<h1 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h1><p>目前很多的App都会使用到用户的地理位置信息，然后为用户提供相关服务，也就是我们所说的<code>LBS</code>。而<code>LBS</code>最基本的就是<code>附近</code>。所以就会有这样的一个问题：</p>\n<p><code>什么样叫附近？</code></p>\n<p>简单来说，附件就是以我为圆心，<code>radius</code>为半径画一个圆，圆内的都叫<code>附近</code>。</p>\n<p>然而事实并没有这么简单。比如我要在地图上找附近的餐馆，不可能说把所有的餐馆和我的距离都算一遍，然后和<code>radius</code>比较。</p>\n<p>稍微有点编程基础的应该都不会用这个办法。</p>\n<p>其实那么庞大的数据，只有一小部分是我们想要的，这样我们通过某种方法来过滤掉不要的餐馆，减少计算的量，就避免了上述方法的弊端。</p>\n<p>这样我们可以使用索引技术。</p>","more":"<p>一提到索引，大家脑子里马上浮现出B树索引，因为大量的数据库（如MySQL、oracle、PostgreSQL等）都在使用B树。B树索引本质上是对索引字段进行排序，然后通过类似二分查找的方法进行快速查找，即它要求索引的字段是可排序的，一般而言，可排序的是一维字段，比如时间、年龄、薪水等等。但是对于空间上的一个点（二维，包括经度和纬度），如何排序呢？又如何索引呢？解决的方法很多，下文介绍一种方法来解决这一问题。</p>\n<blockquote>\n<p>思想：如果能通过某种方法将二维的点数据转换成一维的数据，那样不就可以继续使用B树索引了嘛。那这种方法真的存在嘛，答案是肯定的。目前很火的GeoHash算法就是运用了上述思想，下面我们就开始GeoHash之旅吧。</p>\n</blockquote>\n<h1 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h1><ul>\n<li><code>GeoHash</code>将二维的经纬度转换成字符串，每个字符串代表某一矩形区域。这样，矩形内所有的点（经纬度）都共享相同的<code>GeoHash</code>字符串，这样就比较容易做缓存。例如下图展示了北京9个区域的<code>GeoHash</code>字符串。例如左上角这个区域内的用户不断发送位置信息请求餐馆数据，由于这些用户的GeoHash字符串都是WX4ER，所以可以把<code>WX4ER</code>当作<code>key</code>，把该区域的餐馆信息当作<code>value</code>来进行缓存，而如果不使用<code>GeoHash</code>的话，由于区域内的用户传来的经纬度是各不相同的，很难做缓存。</li>\n</ul>\n<img src=\"/images/blog/geohash_1.jpg\" class=\"\">\n\n<ul>\n<li><p>字符串越长，表示的范围越精确。5位的编码能表示10平方千米范围的矩形区域，而6位编码能表示更精细的区域（约0.34平方千米）。</p>\n</li>\n<li><p>字符串相似的表示距离相近（特殊情况后文阐述），这样可以利用字符串的前缀匹配来查询附近的POI信息。如下两个图所示，一个在城区，一个在郊区，城区的<code>GeoHash</code>字符串之间比较相似，郊区的字符串之间也比较相似，而城区和郊区的<code>GeoHash</code>字符串相似程度要低些。</p>\n</li>\n</ul>\n<img src=\"/images/blog/geohash_2.jpg\" class=\"\">\n\n<p>通过上面的介绍我们知道了<code>GeoHash</code>就是一种将经纬度转换成字符串的方法，并且使得在大部分情况下，字符串前缀匹配越多的距离越近，回到我们的案例，根据所在位置查询来查询附近餐馆时，只需要将所在位置经纬度转换成<code>GeoHash</code>字符串，并与各个餐馆的<code>GeoHash</code>字符串进行前缀匹配，匹配越多的距离越近。</p>\n<h1 id=\"下集预告\"><a href=\"#下集预告\" class=\"headerlink\" title=\"下集预告\"></a>下集预告</h1><p><code>GeoHash</code>算法的步骤</p>"},{"title":"GeoHash系列 —— 二、算法步骤","date":"2015-08-27T08:37:58.000Z","_content":"\n系列文章\n\n[`GeoHash`系列 —— 一、基本介绍](http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/)\n\n[`GeoHash`系列 —— 二、算法步骤](http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/)\n\n# 上集回顾\n上一篇文章我们简单了了解了一下`GeoHash`的思想，你可以通过[这个链接](http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/)来查看上一篇文章。\n\n\n# 算法步骤\n\n以下以北海公园为例介绍`GeoHash`算法的计算步骤。\n\n{% img /images/blog/geohash_3.jpg %}\n\n* 根据经纬度计算`GeoHash`二进制编码\n\n地球纬度区间是`[-90,90]`， 北海公园的纬度是`39.928167`，可以通过下面算法对纬度`39.928167`进行逼近编码:\n\n1）区间[`-90,90]`进行二分为`[-90,0)`,`[0,90]`，称为左右区间，可以确定`39.928167`属于右区间`[0,90]`，给标记为`1`；\n\n2）接着将区间`[0,90]`进行二分为 `[0,45)`,`[45,90]`，可以确定`39.928167`属于左区间 `[0,45)`，给标记为`0`；\n\n3）递归上述过程`39.928167`总是属于某个区间`[a,b]`。随着每次迭代区间`[a,b]`总在缩小，并越来越逼近`39.928167`；\n\n4）如果给定的纬度`x（39.928167）`属于左区间，则记录`0`，如果属于右区间则记录`1`，这样随着算法的进行会产生一个序列`1011100`，序列的长度跟给定的区间划分次数有关。\n\n<!--more-->\n根据纬度算编码\n\n| bit        | min           | mid  | max |\n| :-------------: |:------------------:| :------------------:|:----------------:|\n| 1      | -90.000 | 0.000 |90.000|\n| 0      | 0.000      |   45.000 |90.000|\n| 1\t|0.000\t|22.500\t|45.000|\n|1|\t22.500|\t33.750|\t45.000|\n|1\t|33.7500\t|39.375\t|45.000|\n|0\t|39.375|\t42.188\t|45.000|\n|0\t|39.375|\t40.7815\t|42.188|\n|0\t|39.375|\t40.07825|\t40.7815|\n|1\t|39.375\t|39.726625|\t40.07825|\n|1\t|39.726625|\t39.9024375|\t40.07825|\n\n同理，地球经度区间是`[-180,180]`，可以对经度`116.389550`进行编码。\n\n|bit|\tmin\t|mid\t|max|\n| :-------------: |:------------------:| :------------------:|:--------------:|\n|1\t|-180\t|0.000\t|180|\n|1|\t0.000|\t90\t|180|\n|0\t|90\t|135|\t180|\n|1|\t90|\t112.5\t|135|\n|0\t|112.5|\t123.75\t|135|\n|0\t|112.5\t|118.125\t|123.75|\n|1\t|112.5\t|115.3125|\t118.125|\n|0\t|115.3125\t|116.71875\t|118.125|\n|1\t|115.3125\t|116.015625\t|116.71875|\n|1\t|116.015625\t|116.3671875\t|116.71875|\n\n* 组码\n\n通过上述计算，纬度产生的编码为`10111 00011`，经度产生的编码为`11010 01011`。偶数位放经度，奇数位放纬度，把2串编码组合生成新串：`11100 11101 00100 01111`。\n\n最后使用用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码，首先将`11100 11101 00100 01111`转成十进制，对应着`28、29、4、15`，十进制对应的编码就是`wx4g`。同理，将编码转换成经纬度的解码算法与之相反，具体不再赘述。\n\n{% img /images/blog/geohash_4.jpg %}\n\n# 编码长度与精度\n\n下表摘自维基百科：[http://en.wikipedia.org/wiki/Geohash](http://en.wikipedia.org/wiki/Geohash)\n\n以看出，当geohash base32编码长度为8时，精度在19米左右，而当编码长度为9时，精度在2米左右，编码长度需要根据数据情况进行选择。\n\n{% img /images/blog/geohash_5.jpg %}\n\n# 下集预告\n\n本篇主要说了一下将经纬度转化为字符串编码，下一节将解释一下上述做法的原理。","source":"_posts/GeoHash系列 —— 二、算法步骤.markdown","raw":"---\ntitle: \"GeoHash系列 —— 二、算法步骤\"\ndate: 2015-08-27 16:37:58 +0800\ntags: \n\t- Geohash\ncategories:\n\t- Geohash系列\n---\n\n系列文章\n\n[`GeoHash`系列 —— 一、基本介绍](http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/)\n\n[`GeoHash`系列 —— 二、算法步骤](http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/)\n\n# 上集回顾\n上一篇文章我们简单了了解了一下`GeoHash`的思想，你可以通过[这个链接](http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/)来查看上一篇文章。\n\n\n# 算法步骤\n\n以下以北海公园为例介绍`GeoHash`算法的计算步骤。\n\n{% img /images/blog/geohash_3.jpg %}\n\n* 根据经纬度计算`GeoHash`二进制编码\n\n地球纬度区间是`[-90,90]`， 北海公园的纬度是`39.928167`，可以通过下面算法对纬度`39.928167`进行逼近编码:\n\n1）区间[`-90,90]`进行二分为`[-90,0)`,`[0,90]`，称为左右区间，可以确定`39.928167`属于右区间`[0,90]`，给标记为`1`；\n\n2）接着将区间`[0,90]`进行二分为 `[0,45)`,`[45,90]`，可以确定`39.928167`属于左区间 `[0,45)`，给标记为`0`；\n\n3）递归上述过程`39.928167`总是属于某个区间`[a,b]`。随着每次迭代区间`[a,b]`总在缩小，并越来越逼近`39.928167`；\n\n4）如果给定的纬度`x（39.928167）`属于左区间，则记录`0`，如果属于右区间则记录`1`，这样随着算法的进行会产生一个序列`1011100`，序列的长度跟给定的区间划分次数有关。\n\n<!--more-->\n根据纬度算编码\n\n| bit        | min           | mid  | max |\n| :-------------: |:------------------:| :------------------:|:----------------:|\n| 1      | -90.000 | 0.000 |90.000|\n| 0      | 0.000      |   45.000 |90.000|\n| 1\t|0.000\t|22.500\t|45.000|\n|1|\t22.500|\t33.750|\t45.000|\n|1\t|33.7500\t|39.375\t|45.000|\n|0\t|39.375|\t42.188\t|45.000|\n|0\t|39.375|\t40.7815\t|42.188|\n|0\t|39.375|\t40.07825|\t40.7815|\n|1\t|39.375\t|39.726625|\t40.07825|\n|1\t|39.726625|\t39.9024375|\t40.07825|\n\n同理，地球经度区间是`[-180,180]`，可以对经度`116.389550`进行编码。\n\n|bit|\tmin\t|mid\t|max|\n| :-------------: |:------------------:| :------------------:|:--------------:|\n|1\t|-180\t|0.000\t|180|\n|1|\t0.000|\t90\t|180|\n|0\t|90\t|135|\t180|\n|1|\t90|\t112.5\t|135|\n|0\t|112.5|\t123.75\t|135|\n|0\t|112.5\t|118.125\t|123.75|\n|1\t|112.5\t|115.3125|\t118.125|\n|0\t|115.3125\t|116.71875\t|118.125|\n|1\t|115.3125\t|116.015625\t|116.71875|\n|1\t|116.015625\t|116.3671875\t|116.71875|\n\n* 组码\n\n通过上述计算，纬度产生的编码为`10111 00011`，经度产生的编码为`11010 01011`。偶数位放经度，奇数位放纬度，把2串编码组合生成新串：`11100 11101 00100 01111`。\n\n最后使用用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码，首先将`11100 11101 00100 01111`转成十进制，对应着`28、29、4、15`，十进制对应的编码就是`wx4g`。同理，将编码转换成经纬度的解码算法与之相反，具体不再赘述。\n\n{% img /images/blog/geohash_4.jpg %}\n\n# 编码长度与精度\n\n下表摘自维基百科：[http://en.wikipedia.org/wiki/Geohash](http://en.wikipedia.org/wiki/Geohash)\n\n以看出，当geohash base32编码长度为8时，精度在19米左右，而当编码长度为9时，精度在2米左右，编码长度需要根据数据情况进行选择。\n\n{% img /images/blog/geohash_5.jpg %}\n\n# 下集预告\n\n本篇主要说了一下将经纬度转化为字符串编码，下一节将解释一下上述做法的原理。","slug":"GeoHash系列 —— 二、算法步骤","published":1,"updated":"2021-08-27T13:34:42.820Z","_id":"cksu5b14h000i8c20gvsygsuv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>系列文章</p>\n<p><a href=\"http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/\"><code>GeoHash</code>系列 —— 一、基本介绍</a></p>\n<p><a href=\"http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/\"><code>GeoHash</code>系列 —— 二、算法步骤</a></p>\n<h1 id=\"上集回顾\"><a href=\"#上集回顾\" class=\"headerlink\" title=\"上集回顾\"></a>上集回顾</h1><p>上一篇文章我们简单了了解了一下<code>GeoHash</code>的思想，你可以通过<a href=\"http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/\">这个链接</a>来查看上一篇文章。</p>\n<h1 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h1><p>以下以北海公园为例介绍<code>GeoHash</code>算法的计算步骤。</p>\n<img src=\"/images/blog/geohash_3.jpg\" class=\"\">\n\n<ul>\n<li>根据经纬度计算<code>GeoHash</code>二进制编码</li>\n</ul>\n<p>地球纬度区间是<code>[-90,90]</code>， 北海公园的纬度是<code>39.928167</code>，可以通过下面算法对纬度<code>39.928167</code>进行逼近编码:</p>\n<p>1）区间[<code>-90,90]</code>进行二分为<code>[-90,0)</code>,<code>[0,90]</code>，称为左右区间，可以确定<code>39.928167</code>属于右区间<code>[0,90]</code>，给标记为<code>1</code>；</p>\n<p>2）接着将区间<code>[0,90]</code>进行二分为 <code>[0,45)</code>,<code>[45,90]</code>，可以确定<code>39.928167</code>属于左区间 <code>[0,45)</code>，给标记为<code>0</code>；</p>\n<p>3）递归上述过程<code>39.928167</code>总是属于某个区间<code>[a,b]</code>。随着每次迭代区间<code>[a,b]</code>总在缩小，并越来越逼近<code>39.928167</code>；</p>\n<p>4）如果给定的纬度<code>x（39.928167）</code>属于左区间，则记录<code>0</code>，如果属于右区间则记录<code>1</code>，这样随着算法的进行会产生一个序列<code>1011100</code>，序列的长度跟给定的区间划分次数有关。</p>\n<span id=\"more\"></span>\n<p>根据纬度算编码</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">bit</th>\n<th align=\"center\">min</th>\n<th align=\"center\">mid</th>\n<th align=\"center\">max</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">-90.000</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">90.000</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">45.000</td>\n<td align=\"center\">90.000</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">22.500</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">22.500</td>\n<td align=\"center\">33.750</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">33.7500</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">42.188</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">40.7815</td>\n<td align=\"center\">42.188</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">40.07825</td>\n<td align=\"center\">40.7815</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">39.726625</td>\n<td align=\"center\">40.07825</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">39.726625</td>\n<td align=\"center\">39.9024375</td>\n<td align=\"center\">40.07825</td>\n</tr>\n</tbody></table>\n<p>同理，地球经度区间是<code>[-180,180]</code>，可以对经度<code>116.389550</code>进行编码。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">bit</th>\n<th align=\"center\">min</th>\n<th align=\"center\">mid</th>\n<th align=\"center\">max</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">-180</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">180</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">90</td>\n<td align=\"center\">180</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">90</td>\n<td align=\"center\">135</td>\n<td align=\"center\">180</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">90</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">135</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">123.75</td>\n<td align=\"center\">135</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">118.125</td>\n<td align=\"center\">123.75</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">115.3125</td>\n<td align=\"center\">118.125</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">115.3125</td>\n<td align=\"center\">116.71875</td>\n<td align=\"center\">118.125</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">115.3125</td>\n<td align=\"center\">116.015625</td>\n<td align=\"center\">116.71875</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">116.015625</td>\n<td align=\"center\">116.3671875</td>\n<td align=\"center\">116.71875</td>\n</tr>\n</tbody></table>\n<ul>\n<li>组码</li>\n</ul>\n<p>通过上述计算，纬度产生的编码为<code>10111 00011</code>，经度产生的编码为<code>11010 01011</code>。偶数位放经度，奇数位放纬度，把2串编码组合生成新串：<code>11100 11101 00100 01111</code>。</p>\n<p>最后使用用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码，首先将<code>11100 11101 00100 01111</code>转成十进制，对应着<code>28、29、4、15</code>，十进制对应的编码就是<code>wx4g</code>。同理，将编码转换成经纬度的解码算法与之相反，具体不再赘述。</p>\n<img src=\"/images/blog/geohash_4.jpg\" class=\"\">\n\n<h1 id=\"编码长度与精度\"><a href=\"#编码长度与精度\" class=\"headerlink\" title=\"编码长度与精度\"></a>编码长度与精度</h1><p>下表摘自维基百科：<a href=\"http://en.wikipedia.org/wiki/Geohash\">http://en.wikipedia.org/wiki/Geohash</a></p>\n<p>以看出，当geohash base32编码长度为8时，精度在19米左右，而当编码长度为9时，精度在2米左右，编码长度需要根据数据情况进行选择。</p>\n<img src=\"/images/blog/geohash_5.jpg\" class=\"\">\n\n<h1 id=\"下集预告\"><a href=\"#下集预告\" class=\"headerlink\" title=\"下集预告\"></a>下集预告</h1><p>本篇主要说了一下将经纬度转化为字符串编码，下一节将解释一下上述做法的原理。</p>\n","site":{"data":{}},"excerpt":"<p>系列文章</p>\n<p><a href=\"http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/\"><code>GeoHash</code>系列 —— 一、基本介绍</a></p>\n<p><a href=\"http://historyzhang.github.io/2015/08/27/2015-08-27-geohash-xi-lie-er-suan-fa-bu-zou/\"><code>GeoHash</code>系列 —— 二、算法步骤</a></p>\n<h1 id=\"上集回顾\"><a href=\"#上集回顾\" class=\"headerlink\" title=\"上集回顾\"></a>上集回顾</h1><p>上一篇文章我们简单了了解了一下<code>GeoHash</code>的思想，你可以通过<a href=\"http://historyzhang.github.io/2015/08/26/2015-08-26-geohash-xi-lie-zhi-yi-ji-ben-jie-shao/\">这个链接</a>来查看上一篇文章。</p>\n<h1 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h1><p>以下以北海公园为例介绍<code>GeoHash</code>算法的计算步骤。</p>\n<img src=\"/images/blog/geohash_3.jpg\" class=\"\">\n\n<ul>\n<li>根据经纬度计算<code>GeoHash</code>二进制编码</li>\n</ul>\n<p>地球纬度区间是<code>[-90,90]</code>， 北海公园的纬度是<code>39.928167</code>，可以通过下面算法对纬度<code>39.928167</code>进行逼近编码:</p>\n<p>1）区间[<code>-90,90]</code>进行二分为<code>[-90,0)</code>,<code>[0,90]</code>，称为左右区间，可以确定<code>39.928167</code>属于右区间<code>[0,90]</code>，给标记为<code>1</code>；</p>\n<p>2）接着将区间<code>[0,90]</code>进行二分为 <code>[0,45)</code>,<code>[45,90]</code>，可以确定<code>39.928167</code>属于左区间 <code>[0,45)</code>，给标记为<code>0</code>；</p>\n<p>3）递归上述过程<code>39.928167</code>总是属于某个区间<code>[a,b]</code>。随着每次迭代区间<code>[a,b]</code>总在缩小，并越来越逼近<code>39.928167</code>；</p>\n<p>4）如果给定的纬度<code>x（39.928167）</code>属于左区间，则记录<code>0</code>，如果属于右区间则记录<code>1</code>，这样随着算法的进行会产生一个序列<code>1011100</code>，序列的长度跟给定的区间划分次数有关。</p>","more":"<p>根据纬度算编码</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">bit</th>\n<th align=\"center\">min</th>\n<th align=\"center\">mid</th>\n<th align=\"center\">max</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">-90.000</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">90.000</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">45.000</td>\n<td align=\"center\">90.000</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">22.500</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">22.500</td>\n<td align=\"center\">33.750</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">33.7500</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">42.188</td>\n<td align=\"center\">45.000</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">40.7815</td>\n<td align=\"center\">42.188</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">40.07825</td>\n<td align=\"center\">40.7815</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">39.375</td>\n<td align=\"center\">39.726625</td>\n<td align=\"center\">40.07825</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">39.726625</td>\n<td align=\"center\">39.9024375</td>\n<td align=\"center\">40.07825</td>\n</tr>\n</tbody></table>\n<p>同理，地球经度区间是<code>[-180,180]</code>，可以对经度<code>116.389550</code>进行编码。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">bit</th>\n<th align=\"center\">min</th>\n<th align=\"center\">mid</th>\n<th align=\"center\">max</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">-180</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">180</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0.000</td>\n<td align=\"center\">90</td>\n<td align=\"center\">180</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">90</td>\n<td align=\"center\">135</td>\n<td align=\"center\">180</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">90</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">135</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">123.75</td>\n<td align=\"center\">135</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">118.125</td>\n<td align=\"center\">123.75</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">112.5</td>\n<td align=\"center\">115.3125</td>\n<td align=\"center\">118.125</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\">115.3125</td>\n<td align=\"center\">116.71875</td>\n<td align=\"center\">118.125</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">115.3125</td>\n<td align=\"center\">116.015625</td>\n<td align=\"center\">116.71875</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">116.015625</td>\n<td align=\"center\">116.3671875</td>\n<td align=\"center\">116.71875</td>\n</tr>\n</tbody></table>\n<ul>\n<li>组码</li>\n</ul>\n<p>通过上述计算，纬度产生的编码为<code>10111 00011</code>，经度产生的编码为<code>11010 01011</code>。偶数位放经度，奇数位放纬度，把2串编码组合生成新串：<code>11100 11101 00100 01111</code>。</p>\n<p>最后使用用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码，首先将<code>11100 11101 00100 01111</code>转成十进制，对应着<code>28、29、4、15</code>，十进制对应的编码就是<code>wx4g</code>。同理，将编码转换成经纬度的解码算法与之相反，具体不再赘述。</p>\n<img src=\"/images/blog/geohash_4.jpg\" class=\"\">\n\n<h1 id=\"编码长度与精度\"><a href=\"#编码长度与精度\" class=\"headerlink\" title=\"编码长度与精度\"></a>编码长度与精度</h1><p>下表摘自维基百科：<a href=\"http://en.wikipedia.org/wiki/Geohash\">http://en.wikipedia.org/wiki/Geohash</a></p>\n<p>以看出，当geohash base32编码长度为8时，精度在19米左右，而当编码长度为9时，精度在2米左右，编码长度需要根据数据情况进行选择。</p>\n<img src=\"/images/blog/geohash_5.jpg\" class=\"\">\n\n<h1 id=\"下集预告\"><a href=\"#下集预告\" class=\"headerlink\" title=\"下集预告\"></a>下集预告</h1><p>本篇主要说了一下将经纬度转化为字符串编码，下一节将解释一下上述做法的原理。</p>"},{"title":"GitHub Weekly-20190913","date":"2019-09-13T09:54:15.000Z","_content":"\n{% img /images/blog/GitHubWeekly-20190913//cover.jpg %}\n\n> 图片来自 泼辣有图 By 神奈川冲浪李\n\n<!--more-->\n\n# Starscream\n\n一个使用`Swift`编写的`WebSocket(RFC 6455)`库，支持`iOS` 和 `MacOS`。支持`delegate`和`closures`。\n\n项目地址：\n> [https://github.com/daltoniam/Starscream](https://github.com/daltoniam/Starscream)\n\n# mall\n\n`mall`项目致力于打造一个完整的电商系统，采用现阶段流行技术实现，包括前台商城系统及后台管理系统，基于`SpringBoot+MyBatis`实现。 前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。 后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。\n\n项目演示地址： \n> [http://39.98.190.128/index.html](http://39.98.190.128/index.html) \n\n{% img /images/blog/GitHubWeekly-20190913/mall-1.gif %}\n\n项目地址：\n> [https://github.com/macrozheng/mall](https://github.com/macrozheng/mall)\n\n# OpenArkCompiler\n\n`OpenArkCompiler` 是来自华为方舟编译器的开源项目。\n面向多设备、支持多语言的统一编程平台。\n\n项目地址：\n> [https://gitee.com/harmonyos/OpenArkCompiler](https://gitee.com/harmonyos/OpenArkCompiler)\n\n项目主页：\n> [https://www.openarkcompiler.cn/home](https://www.openarkcompiler.cn/home)\n\n# baidu-netdisk-downloaderx\n\n是否还在为百度网盘下载限速发愁？那这一款项目绝对可以尝试一下。`BND` 是一款图形界面的百度网盘不限速下载器，支持 `Windows`、`Linux` 和 `Mac`。\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-1.png %}\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-2.png %}\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-3.png %}\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-4.png %}\n\n项目地址：\n> [https://github.com/b3log/baidu-netdisk-downloaderx](https://github.com/b3log/baidu-netdisk-downloaderx)\n\n# HanLP\n\n`HanLP(Han Language Processing)`是一系列模型与算法组成的NLP工具包，由大快搜索主导并完全开源，目标是普及自然语言处理在生产环境中的应用。HanLP具备功能完善、性能高效、架构清晰、语料时新、可自定义的特点。\n\n项目地址：\n> [https://github.com/hankcs/HanLP](https://github.com/hankcs/HanLP)\n\n```\n这个缩写也是很Chinglish了。\n```\n\n# Lookin \n\n`Lookin` 是一款 macOS 软件，它可以查看与修改 `iOS App` 里的 `UI` 对象，类似于 `Xcode` 自带的 `UI Inspector` 工具，或另一款叫做 `Reveal` 的软件。\n\n{% img /images/blog/GitHubWeekly-20190913/lookin-1.jpg %}\n\n> [https://lookin.work/](https://lookin.work/)\n\n```\n免费的 Reveal 软件，良心之作。\n```","source":"_posts/GitHub-Weekly-20190913.md","raw":"---\ntitle: GitHub Weekly-20190913\ndate: 2019-09-13 17:54:15\ncategories:\n    - 源码\ntags: \n    - Github\n\n---\n\n{% img /images/blog/GitHubWeekly-20190913//cover.jpg %}\n\n> 图片来自 泼辣有图 By 神奈川冲浪李\n\n<!--more-->\n\n# Starscream\n\n一个使用`Swift`编写的`WebSocket(RFC 6455)`库，支持`iOS` 和 `MacOS`。支持`delegate`和`closures`。\n\n项目地址：\n> [https://github.com/daltoniam/Starscream](https://github.com/daltoniam/Starscream)\n\n# mall\n\n`mall`项目致力于打造一个完整的电商系统，采用现阶段流行技术实现，包括前台商城系统及后台管理系统，基于`SpringBoot+MyBatis`实现。 前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。 后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。\n\n项目演示地址： \n> [http://39.98.190.128/index.html](http://39.98.190.128/index.html) \n\n{% img /images/blog/GitHubWeekly-20190913/mall-1.gif %}\n\n项目地址：\n> [https://github.com/macrozheng/mall](https://github.com/macrozheng/mall)\n\n# OpenArkCompiler\n\n`OpenArkCompiler` 是来自华为方舟编译器的开源项目。\n面向多设备、支持多语言的统一编程平台。\n\n项目地址：\n> [https://gitee.com/harmonyos/OpenArkCompiler](https://gitee.com/harmonyos/OpenArkCompiler)\n\n项目主页：\n> [https://www.openarkcompiler.cn/home](https://www.openarkcompiler.cn/home)\n\n# baidu-netdisk-downloaderx\n\n是否还在为百度网盘下载限速发愁？那这一款项目绝对可以尝试一下。`BND` 是一款图形界面的百度网盘不限速下载器，支持 `Windows`、`Linux` 和 `Mac`。\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-1.png %}\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-2.png %}\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-3.png %}\n\n{% img /images/blog/GitHubWeekly-20190913/bnd-4.png %}\n\n项目地址：\n> [https://github.com/b3log/baidu-netdisk-downloaderx](https://github.com/b3log/baidu-netdisk-downloaderx)\n\n# HanLP\n\n`HanLP(Han Language Processing)`是一系列模型与算法组成的NLP工具包，由大快搜索主导并完全开源，目标是普及自然语言处理在生产环境中的应用。HanLP具备功能完善、性能高效、架构清晰、语料时新、可自定义的特点。\n\n项目地址：\n> [https://github.com/hankcs/HanLP](https://github.com/hankcs/HanLP)\n\n```\n这个缩写也是很Chinglish了。\n```\n\n# Lookin \n\n`Lookin` 是一款 macOS 软件，它可以查看与修改 `iOS App` 里的 `UI` 对象，类似于 `Xcode` 自带的 `UI Inspector` 工具，或另一款叫做 `Reveal` 的软件。\n\n{% img /images/blog/GitHubWeekly-20190913/lookin-1.jpg %}\n\n> [https://lookin.work/](https://lookin.work/)\n\n```\n免费的 Reveal 软件，良心之作。\n```","slug":"GitHub-Weekly-20190913","published":1,"updated":"2021-08-27T13:34:42.820Z","_id":"cksu5b14i000j8c206z6jbc3q","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/GitHubWeekly-20190913/cover.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图 By 神奈川冲浪李</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"Starscream\"><a href=\"#Starscream\" class=\"headerlink\" title=\"Starscream\"></a>Starscream</h1><p>一个使用<code>Swift</code>编写的<code>WebSocket(RFC 6455)</code>库，支持<code>iOS</code> 和 <code>MacOS</code>。支持<code>delegate</code>和<code>closures</code>。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/daltoniam/Starscream\">https://github.com/daltoniam/Starscream</a></p>\n</blockquote>\n<h1 id=\"mall\"><a href=\"#mall\" class=\"headerlink\" title=\"mall\"></a>mall</h1><p><code>mall</code>项目致力于打造一个完整的电商系统，采用现阶段流行技术实现，包括前台商城系统及后台管理系统，基于<code>SpringBoot+MyBatis</code>实现。 前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。 后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。</p>\n<p>项目演示地址： </p>\n<blockquote>\n<p><a href=\"http://39.98.190.128/index.html\">http://39.98.190.128/index.html</a> </p>\n</blockquote>\n<img src=\"/images/blog/GitHubWeekly-20190913/mall-1.gif\" class=\"\">\n\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/macrozheng/mall\">https://github.com/macrozheng/mall</a></p>\n</blockquote>\n<h1 id=\"OpenArkCompiler\"><a href=\"#OpenArkCompiler\" class=\"headerlink\" title=\"OpenArkCompiler\"></a>OpenArkCompiler</h1><p><code>OpenArkCompiler</code> 是来自华为方舟编译器的开源项目。<br>面向多设备、支持多语言的统一编程平台。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://gitee.com/harmonyos/OpenArkCompiler\">https://gitee.com/harmonyos/OpenArkCompiler</a></p>\n</blockquote>\n<p>项目主页：</p>\n<blockquote>\n<p><a href=\"https://www.openarkcompiler.cn/home\">https://www.openarkcompiler.cn/home</a></p>\n</blockquote>\n<h1 id=\"baidu-netdisk-downloaderx\"><a href=\"#baidu-netdisk-downloaderx\" class=\"headerlink\" title=\"baidu-netdisk-downloaderx\"></a>baidu-netdisk-downloaderx</h1><p>是否还在为百度网盘下载限速发愁？那这一款项目绝对可以尝试一下。<code>BND</code> 是一款图形界面的百度网盘不限速下载器，支持 <code>Windows</code>、<code>Linux</code> 和 <code>Mac</code>。</p>\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-1.png\" class=\"\">\n\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-2.png\" class=\"\">\n\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-3.png\" class=\"\">\n\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-4.png\" class=\"\">\n\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/b3log/baidu-netdisk-downloaderx\">https://github.com/b3log/baidu-netdisk-downloaderx</a></p>\n</blockquote>\n<h1 id=\"HanLP\"><a href=\"#HanLP\" class=\"headerlink\" title=\"HanLP\"></a>HanLP</h1><p><code>HanLP(Han Language Processing)</code>是一系列模型与算法组成的NLP工具包，由大快搜索主导并完全开源，目标是普及自然语言处理在生产环境中的应用。HanLP具备功能完善、性能高效、架构清晰、语料时新、可自定义的特点。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/hankcs/HanLP\">https://github.com/hankcs/HanLP</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个缩写也是很Chinglish了。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lookin\"><a href=\"#Lookin\" class=\"headerlink\" title=\"Lookin\"></a>Lookin</h1><p><code>Lookin</code> 是一款 macOS 软件，它可以查看与修改 <code>iOS App</code> 里的 <code>UI</code> 对象，类似于 <code>Xcode</code> 自带的 <code>UI Inspector</code> 工具，或另一款叫做 <code>Reveal</code> 的软件。</p>\n<img src=\"/images/blog/GitHubWeekly-20190913/lookin-1.jpg\" class=\"\">\n\n<blockquote>\n<p><a href=\"https://lookin.work/\">https://lookin.work/</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">免费的 Reveal 软件，良心之作。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<img src=\"/images/blog/GitHubWeekly-20190913/cover.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图 By 神奈川冲浪李</p>\n</blockquote>","more":"<h1 id=\"Starscream\"><a href=\"#Starscream\" class=\"headerlink\" title=\"Starscream\"></a>Starscream</h1><p>一个使用<code>Swift</code>编写的<code>WebSocket(RFC 6455)</code>库，支持<code>iOS</code> 和 <code>MacOS</code>。支持<code>delegate</code>和<code>closures</code>。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/daltoniam/Starscream\">https://github.com/daltoniam/Starscream</a></p>\n</blockquote>\n<h1 id=\"mall\"><a href=\"#mall\" class=\"headerlink\" title=\"mall\"></a>mall</h1><p><code>mall</code>项目致力于打造一个完整的电商系统，采用现阶段流行技术实现，包括前台商城系统及后台管理系统，基于<code>SpringBoot+MyBatis</code>实现。 前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。 后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。</p>\n<p>项目演示地址： </p>\n<blockquote>\n<p><a href=\"http://39.98.190.128/index.html\">http://39.98.190.128/index.html</a> </p>\n</blockquote>\n<img src=\"/images/blog/GitHubWeekly-20190913/mall-1.gif\" class=\"\">\n\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/macrozheng/mall\">https://github.com/macrozheng/mall</a></p>\n</blockquote>\n<h1 id=\"OpenArkCompiler\"><a href=\"#OpenArkCompiler\" class=\"headerlink\" title=\"OpenArkCompiler\"></a>OpenArkCompiler</h1><p><code>OpenArkCompiler</code> 是来自华为方舟编译器的开源项目。<br>面向多设备、支持多语言的统一编程平台。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://gitee.com/harmonyos/OpenArkCompiler\">https://gitee.com/harmonyos/OpenArkCompiler</a></p>\n</blockquote>\n<p>项目主页：</p>\n<blockquote>\n<p><a href=\"https://www.openarkcompiler.cn/home\">https://www.openarkcompiler.cn/home</a></p>\n</blockquote>\n<h1 id=\"baidu-netdisk-downloaderx\"><a href=\"#baidu-netdisk-downloaderx\" class=\"headerlink\" title=\"baidu-netdisk-downloaderx\"></a>baidu-netdisk-downloaderx</h1><p>是否还在为百度网盘下载限速发愁？那这一款项目绝对可以尝试一下。<code>BND</code> 是一款图形界面的百度网盘不限速下载器，支持 <code>Windows</code>、<code>Linux</code> 和 <code>Mac</code>。</p>\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-1.png\" class=\"\">\n\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-2.png\" class=\"\">\n\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-3.png\" class=\"\">\n\n<img src=\"/images/blog/GitHubWeekly-20190913/bnd-4.png\" class=\"\">\n\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/b3log/baidu-netdisk-downloaderx\">https://github.com/b3log/baidu-netdisk-downloaderx</a></p>\n</blockquote>\n<h1 id=\"HanLP\"><a href=\"#HanLP\" class=\"headerlink\" title=\"HanLP\"></a>HanLP</h1><p><code>HanLP(Han Language Processing)</code>是一系列模型与算法组成的NLP工具包，由大快搜索主导并完全开源，目标是普及自然语言处理在生产环境中的应用。HanLP具备功能完善、性能高效、架构清晰、语料时新、可自定义的特点。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/hankcs/HanLP\">https://github.com/hankcs/HanLP</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个缩写也是很Chinglish了。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lookin\"><a href=\"#Lookin\" class=\"headerlink\" title=\"Lookin\"></a>Lookin</h1><p><code>Lookin</code> 是一款 macOS 软件，它可以查看与修改 <code>iOS App</code> 里的 <code>UI</code> 对象，类似于 <code>Xcode</code> 自带的 <code>UI Inspector</code> 工具，或另一款叫做 <code>Reveal</code> 的软件。</p>\n<img src=\"/images/blog/GitHubWeekly-20190913/lookin-1.jpg\" class=\"\">\n\n<blockquote>\n<p><a href=\"https://lookin.work/\">https://lookin.work/</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">免费的 Reveal 软件，良心之作。</span><br></pre></td></tr></table></figure>"},{"title":"GitHubWeekly-20190921","date":"2019-09-14T09:20:26.000Z","_content":"\n{% img /images/blog/GitHubWeekly-20190913//cover.jpg %}\n\n> 图片来自 泼辣有图 By 神奈川冲浪李\n\n<!--more-->\n\n# next\n\n一套企业级中后台UI的解决方案，致力于解决设计师与前端在工作协同、产品体验一致性、开发效率方面的问题。\n\n项目地址：\n> [https://github.com/alibaba-fusion/next](https://github.com/alibaba-fusion/next)\n","source":"_posts/GitHubWeekly-20190921.md","raw":"---\ntitle: GitHubWeekly-20190921\ndate: 2019-09-14 17:20:26\ncategories:\n    - 源码\ntags: \n    - Github\n\n---\n\n{% img /images/blog/GitHubWeekly-20190913//cover.jpg %}\n\n> 图片来自 泼辣有图 By 神奈川冲浪李\n\n<!--more-->\n\n# next\n\n一套企业级中后台UI的解决方案，致力于解决设计师与前端在工作协同、产品体验一致性、开发效率方面的问题。\n\n项目地址：\n> [https://github.com/alibaba-fusion/next](https://github.com/alibaba-fusion/next)\n","slug":"GitHubWeekly-20190921","published":1,"updated":"2021-08-27T13:34:42.821Z","_id":"cksu5b14k000n8c20e8uz5x56","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/GitHubWeekly-20190913/cover.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图 By 神奈川冲浪李</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"next\"></a>next</h1><p>一套企业级中后台UI的解决方案，致力于解决设计师与前端在工作协同、产品体验一致性、开发效率方面的问题。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/alibaba-fusion/next\">https://github.com/alibaba-fusion/next</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/images/blog/GitHubWeekly-20190913/cover.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图 By 神奈川冲浪李</p>\n</blockquote>","more":"<h1 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"next\"></a>next</h1><p>一套企业级中后台UI的解决方案，致力于解决设计师与前端在工作协同、产品体验一致性、开发效率方面的问题。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/alibaba-fusion/next\">https://github.com/alibaba-fusion/next</a></p>\n</blockquote>"},{"title":"GitHub博客访问超慢解决","date":"2014-08-01T15:57:58.000Z","_content":"\n越来越发现博客访问速度超慢了,看了几篇博客说是`google`的问题,就把所有关于`google`的东西都删了,还是很慢.也参照过[唐巧](http://blog.devtang.com/)的技术博客[象写程序一样写博客：搭建基于github的博客](http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/)中:\n\n* 主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。\n* 修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。\n<!--more-->\n\n可是发现还是很慢.最终测试发现每次加载其实是由于在加载汉字时很慢,加载英文,图片和数字倒是很快,再参考网上所说还是觉得使用了`google`的字体.所以决定还是找个博客看一下他们的字体是怎么设置的.\n\n于是进入了[码农人生](http://msching.github.io)的`GitHub`主页,然后进入`source`分支,找到`msching.github.io / source / _includes / head.html`这个文件,打开后和我的文件对比,发现他主要修改了这里:\n\n\t\t<!--[good job! gfw]><script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script><!-->\n\t\t<script src=\"http://cdn.staticfile.org/jquery/1.9.1/jquery.min.js\"></script>\n\t\t<link href=\"/stylesheets/google-fonts.css\" rel=\"stylesheet\" type=\"text/css\">\n\n还写上了注释,于是无耻的偷了过来,不过要注意,第三行中的`.css`文件是本地的引用,在`/stylesheets/google-fonts.css`中,于是来到`msching.github.io / source / stylesheets / google-fonts.css`这里,拷贝下文件内容新建并保存到同样的目录下.\n\n大功告成,上传后试了下,果然速度大幅度提升.","source":"_posts/GitHub博客访问超慢解决.markdown","raw":"---\ntitle: \"GitHub博客访问超慢解决\"\ndate: 2014-08-01 23:57:58 +0800\ntags: \n    - 博客\ncategories:\n    - 杂谈\n\n\n---\n\n越来越发现博客访问速度超慢了,看了几篇博客说是`google`的问题,就把所有关于`google`的东西都删了,还是很慢.也参照过[唐巧](http://blog.devtang.com/)的技术博客[象写程序一样写博客：搭建基于github的博客](http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/)中:\n\n* 主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。\n* 修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。\n<!--more-->\n\n可是发现还是很慢.最终测试发现每次加载其实是由于在加载汉字时很慢,加载英文,图片和数字倒是很快,再参考网上所说还是觉得使用了`google`的字体.所以决定还是找个博客看一下他们的字体是怎么设置的.\n\n于是进入了[码农人生](http://msching.github.io)的`GitHub`主页,然后进入`source`分支,找到`msching.github.io / source / _includes / head.html`这个文件,打开后和我的文件对比,发现他主要修改了这里:\n\n\t\t<!--[good job! gfw]><script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script><!-->\n\t\t<script src=\"http://cdn.staticfile.org/jquery/1.9.1/jquery.min.js\"></script>\n\t\t<link href=\"/stylesheets/google-fonts.css\" rel=\"stylesheet\" type=\"text/css\">\n\n还写上了注释,于是无耻的偷了过来,不过要注意,第三行中的`.css`文件是本地的引用,在`/stylesheets/google-fonts.css`中,于是来到`msching.github.io / source / stylesheets / google-fonts.css`这里,拷贝下文件内容新建并保存到同样的目录下.\n\n大功告成,上传后试了下,果然速度大幅度提升.","slug":"GitHub博客访问超慢解决","published":1,"updated":"2021-08-27T13:34:42.821Z","_id":"cksu5b14l000p8c20dmkra20l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>越来越发现博客访问速度超慢了,看了几篇博客说是<code>google</code>的问题,就把所有关于<code>google</code>的东西都删了,还是很慢.也参照过<a href=\"http://blog.devtang.com/\">唐巧</a>的技术博客<a href=\"http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/\">象写程序一样写博客：搭建基于github的博客</a>中:</p>\n<ul>\n<li>主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</li>\n<li>修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。<span id=\"more\"></span></li>\n</ul>\n<p>可是发现还是很慢.最终测试发现每次加载其实是由于在加载汉字时很慢,加载英文,图片和数字倒是很快,再参考网上所说还是觉得使用了<code>google</code>的字体.所以决定还是找个博客看一下他们的字体是怎么设置的.</p>\n<p>于是进入了<a href=\"http://msching.github.io/\">码农人生</a>的<code>GitHub</code>主页,然后进入<code>source</code>分支,找到<code>msching.github.io / source / _includes / head.html</code>这个文件,打开后和我的文件对比,发现他主要修改了这里:</p>\n<pre><code>    &lt;!--[good job! gfw]&gt;&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;!--&gt;\n    &lt;script src=&quot;http://cdn.staticfile.org/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n    &lt;link href=&quot;/stylesheets/google-fonts.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n</code></pre>\n<p>还写上了注释,于是无耻的偷了过来,不过要注意,第三行中的<code>.css</code>文件是本地的引用,在<code>/stylesheets/google-fonts.css</code>中,于是来到<code>msching.github.io / source / stylesheets / google-fonts.css</code>这里,拷贝下文件内容新建并保存到同样的目录下.</p>\n<p>大功告成,上传后试了下,果然速度大幅度提升.</p>\n","site":{"data":{}},"excerpt":"<p>越来越发现博客访问速度超慢了,看了几篇博客说是<code>google</code>的问题,就把所有关于<code>google</code>的东西都删了,还是很慢.也参照过<a href=\"http://blog.devtang.com/\">唐巧</a>的技术博客<a href=\"http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/\">象写程序一样写博客：搭建基于github的博客</a>中:</p>\n<ul>\n<li>主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。 注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</li>\n<li>修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。","more":"</li>\n</ul>\n<p>可是发现还是很慢.最终测试发现每次加载其实是由于在加载汉字时很慢,加载英文,图片和数字倒是很快,再参考网上所说还是觉得使用了<code>google</code>的字体.所以决定还是找个博客看一下他们的字体是怎么设置的.</p>\n<p>于是进入了<a href=\"http://msching.github.io/\">码农人生</a>的<code>GitHub</code>主页,然后进入<code>source</code>分支,找到<code>msching.github.io / source / _includes / head.html</code>这个文件,打开后和我的文件对比,发现他主要修改了这里:</p>\n<pre><code>    &lt;!--[good job! gfw]&gt;&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;!--&gt;\n    &lt;script src=&quot;http://cdn.staticfile.org/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n    &lt;link href=&quot;/stylesheets/google-fonts.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n</code></pre>\n<p>还写上了注释,于是无耻的偷了过来,不过要注意,第三行中的<code>.css</code>文件是本地的引用,在<code>/stylesheets/google-fonts.css</code>中,于是来到<code>msching.github.io / source / stylesheets / google-fonts.css</code>这里,拷贝下文件内容新建并保存到同样的目录下.</p>\n<p>大功告成,上传后试了下,果然速度大幅度提升.</p>"},{"title":"GitHub标星14k+，这个项目既能学Python又能抢票","date":"2019-09-18T11:32:39.000Z","_content":"\n{% img /images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/cover.jpg %}\n\n\n> 图片来自 泼辣有图 By yaojinm5\n\n<!--more-->\n\n是不是每一次计划好的远行最终都因为一张火车票而终止？\n是不是每一次抢票都要发动朋友圈帮你加速？\n是不是每一次买票都是交给黄牛一笔服务费？\n这个项目告诉你，程序猿是如何抢票的。\n\n项目地址：\n>[https://github.com/testerSunshine/12306](https://github.com/testerSunshine/12306)\n\n# 功能盘点\n目前该项目已经支持以下功能：\n\n1. 自动打码\n2. 自动登录\n3. 准点预售和捡漏\n4. 智能候补\n5. 邮件通知\n6. `server`酱通知\n\n# 项目使用\n项目作者在`README`中详细介绍了整个项目的搭建方法，按照教程一步一步来，你一定可以搭建成功。\n另外作者还整理了一些项目搭建和使用过程中遇到的一些常见问题，可谓是用心良苦。\n\n# 项目学习\n作为一个合格的开源项目，除了可供大家使用，作者还提供给大家共同学习的机会。\n\n1. 作者把整个项目的思路画了出来，帮助大家更好的理解项目源码。\n\n{% img /images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/12306-1.png %}\n\n2. 作者创建了一堆的`QQ`群，供大家学习交流。由于项目太过火爆，目前只有`8`群尚未满员: `620629239` 。\n\n看到这里，你是不是已经跃跃欲试了呢？赶紧去仓库下载学习吧~\n\n> 补充一个`server`酱的文档地址：[http://sc.ftqq.com/3.version](http://sc.ftqq.com/3.version)","source":"_posts/GitHub标星14k+，这个项目既能学Python又能抢票.md","raw":"---\ntitle: GitHub标星14k+，这个项目既能学Python又能抢票\ndate: 2019-09-18 19:32:39\ncategories:\n    - 源码\ntags: \n    - Github\n\n---\n\n{% img /images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/cover.jpg %}\n\n\n> 图片来自 泼辣有图 By yaojinm5\n\n<!--more-->\n\n是不是每一次计划好的远行最终都因为一张火车票而终止？\n是不是每一次抢票都要发动朋友圈帮你加速？\n是不是每一次买票都是交给黄牛一笔服务费？\n这个项目告诉你，程序猿是如何抢票的。\n\n项目地址：\n>[https://github.com/testerSunshine/12306](https://github.com/testerSunshine/12306)\n\n# 功能盘点\n目前该项目已经支持以下功能：\n\n1. 自动打码\n2. 自动登录\n3. 准点预售和捡漏\n4. 智能候补\n5. 邮件通知\n6. `server`酱通知\n\n# 项目使用\n项目作者在`README`中详细介绍了整个项目的搭建方法，按照教程一步一步来，你一定可以搭建成功。\n另外作者还整理了一些项目搭建和使用过程中遇到的一些常见问题，可谓是用心良苦。\n\n# 项目学习\n作为一个合格的开源项目，除了可供大家使用，作者还提供给大家共同学习的机会。\n\n1. 作者把整个项目的思路画了出来，帮助大家更好的理解项目源码。\n\n{% img /images/blog/GitHub标星14k+，这个项目既能学Python又能抢票/12306-1.png %}\n\n2. 作者创建了一堆的`QQ`群，供大家学习交流。由于项目太过火爆，目前只有`8`群尚未满员: `620629239` 。\n\n看到这里，你是不是已经跃跃欲试了呢？赶紧去仓库下载学习吧~\n\n> 补充一个`server`酱的文档地址：[http://sc.ftqq.com/3.version](http://sc.ftqq.com/3.version)","slug":"GitHub标星14k+，这个项目既能学Python又能抢票","published":1,"updated":"2021-08-27T13:34:42.821Z","_id":"cksu5b14m000u8c208v63ge86","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/GitHub%E6%A0%87%E6%98%9F14k+%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%97%A2%E8%83%BD%E5%AD%A6Python%E5%8F%88%E8%83%BD%E6%8A%A2%E7%A5%A8/cover.jpg\" class=\"\">\n\n\n<blockquote>\n<p>图片来自 泼辣有图 By yaojinm5</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>是不是每一次计划好的远行最终都因为一张火车票而终止？<br>是不是每一次抢票都要发动朋友圈帮你加速？<br>是不是每一次买票都是交给黄牛一笔服务费？<br>这个项目告诉你，程序猿是如何抢票的。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/testerSunshine/12306\">https://github.com/testerSunshine/12306</a></p>\n</blockquote>\n<h1 id=\"功能盘点\"><a href=\"#功能盘点\" class=\"headerlink\" title=\"功能盘点\"></a>功能盘点</h1><p>目前该项目已经支持以下功能：</p>\n<ol>\n<li>自动打码</li>\n<li>自动登录</li>\n<li>准点预售和捡漏</li>\n<li>智能候补</li>\n<li>邮件通知</li>\n<li><code>server</code>酱通知</li>\n</ol>\n<h1 id=\"项目使用\"><a href=\"#项目使用\" class=\"headerlink\" title=\"项目使用\"></a>项目使用</h1><p>项目作者在<code>README</code>中详细介绍了整个项目的搭建方法，按照教程一步一步来，你一定可以搭建成功。<br>另外作者还整理了一些项目搭建和使用过程中遇到的一些常见问题，可谓是用心良苦。</p>\n<h1 id=\"项目学习\"><a href=\"#项目学习\" class=\"headerlink\" title=\"项目学习\"></a>项目学习</h1><p>作为一个合格的开源项目，除了可供大家使用，作者还提供给大家共同学习的机会。</p>\n<ol>\n<li>作者把整个项目的思路画了出来，帮助大家更好的理解项目源码。</li>\n</ol>\n<img src=\"/images/blog/GitHub%E6%A0%87%E6%98%9F14k+%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%97%A2%E8%83%BD%E5%AD%A6Python%E5%8F%88%E8%83%BD%E6%8A%A2%E7%A5%A8/12306-1.png\" class=\"\">\n\n<ol start=\"2\">\n<li>作者创建了一堆的<code>QQ</code>群，供大家学习交流。由于项目太过火爆，目前只有<code>8</code>群尚未满员: <code>620629239</code> 。</li>\n</ol>\n<p>看到这里，你是不是已经跃跃欲试了呢？赶紧去仓库下载学习吧~</p>\n<blockquote>\n<p>补充一个<code>server</code>酱的文档地址：<a href=\"http://sc.ftqq.com/3.version\">http://sc.ftqq.com/3.version</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/images/blog/GitHub%E6%A0%87%E6%98%9F14k+%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%97%A2%E8%83%BD%E5%AD%A6Python%E5%8F%88%E8%83%BD%E6%8A%A2%E7%A5%A8/cover.jpg\" class=\"\">\n\n\n<blockquote>\n<p>图片来自 泼辣有图 By yaojinm5</p>\n</blockquote>","more":"<p>是不是每一次计划好的远行最终都因为一张火车票而终止？<br>是不是每一次抢票都要发动朋友圈帮你加速？<br>是不是每一次买票都是交给黄牛一笔服务费？<br>这个项目告诉你，程序猿是如何抢票的。</p>\n<p>项目地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/testerSunshine/12306\">https://github.com/testerSunshine/12306</a></p>\n</blockquote>\n<h1 id=\"功能盘点\"><a href=\"#功能盘点\" class=\"headerlink\" title=\"功能盘点\"></a>功能盘点</h1><p>目前该项目已经支持以下功能：</p>\n<ol>\n<li>自动打码</li>\n<li>自动登录</li>\n<li>准点预售和捡漏</li>\n<li>智能候补</li>\n<li>邮件通知</li>\n<li><code>server</code>酱通知</li>\n</ol>\n<h1 id=\"项目使用\"><a href=\"#项目使用\" class=\"headerlink\" title=\"项目使用\"></a>项目使用</h1><p>项目作者在<code>README</code>中详细介绍了整个项目的搭建方法，按照教程一步一步来，你一定可以搭建成功。<br>另外作者还整理了一些项目搭建和使用过程中遇到的一些常见问题，可谓是用心良苦。</p>\n<h1 id=\"项目学习\"><a href=\"#项目学习\" class=\"headerlink\" title=\"项目学习\"></a>项目学习</h1><p>作为一个合格的开源项目，除了可供大家使用，作者还提供给大家共同学习的机会。</p>\n<ol>\n<li>作者把整个项目的思路画了出来，帮助大家更好的理解项目源码。</li>\n</ol>\n<img src=\"/images/blog/GitHub%E6%A0%87%E6%98%9F14k+%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%97%A2%E8%83%BD%E5%AD%A6Python%E5%8F%88%E8%83%BD%E6%8A%A2%E7%A5%A8/12306-1.png\" class=\"\">\n\n<ol start=\"2\">\n<li>作者创建了一堆的<code>QQ</code>群，供大家学习交流。由于项目太过火爆，目前只有<code>8</code>群尚未满员: <code>620629239</code> 。</li>\n</ol>\n<p>看到这里，你是不是已经跃跃欲试了呢？赶紧去仓库下载学习吧~</p>\n<blockquote>\n<p>补充一个<code>server</code>酱的文档地址：<a href=\"http://sc.ftqq.com/3.version\">http://sc.ftqq.com/3.version</a></p>\n</blockquote>"},{"title":"Github源码推荐(1.22~1.28)","date":"2018-01-27T04:39:11.000Z","_content":"\n除了推荐一些源码，如果遇到其他相关我也会推荐给大家，排名来自于心情。\n\n## 一、英语进阶指南\n夫人最近也在学习英语，不知道这个对她是否有用呢？\n\n> 英语作为一门语言，学习起来应该是一件比较自然而然的事情，就像我们自然而然地学会汉语那样。\n\n<!--more-->\n### 效果图\n{% img /images/blog/Feature.png %}\n\n{% img /images/blog/How.png %}\n\n### 热度\n```\nStar: 7800+\n```\n\n### `Github`主页\n[https://github.com/byoungd/English-level-up-tips-for-Chinese](https://github.com/byoungd/English-level-up-tips-for-Chinese)\n\n## 二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是`Mac`系统，那就试试这个吧，专为`Mac OS`打造的`12306 订票/捡票 助手`。\n\n### 效果图\n{% img /images/blog/12306ForMac.jpg %}\n\n### 热度\n```\nStar: 2000+\n```\n\n### `Github`主页\n[https://github.com/fancymax/12306ForMac](https://github.com/fancymax/12306ForMac)\n\n## 三、习惯了`OC`下的`YYModel`等`Dictionary`转`Model`工具，在`Swift`下是否不适应呢？试试`SwiftyJSON`吧，一定会为你带来更好的体验。\n\n\n### 热度\n```\nStar: 16000+\n```\n\n### CocoaPods\n```\npod 'SwiftyJSON'\n```\n\n### Carthage\n```\ngithub \"SwiftyJSON/SwiftyJSON\"\n```\n\n### `Github`主页\n[https://github.com/SwiftyJSON/SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)\n\n## 四、是否厌倦了`Toast`一成不变的样式呢？你可以试试`NotificationBanner`，漂亮的动画样式，新颖的交互体验。\n\n### 效果图\n{% img /images/blog/NotificationBanner-1.gif %}\n\n{% img /images/blog/NotificationBanner-2.gif %}\n\n{% img /images/blog/NotificationBanner-3.gif %}\n\n### 热度\n```\nStar: 1700+\n```\n\n### CocoaPods\n```\npod 'NotificationBannerSwift'\n```\n### Carthage\n```\ngithub \"Daltron/NotificationBanner\" \"master\"\n```\n\n### `Github`主页\n[https://github.com/Daltron/NotificationBanner](https://github.com/Daltron/NotificationBanner)\n\n\n好了，暂时就推荐这么多给大家，下周我们再见。\n\nPS：本文中图片部分皆来自于作者`Github`主页，如有侵权，请告知。","source":"_posts/Github源码推荐(1.22-1.28).md","raw":"---\ntitle: 'Github源码推荐(1.22~1.28)'\ndate: 2018-01-27 12:39:11\ncategories:\n    - 源码\ntags: \n    - Github\n---\n\n除了推荐一些源码，如果遇到其他相关我也会推荐给大家，排名来自于心情。\n\n## 一、英语进阶指南\n夫人最近也在学习英语，不知道这个对她是否有用呢？\n\n> 英语作为一门语言，学习起来应该是一件比较自然而然的事情，就像我们自然而然地学会汉语那样。\n\n<!--more-->\n### 效果图\n{% img /images/blog/Feature.png %}\n\n{% img /images/blog/How.png %}\n\n### 热度\n```\nStar: 7800+\n```\n\n### `Github`主页\n[https://github.com/byoungd/English-level-up-tips-for-Chinese](https://github.com/byoungd/English-level-up-tips-for-Chinese)\n\n## 二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是`Mac`系统，那就试试这个吧，专为`Mac OS`打造的`12306 订票/捡票 助手`。\n\n### 效果图\n{% img /images/blog/12306ForMac.jpg %}\n\n### 热度\n```\nStar: 2000+\n```\n\n### `Github`主页\n[https://github.com/fancymax/12306ForMac](https://github.com/fancymax/12306ForMac)\n\n## 三、习惯了`OC`下的`YYModel`等`Dictionary`转`Model`工具，在`Swift`下是否不适应呢？试试`SwiftyJSON`吧，一定会为你带来更好的体验。\n\n\n### 热度\n```\nStar: 16000+\n```\n\n### CocoaPods\n```\npod 'SwiftyJSON'\n```\n\n### Carthage\n```\ngithub \"SwiftyJSON/SwiftyJSON\"\n```\n\n### `Github`主页\n[https://github.com/SwiftyJSON/SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON)\n\n## 四、是否厌倦了`Toast`一成不变的样式呢？你可以试试`NotificationBanner`，漂亮的动画样式，新颖的交互体验。\n\n### 效果图\n{% img /images/blog/NotificationBanner-1.gif %}\n\n{% img /images/blog/NotificationBanner-2.gif %}\n\n{% img /images/blog/NotificationBanner-3.gif %}\n\n### 热度\n```\nStar: 1700+\n```\n\n### CocoaPods\n```\npod 'NotificationBannerSwift'\n```\n### Carthage\n```\ngithub \"Daltron/NotificationBanner\" \"master\"\n```\n\n### `Github`主页\n[https://github.com/Daltron/NotificationBanner](https://github.com/Daltron/NotificationBanner)\n\n\n好了，暂时就推荐这么多给大家，下周我们再见。\n\nPS：本文中图片部分皆来自于作者`Github`主页，如有侵权，请告知。","slug":"Github源码推荐(1.22-1.28)","published":1,"updated":"2021-08-27T13:34:42.821Z","_id":"cksu5b14n000v8c20hrbj6k4z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>除了推荐一些源码，如果遇到其他相关我也会推荐给大家，排名来自于心情。</p>\n<h2 id=\"一、英语进阶指南\"><a href=\"#一、英语进阶指南\" class=\"headerlink\" title=\"一、英语进阶指南\"></a>一、英语进阶指南</h2><p>夫人最近也在学习英语，不知道这个对她是否有用呢？</p>\n<blockquote>\n<p>英语作为一门语言，学习起来应该是一件比较自然而然的事情，就像我们自然而然地学会汉语那样。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/Feature.png\" class=\"\">\n\n<img src=\"/images/blog/How.png\" class=\"\">\n\n<h3 id=\"热度\"><a href=\"#热度\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 7800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页\"><a href=\"#Github主页\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/byoungd/English-level-up-tips-for-Chinese\">https://github.com/byoungd/English-level-up-tips-for-Chinese</a></p>\n<h2 id=\"二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac-OS打造的12306-订票-捡票-助手。\"><a href=\"#二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac-OS打造的12306-订票-捡票-助手。\" class=\"headerlink\" title=\"二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac OS打造的12306 订票/捡票 助手。\"></a>二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是<code>Mac</code>系统，那就试试这个吧，专为<code>Mac OS</code>打造的<code>12306 订票/捡票 助手</code>。</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/12306ForMac.jpg\" class=\"\">\n\n<h3 id=\"热度-1\"><a href=\"#热度-1\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2000+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-1\"><a href=\"#Github主页-1\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/fancymax/12306ForMac\">https://github.com/fancymax/12306ForMac</a></p>\n<h2 id=\"三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。\"><a href=\"#三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。\" class=\"headerlink\" title=\"三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。\"></a>三、习惯了<code>OC</code>下的<code>YYModel</code>等<code>Dictionary</code>转<code>Model</code>工具，在<code>Swift</code>下是否不适应呢？试试<code>SwiftyJSON</code>吧，一定会为你带来更好的体验。</h2><h3 id=\"热度-2\"><a href=\"#热度-2\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 16000+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwiftyJSON&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;SwiftyJSON/SwiftyJSON&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-2\"><a href=\"#Github主页-2\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">https://github.com/SwiftyJSON/SwiftyJSON</a></p>\n<h2 id=\"四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。\"><a href=\"#四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。\" class=\"headerlink\" title=\"四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。\"></a>四、是否厌倦了<code>Toast</code>一成不变的样式呢？你可以试试<code>NotificationBanner</code>，漂亮的动画样式，新颖的交互体验。</h2><h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/NotificationBanner-1.gif\" class=\"\">\n\n<img src=\"/images/blog/NotificationBanner-2.gif\" class=\"\">\n\n<img src=\"/images/blog/NotificationBanner-3.gif\" class=\"\">\n\n<h3 id=\"热度-3\"><a href=\"#热度-3\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 1700+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-1\"><a href=\"#CocoaPods-1\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;NotificationBannerSwift&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-1\"><a href=\"#Carthage-1\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;Daltron/NotificationBanner&quot; &quot;master&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-3\"><a href=\"#Github主页-3\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/Daltron/NotificationBanner\">https://github.com/Daltron/NotificationBanner</a></p>\n<p>好了，暂时就推荐这么多给大家，下周我们再见。</p>\n<p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>\n","site":{"data":{}},"excerpt":"<p>除了推荐一些源码，如果遇到其他相关我也会推荐给大家，排名来自于心情。</p>\n<h2 id=\"一、英语进阶指南\"><a href=\"#一、英语进阶指南\" class=\"headerlink\" title=\"一、英语进阶指南\"></a>一、英语进阶指南</h2><p>夫人最近也在学习英语，不知道这个对她是否有用呢？</p>\n<blockquote>\n<p>英语作为一门语言，学习起来应该是一件比较自然而然的事情，就像我们自然而然地学会汉语那样。</p>\n</blockquote>","more":"<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/Feature.png\" class=\"\">\n\n<img src=\"/images/blog/How.png\" class=\"\">\n\n<h3 id=\"热度\"><a href=\"#热度\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 7800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页\"><a href=\"#Github主页\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/byoungd/English-level-up-tips-for-Chinese\">https://github.com/byoungd/English-level-up-tips-for-Chinese</a></p>\n<h2 id=\"二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac-OS打造的12306-订票-捡票-助手。\"><a href=\"#二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac-OS打造的12306-订票-捡票-助手。\" class=\"headerlink\" title=\"二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是Mac系统，那就试试这个吧，专为Mac OS打造的12306 订票/捡票 助手。\"></a>二、春节即将来临，是否有小伙伴再开始抢票了呢？如果你使用的是<code>Mac</code>系统，那就试试这个吧，专为<code>Mac OS</code>打造的<code>12306 订票/捡票 助手</code>。</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/12306ForMac.jpg\" class=\"\">\n\n<h3 id=\"热度-1\"><a href=\"#热度-1\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2000+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-1\"><a href=\"#Github主页-1\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/fancymax/12306ForMac\">https://github.com/fancymax/12306ForMac</a></p>\n<h2 id=\"三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。\"><a href=\"#三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。\" class=\"headerlink\" title=\"三、习惯了OC下的YYModel等Dictionary转Model工具，在Swift下是否不适应呢？试试SwiftyJSON吧，一定会为你带来更好的体验。\"></a>三、习惯了<code>OC</code>下的<code>YYModel</code>等<code>Dictionary</code>转<code>Model</code>工具，在<code>Swift</code>下是否不适应呢？试试<code>SwiftyJSON</code>吧，一定会为你带来更好的体验。</h2><h3 id=\"热度-2\"><a href=\"#热度-2\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 16000+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwiftyJSON&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;SwiftyJSON/SwiftyJSON&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-2\"><a href=\"#Github主页-2\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">https://github.com/SwiftyJSON/SwiftyJSON</a></p>\n<h2 id=\"四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。\"><a href=\"#四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。\" class=\"headerlink\" title=\"四、是否厌倦了Toast一成不变的样式呢？你可以试试NotificationBanner，漂亮的动画样式，新颖的交互体验。\"></a>四、是否厌倦了<code>Toast</code>一成不变的样式呢？你可以试试<code>NotificationBanner</code>，漂亮的动画样式，新颖的交互体验。</h2><h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/NotificationBanner-1.gif\" class=\"\">\n\n<img src=\"/images/blog/NotificationBanner-2.gif\" class=\"\">\n\n<img src=\"/images/blog/NotificationBanner-3.gif\" class=\"\">\n\n<h3 id=\"热度-3\"><a href=\"#热度-3\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 1700+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-1\"><a href=\"#CocoaPods-1\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;NotificationBannerSwift&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-1\"><a href=\"#Carthage-1\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;Daltron/NotificationBanner&quot; &quot;master&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-3\"><a href=\"#Github主页-3\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/Daltron/NotificationBanner\">https://github.com/Daltron/NotificationBanner</a></p>\n<p>好了，暂时就推荐这么多给大家，下周我们再见。</p>\n<p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>"},{"title":"Github源码推荐(1.15~1.21)","date":"2018-01-21T03:21:06.000Z","_content":"\n大家好，一周时间过得真快，本次主题依旧，推荐一些`Github`上的源码，排名不分先后。\n\n## 一、答题`App`莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员`Show`一把的场面，下面推荐的就是使用`OCR`做的辅助答题助手。\n\n> ### 特点\n> * 使用手机模拟器，快速识别~\n> * 浏览器自动搜索显示结果，搜索引擎可配置，结果一目了然~\n> * 模拟器还能多开哦~全部答对奖金翻倍，遇到不会的可以多选乱蒙\n> * 万英雄/知识超人/冲顶大会都支持哦~\n\n<!--more-->\n### 效果图\n{% img /images/blog/wenda-helper.gif %}\n\n### 热度\n```\nStar: 800+\n```\n\n### `Github`主页\n[https://github.com/rrdssfgcs/wenda-helper](https://github.com/rrdssfgcs/wenda-helper)\n\n## 二、上一周给大家推荐了一个`Objective-C`的日历，这次给大家推荐一个`Swift4`的日历控件，作者写的非常好棒，支持`Storyboard`。\n\n### 效果图\n{% img /images/blog/CVCalendar.gif %}\n\n### 热度\n```\nStar: 2800+\n```\n\n### CocoaPods\n```\npod 'CVCalendar', '~> 1.6.0'\n```\n\n### `Github`主页\n[https://github.com/CVCalendar/CVCalendar](https://github.com/CVCalendar/CVCalendar)\n\n## 三、使用`Swift`的时候是不是需要写好多的`Extension`呢？使用这个开源库后就再也不用劳心劳力的写很多的`Extension`了。\n\n> SwifterSwift is a collection of over 500 native Swift extensions, with handy methods, syntactic sugar, and performance improvements for wide range of primitive data types, UIKit and Cocoa classes –over 500 in 1– for iOS, macOS, tvOS and watchOS.\n\n简直不要太强大，而且支持`Swift4`。\n\n### 热度\n```\nStar: 4200+\n```\n\n### CocoaPods\n```\npod 'SwifterSwift'\n```\n你也可以只集成部分`Extension`，例如\n```\npod 'SwifterSwift/Foundation'\n```\n具体还是去作者主页看吧。\n\n### Carthage\n```\ngithub \"SwifterSwift/SwifterSwift\" ~> 4.0\n```\n\n\n### `Github`主页\n[https://github.com/SwifterSwift/SwifterSwift](https://github.com/SwifterSwift/SwifterSwift)\n\n## 四、基本上所有的`App`都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个`Cell`达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是`OC`和`Swift`都有，各取所需。\n\n* `OC`版\n\n### 效果图\n{% img /images/blog/XLForm.gif %}\n\n### 热度\n```\nStar: 4800+\n```\n\n### CocoaPods\n```\npod 'XLForm', '~> 4.0'\n```\n### Carthage\n```\ngithub \"xmartlabs/XLForm\" ~> 4.0\n```\n\n### `Github`主页\n[https://github.com/xmartlabs/XLForm](https://github.com/xmartlabs/XLForm)\n\n* `Swift`版\n\n### 效果图\n{% img /images/blog/Eureka-1.gif %}\n\n### 热度\n```\nStar: 7500+\n```\n\n### CocoaPods\n```\npod 'Eureka'\n```\n### Carthage\n```\ngithub \"xmartlabs/Eureka\" ~> 4.0\n```\n\n### `Github`主页\n[https://github.com/xmartlabs/Eureka](https://github.com/xmartlabs/Eureka)\n\n关于使用方法这里就不再介绍了，项目主页上介绍的非常清楚，有需求的小伙伴就自己去查看吧~\n\n\n好了，暂时就推荐这么多给大家，下周我们再见。\n\nPS：本文中图片部分皆来自于作者`Github`主页，如有侵权，请告知。","source":"_posts/Github源码推荐(1.15~1.21).md","raw":"---\ntitle: Github源码推荐(1.15~1.21)\ndate: 2018-01-21 11:21:06\ncategories:\n    - 源码\ntags: \n    - Github\n---\n\n大家好，一周时间过得真快，本次主题依旧，推荐一些`Github`上的源码，排名不分先后。\n\n## 一、答题`App`莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员`Show`一把的场面，下面推荐的就是使用`OCR`做的辅助答题助手。\n\n> ### 特点\n> * 使用手机模拟器，快速识别~\n> * 浏览器自动搜索显示结果，搜索引擎可配置，结果一目了然~\n> * 模拟器还能多开哦~全部答对奖金翻倍，遇到不会的可以多选乱蒙\n> * 万英雄/知识超人/冲顶大会都支持哦~\n\n<!--more-->\n### 效果图\n{% img /images/blog/wenda-helper.gif %}\n\n### 热度\n```\nStar: 800+\n```\n\n### `Github`主页\n[https://github.com/rrdssfgcs/wenda-helper](https://github.com/rrdssfgcs/wenda-helper)\n\n## 二、上一周给大家推荐了一个`Objective-C`的日历，这次给大家推荐一个`Swift4`的日历控件，作者写的非常好棒，支持`Storyboard`。\n\n### 效果图\n{% img /images/blog/CVCalendar.gif %}\n\n### 热度\n```\nStar: 2800+\n```\n\n### CocoaPods\n```\npod 'CVCalendar', '~> 1.6.0'\n```\n\n### `Github`主页\n[https://github.com/CVCalendar/CVCalendar](https://github.com/CVCalendar/CVCalendar)\n\n## 三、使用`Swift`的时候是不是需要写好多的`Extension`呢？使用这个开源库后就再也不用劳心劳力的写很多的`Extension`了。\n\n> SwifterSwift is a collection of over 500 native Swift extensions, with handy methods, syntactic sugar, and performance improvements for wide range of primitive data types, UIKit and Cocoa classes –over 500 in 1– for iOS, macOS, tvOS and watchOS.\n\n简直不要太强大，而且支持`Swift4`。\n\n### 热度\n```\nStar: 4200+\n```\n\n### CocoaPods\n```\npod 'SwifterSwift'\n```\n你也可以只集成部分`Extension`，例如\n```\npod 'SwifterSwift/Foundation'\n```\n具体还是去作者主页看吧。\n\n### Carthage\n```\ngithub \"SwifterSwift/SwifterSwift\" ~> 4.0\n```\n\n\n### `Github`主页\n[https://github.com/SwifterSwift/SwifterSwift](https://github.com/SwifterSwift/SwifterSwift)\n\n## 四、基本上所有的`App`都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个`Cell`达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是`OC`和`Swift`都有，各取所需。\n\n* `OC`版\n\n### 效果图\n{% img /images/blog/XLForm.gif %}\n\n### 热度\n```\nStar: 4800+\n```\n\n### CocoaPods\n```\npod 'XLForm', '~> 4.0'\n```\n### Carthage\n```\ngithub \"xmartlabs/XLForm\" ~> 4.0\n```\n\n### `Github`主页\n[https://github.com/xmartlabs/XLForm](https://github.com/xmartlabs/XLForm)\n\n* `Swift`版\n\n### 效果图\n{% img /images/blog/Eureka-1.gif %}\n\n### 热度\n```\nStar: 7500+\n```\n\n### CocoaPods\n```\npod 'Eureka'\n```\n### Carthage\n```\ngithub \"xmartlabs/Eureka\" ~> 4.0\n```\n\n### `Github`主页\n[https://github.com/xmartlabs/Eureka](https://github.com/xmartlabs/Eureka)\n\n关于使用方法这里就不再介绍了，项目主页上介绍的非常清楚，有需求的小伙伴就自己去查看吧~\n\n\n好了，暂时就推荐这么多给大家，下周我们再见。\n\nPS：本文中图片部分皆来自于作者`Github`主页，如有侵权，请告知。","slug":"Github源码推荐(1.15~1.21)","published":1,"updated":"2021-08-27T13:34:42.821Z","_id":"cksu5b14o000y8c206rlc8xok","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大家好，一周时间过得真快，本次主题依旧，推荐一些<code>Github</code>上的源码，排名不分先后。</p>\n<h2 id=\"一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。\"><a href=\"#一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。\" class=\"headerlink\" title=\"一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。\"></a>一、答题<code>App</code>莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员<code>Show</code>一把的场面，下面推荐的就是使用<code>OCR</code>做的辅助答题助手。</h2><blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>使用手机模拟器，快速识别~</li>\n<li>浏览器自动搜索显示结果，搜索引擎可配置，结果一目了然~</li>\n<li>模拟器还能多开哦~全部答对奖金翻倍，遇到不会的可以多选乱蒙</li>\n<li>万英雄/知识超人/冲顶大会都支持哦~</li>\n</ul>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/wenda-helper.gif\" class=\"\">\n\n<h3 id=\"热度\"><a href=\"#热度\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页\"><a href=\"#Github主页\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/rrdssfgcs/wenda-helper\">https://github.com/rrdssfgcs/wenda-helper</a></p>\n<h2 id=\"二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。\"><a href=\"#二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。\" class=\"headerlink\" title=\"二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。\"></a>二、上一周给大家推荐了一个<code>Objective-C</code>的日历，这次给大家推荐一个<code>Swift4</code>的日历控件，作者写的非常好棒，支持<code>Storyboard</code>。</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/CVCalendar.gif\" class=\"\">\n\n<h3 id=\"热度-1\"><a href=\"#热度-1\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;CVCalendar&#x27;, &#x27;~&gt; 1.6.0&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-1\"><a href=\"#Github主页-1\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/CVCalendar/CVCalendar\">https://github.com/CVCalendar/CVCalendar</a></p>\n<h2 id=\"三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。\"><a href=\"#三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。\" class=\"headerlink\" title=\"三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。\"></a>三、使用<code>Swift</code>的时候是不是需要写好多的<code>Extension</code>呢？使用这个开源库后就再也不用劳心劳力的写很多的<code>Extension</code>了。</h2><blockquote>\n<p>SwifterSwift is a collection of over 500 native Swift extensions, with handy methods, syntactic sugar, and performance improvements for wide range of primitive data types, UIKit and Cocoa classes –over 500 in 1– for iOS, macOS, tvOS and watchOS.</p>\n</blockquote>\n<p>简直不要太强大，而且支持<code>Swift4</code>。</p>\n<h3 id=\"热度-2\"><a href=\"#热度-2\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 4200+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-1\"><a href=\"#CocoaPods-1\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwifterSwift&#x27;</span><br></pre></td></tr></table></figure>\n<p>你也可以只集成部分<code>Extension</code>，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwifterSwift/Foundation&#x27;</span><br></pre></td></tr></table></figure>\n<p>具体还是去作者主页看吧。</p>\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;SwifterSwift/SwifterSwift&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Github主页-2\"><a href=\"#Github主页-2\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/SwifterSwift/SwifterSwift\">https://github.com/SwifterSwift/SwifterSwift</a></p>\n<h2 id=\"四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。\"><a href=\"#四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。\" class=\"headerlink\" title=\"四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。\"></a>四、基本上所有的<code>App</code>都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个<code>Cell</code>达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是<code>OC</code>和<code>Swift</code>都有，各取所需。</h2><ul>\n<li><code>OC</code>版</li>\n</ul>\n<h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/XLForm.gif\" class=\"\">\n\n<h3 id=\"热度-3\"><a href=\"#热度-3\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 4800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-2\"><a href=\"#CocoaPods-2\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;XLForm&#x27;, &#x27;~&gt; 4.0&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-1\"><a href=\"#Carthage-1\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;xmartlabs/XLForm&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-3\"><a href=\"#Github主页-3\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/xmartlabs/XLForm\">https://github.com/xmartlabs/XLForm</a></p>\n<ul>\n<li><code>Swift</code>版</li>\n</ul>\n<h3 id=\"效果图-3\"><a href=\"#效果图-3\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/Eureka-1.gif\" class=\"\">\n\n<h3 id=\"热度-4\"><a href=\"#热度-4\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 7500+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-3\"><a href=\"#CocoaPods-3\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;Eureka&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-2\"><a href=\"#Carthage-2\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;xmartlabs/Eureka&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-4\"><a href=\"#Github主页-4\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/xmartlabs/Eureka\">https://github.com/xmartlabs/Eureka</a></p>\n<p>关于使用方法这里就不再介绍了，项目主页上介绍的非常清楚，有需求的小伙伴就自己去查看吧~</p>\n<p>好了，暂时就推荐这么多给大家，下周我们再见。</p>\n<p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>\n","site":{"data":{}},"excerpt":"<p>大家好，一周时间过得真快，本次主题依旧，推荐一些<code>Github</code>上的源码，排名不分先后。</p>\n<h2 id=\"一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。\"><a href=\"#一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。\" class=\"headerlink\" title=\"一、答题App莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员Show一把的场面，下面推荐的就是使用OCR做的辅助答题助手。\"></a>一、答题<code>App</code>莫名的火了起来，随之而来的则是一系列的辅助软件，例如搜狗、百度，先后推出辅助答题助手。这档子事自然少不了广大程序员<code>Show</code>一把的场面，下面推荐的就是使用<code>OCR</code>做的辅助答题助手。</h2><blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>使用手机模拟器，快速识别~</li>\n<li>浏览器自动搜索显示结果，搜索引擎可配置，结果一目了然~</li>\n<li>模拟器还能多开哦~全部答对奖金翻倍，遇到不会的可以多选乱蒙</li>\n<li>万英雄/知识超人/冲顶大会都支持哦~</li>\n</ul>\n</blockquote>","more":"<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/wenda-helper.gif\" class=\"\">\n\n<h3 id=\"热度\"><a href=\"#热度\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页\"><a href=\"#Github主页\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/rrdssfgcs/wenda-helper\">https://github.com/rrdssfgcs/wenda-helper</a></p>\n<h2 id=\"二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。\"><a href=\"#二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。\" class=\"headerlink\" title=\"二、上一周给大家推荐了一个Objective-C的日历，这次给大家推荐一个Swift4的日历控件，作者写的非常好棒，支持Storyboard。\"></a>二、上一周给大家推荐了一个<code>Objective-C</code>的日历，这次给大家推荐一个<code>Swift4</code>的日历控件，作者写的非常好棒，支持<code>Storyboard</code>。</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/CVCalendar.gif\" class=\"\">\n\n<h3 id=\"热度-1\"><a href=\"#热度-1\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;CVCalendar&#x27;, &#x27;~&gt; 1.6.0&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-1\"><a href=\"#Github主页-1\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/CVCalendar/CVCalendar\">https://github.com/CVCalendar/CVCalendar</a></p>\n<h2 id=\"三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。\"><a href=\"#三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。\" class=\"headerlink\" title=\"三、使用Swift的时候是不是需要写好多的Extension呢？使用这个开源库后就再也不用劳心劳力的写很多的Extension了。\"></a>三、使用<code>Swift</code>的时候是不是需要写好多的<code>Extension</code>呢？使用这个开源库后就再也不用劳心劳力的写很多的<code>Extension</code>了。</h2><blockquote>\n<p>SwifterSwift is a collection of over 500 native Swift extensions, with handy methods, syntactic sugar, and performance improvements for wide range of primitive data types, UIKit and Cocoa classes –over 500 in 1– for iOS, macOS, tvOS and watchOS.</p>\n</blockquote>\n<p>简直不要太强大，而且支持<code>Swift4</code>。</p>\n<h3 id=\"热度-2\"><a href=\"#热度-2\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 4200+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-1\"><a href=\"#CocoaPods-1\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwifterSwift&#x27;</span><br></pre></td></tr></table></figure>\n<p>你也可以只集成部分<code>Extension</code>，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwifterSwift/Foundation&#x27;</span><br></pre></td></tr></table></figure>\n<p>具体还是去作者主页看吧。</p>\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;SwifterSwift/SwifterSwift&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Github主页-2\"><a href=\"#Github主页-2\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/SwifterSwift/SwifterSwift\">https://github.com/SwifterSwift/SwifterSwift</a></p>\n<h2 id=\"四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。\"><a href=\"#四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。\" class=\"headerlink\" title=\"四、基本上所有的App都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个Cell达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是OC和Swift都有，各取所需。\"></a>四、基本上所有的<code>App</code>都逃脱不了表单，设置、用户界面等待，都是一些枯燥无味的代码，却又要花费时间、精力去自定义每个<code>Cell</code>达到各式各样的效果，此次为大家推荐一个强大的表单开源库，最重要的是<code>OC</code>和<code>Swift</code>都有，各取所需。</h2><ul>\n<li><code>OC</code>版</li>\n</ul>\n<h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/XLForm.gif\" class=\"\">\n\n<h3 id=\"热度-3\"><a href=\"#热度-3\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 4800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-2\"><a href=\"#CocoaPods-2\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;XLForm&#x27;, &#x27;~&gt; 4.0&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-1\"><a href=\"#Carthage-1\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;xmartlabs/XLForm&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-3\"><a href=\"#Github主页-3\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/xmartlabs/XLForm\">https://github.com/xmartlabs/XLForm</a></p>\n<ul>\n<li><code>Swift</code>版</li>\n</ul>\n<h3 id=\"效果图-3\"><a href=\"#效果图-3\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/Eureka-1.gif\" class=\"\">\n\n<h3 id=\"热度-4\"><a href=\"#热度-4\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 7500+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-3\"><a href=\"#CocoaPods-3\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;Eureka&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-2\"><a href=\"#Carthage-2\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;xmartlabs/Eureka&quot; ~&gt; 4.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-4\"><a href=\"#Github主页-4\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/xmartlabs/Eureka\">https://github.com/xmartlabs/Eureka</a></p>\n<p>关于使用方法这里就不再介绍了，项目主页上介绍的非常清楚，有需求的小伙伴就自己去查看吧~</p>\n<p>好了，暂时就推荐这么多给大家，下周我们再见。</p>\n<p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>"},{"title":"Github源码推荐(1.8~1.14)","date":"2018-01-14T14:22:30.000Z","_content":"\n本次给大家推荐一些`Github`上的源码，排名不分先后。\n\n## 一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用`Python`开发的`跳一跳`辅助。\n\n### 原理说明(摘自作者原文)\n1. 将手机点击到《跳一跳》小程序界面\n\n2. 用 ADB 工具获取当前手机截图，并用 ADB 将截图 pull 上来\n\n3. 计算按压时间\n  * 手动版：用 Matplotlib 显示截图，用鼠标先点击起始点位置，然后点击目标位置，计算像素距离；\n  * 自动版：靠棋子的颜色来识别棋子，靠底色和方块的色差来识别棋盘；\n\n4. 用 ADB 工具点击屏幕蓄力一跳\n\n<!--more-->\n### 热度\n```\nStar: 11800+\n```\n\n### `Github`主页\n\n[https://github.com/wangshub/wechat_jump_game](https://github.com/wangshub/wechat_jump_game) \n\n## 二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试`DKImagePickerController`吧，作者完全使用`Swift`编写，支持`CocoaPods`。\n\n### 效果图\n{% img /images/blog/DKImagePickerController-1.png %}\n\n{% img /images/blog/DKImagePickerController-2.png %}\n\n### 热度\n```\nStar: 890+\n```\n\n### CocoaPods\n```\npod 'DKImagePickerController'\n```\n\n### `Github`主页\n[https://github.com/zhangao0086/DKImagePickerController](https://github.com/zhangao0086/DKImagePickerController) \n\n## 三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，`Github`上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯`Swift`编写的源码。\n\n### 效果图\n{% img /images/blog/SwipeCellKit.gif %}\n\n### 热度\n```\nStar: 2700+\n```\n\n### CocoaPods\n```\npod 'SwipeCellKit'\n```\n### Carthage\n```\ngithub \"SwipeCellKit/SwipeCellKit\"\n```\n\n### `Github`主页\n[https://github.com/SwipeCellKit/SwipeCellKit](https://github.com/SwipeCellKit/SwipeCellKit)\n\n## 四、相信很多人都有编写日历的需求，在`Todo`，万年历等中，都需要日历，本次为大家推荐一个`Objective-C`编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持`Localization`。\n\n### 效果图\n{% img /images/blog/JTCalendar.gif %}\n\n{% img /images/blog/JTCalendar-2.png %}\n\n### 热度\n```\nStar: 2400+\n```\n\n### CocoaPods\n```\npod 'JTCalendar', '~> 2.0'\n```\n### Carthage\n```\ngithub \"jonathantribouharet/JTCalendar\" ~> 2.2\n```\n\n### `Github`主页\n[https://github.com/jonathantribouharet/JTCalendar](https://github.com/jonathantribouharet/JTCalendar)\n\n好了，暂时就推荐这么多给大家，下周我们再见。\n\nPS：本文中图片部分皆来自于作者`Github`主页，如有侵权，请告知。","source":"_posts/Github源码推荐(1.8~1.14).md","raw":"---\ntitle: Github源码推荐(1.8~1.14)\ndate: 2018-01-14 22:22:30\ncategories:\n    - 源码\ntags: \n    - Github\n---\n\n本次给大家推荐一些`Github`上的源码，排名不分先后。\n\n## 一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用`Python`开发的`跳一跳`辅助。\n\n### 原理说明(摘自作者原文)\n1. 将手机点击到《跳一跳》小程序界面\n\n2. 用 ADB 工具获取当前手机截图，并用 ADB 将截图 pull 上来\n\n3. 计算按压时间\n  * 手动版：用 Matplotlib 显示截图，用鼠标先点击起始点位置，然后点击目标位置，计算像素距离；\n  * 自动版：靠棋子的颜色来识别棋子，靠底色和方块的色差来识别棋盘；\n\n4. 用 ADB 工具点击屏幕蓄力一跳\n\n<!--more-->\n### 热度\n```\nStar: 11800+\n```\n\n### `Github`主页\n\n[https://github.com/wangshub/wechat_jump_game](https://github.com/wangshub/wechat_jump_game) \n\n## 二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试`DKImagePickerController`吧，作者完全使用`Swift`编写，支持`CocoaPods`。\n\n### 效果图\n{% img /images/blog/DKImagePickerController-1.png %}\n\n{% img /images/blog/DKImagePickerController-2.png %}\n\n### 热度\n```\nStar: 890+\n```\n\n### CocoaPods\n```\npod 'DKImagePickerController'\n```\n\n### `Github`主页\n[https://github.com/zhangao0086/DKImagePickerController](https://github.com/zhangao0086/DKImagePickerController) \n\n## 三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，`Github`上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯`Swift`编写的源码。\n\n### 效果图\n{% img /images/blog/SwipeCellKit.gif %}\n\n### 热度\n```\nStar: 2700+\n```\n\n### CocoaPods\n```\npod 'SwipeCellKit'\n```\n### Carthage\n```\ngithub \"SwipeCellKit/SwipeCellKit\"\n```\n\n### `Github`主页\n[https://github.com/SwipeCellKit/SwipeCellKit](https://github.com/SwipeCellKit/SwipeCellKit)\n\n## 四、相信很多人都有编写日历的需求，在`Todo`，万年历等中，都需要日历，本次为大家推荐一个`Objective-C`编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持`Localization`。\n\n### 效果图\n{% img /images/blog/JTCalendar.gif %}\n\n{% img /images/blog/JTCalendar-2.png %}\n\n### 热度\n```\nStar: 2400+\n```\n\n### CocoaPods\n```\npod 'JTCalendar', '~> 2.0'\n```\n### Carthage\n```\ngithub \"jonathantribouharet/JTCalendar\" ~> 2.2\n```\n\n### `Github`主页\n[https://github.com/jonathantribouharet/JTCalendar](https://github.com/jonathantribouharet/JTCalendar)\n\n好了，暂时就推荐这么多给大家，下周我们再见。\n\nPS：本文中图片部分皆来自于作者`Github`主页，如有侵权，请告知。","slug":"Github源码推荐(1.8~1.14)","published":1,"updated":"2021-08-27T13:34:42.821Z","_id":"cksu5b14p00118c20ee9ba59x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本次给大家推荐一些<code>Github</code>上的源码，排名不分先后。</p>\n<h2 id=\"一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。\"><a href=\"#一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。\" class=\"headerlink\" title=\"一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。\"></a>一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用<code>Python</code>开发的<code>跳一跳</code>辅助。</h2><h3 id=\"原理说明-摘自作者原文\"><a href=\"#原理说明-摘自作者原文\" class=\"headerlink\" title=\"原理说明(摘自作者原文)\"></a>原理说明(摘自作者原文)</h3><ol>\n<li><p>将手机点击到《跳一跳》小程序界面</p>\n</li>\n<li><p>用 ADB 工具获取当前手机截图，并用 ADB 将截图 pull 上来</p>\n</li>\n<li><p>计算按压时间</p>\n</li>\n</ol>\n<ul>\n<li>手动版：用 Matplotlib 显示截图，用鼠标先点击起始点位置，然后点击目标位置，计算像素距离；</li>\n<li>自动版：靠棋子的颜色来识别棋子，靠底色和方块的色差来识别棋盘；</li>\n</ul>\n<ol start=\"4\">\n<li>用 ADB 工具点击屏幕蓄力一跳</li>\n</ol>\n<span id=\"more\"></span>\n<h3 id=\"热度\"><a href=\"#热度\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 11800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页\"><a href=\"#Github主页\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/wangshub/wechat_jump_game\">https://github.com/wangshub/wechat_jump_game</a> </p>\n<h2 id=\"二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。\"><a href=\"#二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。\" class=\"headerlink\" title=\"二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。\"></a>二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试<code>DKImagePickerController</code>吧，作者完全使用<code>Swift</code>编写，支持<code>CocoaPods</code>。</h2><h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/DKImagePickerController-1.png\" class=\"\">\n\n<img src=\"/images/blog/DKImagePickerController-2.png\" class=\"\">\n\n<h3 id=\"热度-1\"><a href=\"#热度-1\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 890+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;DKImagePickerController&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-1\"><a href=\"#Github主页-1\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/zhangao0086/DKImagePickerController\">https://github.com/zhangao0086/DKImagePickerController</a> </p>\n<h2 id=\"三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。\"><a href=\"#三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。\" class=\"headerlink\" title=\"三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。\"></a>三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，<code>Github</code>上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯<code>Swift</code>编写的源码。</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/SwipeCellKit.gif\" class=\"\">\n\n<h3 id=\"热度-2\"><a href=\"#热度-2\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2700+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-1\"><a href=\"#CocoaPods-1\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwipeCellKit&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;SwipeCellKit/SwipeCellKit&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-2\"><a href=\"#Github主页-2\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/SwipeCellKit/SwipeCellKit\">https://github.com/SwipeCellKit/SwipeCellKit</a></p>\n<h2 id=\"四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。\"><a href=\"#四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。\" class=\"headerlink\" title=\"四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。\"></a>四、相信很多人都有编写日历的需求，在<code>Todo</code>，万年历等中，都需要日历，本次为大家推荐一个<code>Objective-C</code>编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持<code>Localization</code>。</h2><h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/JTCalendar.gif\" class=\"\">\n\n<img src=\"/images/blog/JTCalendar-2.png\" class=\"\">\n\n<h3 id=\"热度-3\"><a href=\"#热度-3\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2400+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-2\"><a href=\"#CocoaPods-2\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;JTCalendar&#x27;, &#x27;~&gt; 2.0&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-1\"><a href=\"#Carthage-1\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;jonathantribouharet/JTCalendar&quot; ~&gt; 2.2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-3\"><a href=\"#Github主页-3\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/jonathantribouharet/JTCalendar\">https://github.com/jonathantribouharet/JTCalendar</a></p>\n<p>好了，暂时就推荐这么多给大家，下周我们再见。</p>\n<p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>\n","site":{"data":{}},"excerpt":"<p>本次给大家推荐一些<code>Github</code>上的源码，排名不分先后。</p>\n<h2 id=\"一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。\"><a href=\"#一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。\" class=\"headerlink\" title=\"一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用Python开发的跳一跳辅助。\"></a>一、微信小游戏的推出，自然而然是火爆了一把。但是一切都阻止不了程序员，自然是要破解一番的，本次首推的就是利用<code>Python</code>开发的<code>跳一跳</code>辅助。</h2><h3 id=\"原理说明-摘自作者原文\"><a href=\"#原理说明-摘自作者原文\" class=\"headerlink\" title=\"原理说明(摘自作者原文)\"></a>原理说明(摘自作者原文)</h3><ol>\n<li><p>将手机点击到《跳一跳》小程序界面</p>\n</li>\n<li><p>用 ADB 工具获取当前手机截图，并用 ADB 将截图 pull 上来</p>\n</li>\n<li><p>计算按压时间</p>\n</li>\n</ol>\n<ul>\n<li>手动版：用 Matplotlib 显示截图，用鼠标先点击起始点位置，然后点击目标位置，计算像素距离；</li>\n<li>自动版：靠棋子的颜色来识别棋子，靠底色和方块的色差来识别棋盘；</li>\n</ul>\n<ol start=\"4\">\n<li>用 ADB 工具点击屏幕蓄力一跳</li>\n</ol>","more":"<h3 id=\"热度\"><a href=\"#热度\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 11800+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页\"><a href=\"#Github主页\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/wangshub/wechat_jump_game\">https://github.com/wangshub/wechat_jump_game</a> </p>\n<h2 id=\"二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。\"><a href=\"#二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。\" class=\"headerlink\" title=\"二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试DKImagePickerController吧，作者完全使用Swift编写，支持CocoaPods。\"></a>二、是否觉得系统的相册太不方便，而自定义又太耗费时间，那就试试<code>DKImagePickerController</code>吧，作者完全使用<code>Swift</code>编写，支持<code>CocoaPods</code>。</h2><h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/DKImagePickerController-1.png\" class=\"\">\n\n<img src=\"/images/blog/DKImagePickerController-2.png\" class=\"\">\n\n<h3 id=\"热度-1\"><a href=\"#热度-1\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 890+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;DKImagePickerController&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-1\"><a href=\"#Github主页-1\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/zhangao0086/DKImagePickerController\">https://github.com/zhangao0086/DKImagePickerController</a> </p>\n<h2 id=\"三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。\"><a href=\"#三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。\" class=\"headerlink\" title=\"三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，Github上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯Swift编写的源码。\"></a>三、系统邮箱中的交互让很多人大爱，尤其是列表的左右滑动手势，<code>Github</code>上有很多人都开源了自己的模仿源码，本次推荐的也是一个使用纯<code>Swift</code>编写的源码。</h2><h3 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/SwipeCellKit.gif\" class=\"\">\n\n<h3 id=\"热度-2\"><a href=\"#热度-2\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2700+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-1\"><a href=\"#CocoaPods-1\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;SwipeCellKit&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;SwipeCellKit/SwipeCellKit&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-2\"><a href=\"#Github主页-2\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/SwipeCellKit/SwipeCellKit\">https://github.com/SwipeCellKit/SwipeCellKit</a></p>\n<h2 id=\"四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。\"><a href=\"#四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。\" class=\"headerlink\" title=\"四、相信很多人都有编写日历的需求，在Todo，万年历等中，都需要日历，本次为大家推荐一个Objective-C编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持Localization。\"></a>四、相信很多人都有编写日历的需求，在<code>Todo</code>，万年历等中，都需要日历，本次为大家推荐一个<code>Objective-C</code>编写的日历，支持横向和纵向滚动，支持切换月视图和周视图，支持<code>Localization</code>。</h2><h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><img src=\"/images/blog/JTCalendar.gif\" class=\"\">\n\n<img src=\"/images/blog/JTCalendar-2.png\" class=\"\">\n\n<h3 id=\"热度-3\"><a href=\"#热度-3\" class=\"headerlink\" title=\"热度\"></a>热度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Star: 2400+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CocoaPods-2\"><a href=\"#CocoaPods-2\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;JTCalendar&#x27;, &#x27;~&gt; 2.0&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Carthage-1\"><a href=\"#Carthage-1\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github &quot;jonathantribouharet/JTCalendar&quot; ~&gt; 2.2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Github主页-3\"><a href=\"#Github主页-3\" class=\"headerlink\" title=\"Github主页\"></a><code>Github</code>主页</h3><p><a href=\"https://github.com/jonathantribouharet/JTCalendar\">https://github.com/jonathantribouharet/JTCalendar</a></p>\n<p>好了，暂时就推荐这么多给大家，下周我们再见。</p>\n<p>PS：本文中图片部分皆来自于作者<code>Github</code>主页，如有侵权，请告知。</p>"},{"title":"Github源码索引","date":"2018-01-27T06:12:05.000Z","_content":"## 一、`UI`相关\n* [NotificationBanner](https://github.com/Daltron/NotificationBanner) `通知栏提醒`\n* [`DKImagePickerController`](https://github.com/zhangao0086/DKImagePickerController) \n<!--more-->\n系统相册\n* [SwipeCellKit](https://github.com/SwipeCellKit/SwipeCellKit) `系统邮箱手势的Cell`\n* [JTCalendar](https://github.com/jonathantribouharet/JTCalendar) `日历`\n* [CVCalendar](https://github.com/CVCalendar/CVCalendar) `日历`\n* [XLForm](https://github.com/xmartlabs/XLForm) `表单系统`\n* [Eureka](https://github.com/xmartlabs/Eureka) `表单系统`\n## 二、`Extension`\n* [SwifterSwift](https://github.com/SwifterSwift/SwifterSwift)\n## 三、工具\n* [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) `JSON转Model`\n## 四、其他\n* [英语进阶指南](https://github.com/byoungd/English-level-up-tips-for-Chinese)\n* [12306ForMac](https://github.com/fancymax/12306ForMac) `12306 订票/捡票 助手`\n* [`跳一跳`辅助](https://github.com/wangshub/wechat_jump_game)\n* [`答题App辅助`](https://github.com/rrdssfgcs/wenda-helper)","source":"_posts/Github源码索引.md","raw":"---\ntitle: Github源码索引\ndate: 2018-01-27 14:12:05\ncategories:\n    - 源码\ntags: \n    - Github\n---\n## 一、`UI`相关\n* [NotificationBanner](https://github.com/Daltron/NotificationBanner) `通知栏提醒`\n* [`DKImagePickerController`](https://github.com/zhangao0086/DKImagePickerController) \n<!--more-->\n系统相册\n* [SwipeCellKit](https://github.com/SwipeCellKit/SwipeCellKit) `系统邮箱手势的Cell`\n* [JTCalendar](https://github.com/jonathantribouharet/JTCalendar) `日历`\n* [CVCalendar](https://github.com/CVCalendar/CVCalendar) `日历`\n* [XLForm](https://github.com/xmartlabs/XLForm) `表单系统`\n* [Eureka](https://github.com/xmartlabs/Eureka) `表单系统`\n## 二、`Extension`\n* [SwifterSwift](https://github.com/SwifterSwift/SwifterSwift)\n## 三、工具\n* [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) `JSON转Model`\n## 四、其他\n* [英语进阶指南](https://github.com/byoungd/English-level-up-tips-for-Chinese)\n* [12306ForMac](https://github.com/fancymax/12306ForMac) `12306 订票/捡票 助手`\n* [`跳一跳`辅助](https://github.com/wangshub/wechat_jump_game)\n* [`答题App辅助`](https://github.com/rrdssfgcs/wenda-helper)","slug":"Github源码索引","published":1,"updated":"2021-08-27T13:34:42.821Z","_id":"cksu5b14q00158c20hgmf8c8n","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、UI相关\"><a href=\"#一、UI相关\" class=\"headerlink\" title=\"一、UI相关\"></a>一、<code>UI</code>相关</h2><ul>\n<li><a href=\"https://github.com/Daltron/NotificationBanner\">NotificationBanner</a> <code>通知栏提醒</code></li>\n<li><a href=\"https://github.com/zhangao0086/DKImagePickerController\"><code>DKImagePickerController</code></a> <span id=\"more\"></span>\n系统相册</li>\n<li><a href=\"https://github.com/SwipeCellKit/SwipeCellKit\">SwipeCellKit</a> <code>系统邮箱手势的Cell</code></li>\n<li><a href=\"https://github.com/jonathantribouharet/JTCalendar\">JTCalendar</a> <code>日历</code></li>\n<li><a href=\"https://github.com/CVCalendar/CVCalendar\">CVCalendar</a> <code>日历</code></li>\n<li><a href=\"https://github.com/xmartlabs/XLForm\">XLForm</a> <code>表单系统</code></li>\n<li><a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a> <code>表单系统</code><h2 id=\"二、Extension\"><a href=\"#二、Extension\" class=\"headerlink\" title=\"二、Extension\"></a>二、<code>Extension</code></h2></li>\n<li><a href=\"https://github.com/SwifterSwift/SwifterSwift\">SwifterSwift</a><h2 id=\"三、工具\"><a href=\"#三、工具\" class=\"headerlink\" title=\"三、工具\"></a>三、工具</h2></li>\n<li><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">SwiftyJSON</a> <code>JSON转Model</code><h2 id=\"四、其他\"><a href=\"#四、其他\" class=\"headerlink\" title=\"四、其他\"></a>四、其他</h2></li>\n<li><a href=\"https://github.com/byoungd/English-level-up-tips-for-Chinese\">英语进阶指南</a></li>\n<li><a href=\"https://github.com/fancymax/12306ForMac\">12306ForMac</a> <code>12306 订票/捡票 助手</code></li>\n<li><a href=\"https://github.com/wangshub/wechat_jump_game\"><code>跳一跳</code>辅助</a></li>\n<li><a href=\"https://github.com/rrdssfgcs/wenda-helper\"><code>答题App辅助</code></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、UI相关\"><a href=\"#一、UI相关\" class=\"headerlink\" title=\"一、UI相关\"></a>一、<code>UI</code>相关</h2><ul>\n<li><a href=\"https://github.com/Daltron/NotificationBanner\">NotificationBanner</a> <code>通知栏提醒</code></li>\n<li><a href=\"https://github.com/zhangao0086/DKImagePickerController\"><code>DKImagePickerController</code></a>","more":"系统相册</li>\n<li><a href=\"https://github.com/SwipeCellKit/SwipeCellKit\">SwipeCellKit</a> <code>系统邮箱手势的Cell</code></li>\n<li><a href=\"https://github.com/jonathantribouharet/JTCalendar\">JTCalendar</a> <code>日历</code></li>\n<li><a href=\"https://github.com/CVCalendar/CVCalendar\">CVCalendar</a> <code>日历</code></li>\n<li><a href=\"https://github.com/xmartlabs/XLForm\">XLForm</a> <code>表单系统</code></li>\n<li><a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a> <code>表单系统</code><h2 id=\"二、Extension\"><a href=\"#二、Extension\" class=\"headerlink\" title=\"二、Extension\"></a>二、<code>Extension</code></h2></li>\n<li><a href=\"https://github.com/SwifterSwift/SwifterSwift\">SwifterSwift</a><h2 id=\"三、工具\"><a href=\"#三、工具\" class=\"headerlink\" title=\"三、工具\"></a>三、工具</h2></li>\n<li><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">SwiftyJSON</a> <code>JSON转Model</code><h2 id=\"四、其他\"><a href=\"#四、其他\" class=\"headerlink\" title=\"四、其他\"></a>四、其他</h2></li>\n<li><a href=\"https://github.com/byoungd/English-level-up-tips-for-Chinese\">英语进阶指南</a></li>\n<li><a href=\"https://github.com/fancymax/12306ForMac\">12306ForMac</a> <code>12306 订票/捡票 助手</code></li>\n<li><a href=\"https://github.com/wangshub/wechat_jump_game\"><code>跳一跳</code>辅助</a></li>\n<li><a href=\"https://github.com/rrdssfgcs/wenda-helper\"><code>答题App辅助</code></a></li>\n</ul>"},{"title":"NSArray对所有元素操作","date":"2014-07-23T12:45:17.000Z","_content":"\n看别人的源码无意中看到一个方法,是`NSArray`的实例方法:\n\n```\n- (void)makeObjectsPerformSelector:(SEL)aSelector;\n- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument;\n```\n\n<!--more-->\n\n用处是让NSArray中的每一个元素都执行`aSelector`方法,还可以带参数`argument`.\n体验如下:\n\n```\n[[self.view subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];\n```\n\n再也不用`for`循环去删除每一个子`view`了.","source":"_posts/NSArray对所有元素操作.markdown","raw":"---\ntitle: \"NSArray对所有元素操作\"\ndate: 2014-07-23 20:45:17 +0800\ntags: \n    - NSArray\ncategories:\n    - iOS\n\n---\n\n看别人的源码无意中看到一个方法,是`NSArray`的实例方法:\n\n```\n- (void)makeObjectsPerformSelector:(SEL)aSelector;\n- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument;\n```\n\n<!--more-->\n\n用处是让NSArray中的每一个元素都执行`aSelector`方法,还可以带参数`argument`.\n体验如下:\n\n```\n[[self.view subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];\n```\n\n再也不用`for`循环去删除每一个子`view`了.","slug":"NSArray对所有元素操作","published":1,"updated":"2021-08-27T13:34:42.822Z","_id":"cksu5b14r00178c206ghb9hwe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>看别人的源码无意中看到一个方法,是<code>NSArray</code>的实例方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)makeObjectsPerformSelector:(SEL)aSelector;</span><br><span class=\"line\">- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>用处是让NSArray中的每一个元素都执行<code>aSelector</code>方法,还可以带参数<code>argument</code>.<br>体验如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[self.view subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];</span><br></pre></td></tr></table></figure>\n\n<p>再也不用<code>for</code>循环去删除每一个子<code>view</code>了.</p>\n","site":{"data":{}},"excerpt":"<p>看别人的源码无意中看到一个方法,是<code>NSArray</code>的实例方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)makeObjectsPerformSelector:(SEL)aSelector;</span><br><span class=\"line\">- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument;</span><br></pre></td></tr></table></figure>","more":"<p>用处是让NSArray中的每一个元素都执行<code>aSelector</code>方法,还可以带参数<code>argument</code>.<br>体验如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[self.view subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];</span><br></pre></td></tr></table></figure>\n\n<p>再也不用<code>for</code>循环去删除每一个子<code>view</code>了.</p>"},{"title":"Podfile引用第三方库设定版本","date":"2015-09-25T00:11:54.000Z","_content":"\n\n在使用`cocoapods`引用第三方库时，可以使用如下规则规定引用三方库的版本。\n\n<!--more-->\n\n```\npod 'AFNetworking’      // 不显式指定依赖库版本，表示每次都获取最新版本\npod 'AFNetworking’,  '2.0’     //只使用2.0版本\npod 'AFNetworking’, '>2.0'     //使用高于2.0的版本\npod 'AFNetworking’, '>=2.0'     //使用大于或等于2.0的版本\npod 'AFNetworking’, '<2.0'     //使用小于2.0的版本\npod 'AFNetworking’, '<=2.0'     //使用小于或等于2.0的版本\npod 'AFNetworking’, '~>0.1.2'     //使用大于等于0.1.2但小于0.2的版本，相当于>=0.1.2并且<0.2.0\npod 'AFNetworking’, '~>0.1'     //使用大于等于0.1但小于1.0的版本\npod 'AFNetworking’, '~>0'     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本\n```","source":"_posts/Podfile引用第三方库设定版本.markdown","raw":"---\ntitle: \"Podfile引用第三方库设定版本\"\ndate: 2015-09-25 08:11:54 +0800\ntags: \n    - CocoaPods\ncategories:\n    - iOS\n---\n\n\n在使用`cocoapods`引用第三方库时，可以使用如下规则规定引用三方库的版本。\n\n<!--more-->\n\n```\npod 'AFNetworking’      // 不显式指定依赖库版本，表示每次都获取最新版本\npod 'AFNetworking’,  '2.0’     //只使用2.0版本\npod 'AFNetworking’, '>2.0'     //使用高于2.0的版本\npod 'AFNetworking’, '>=2.0'     //使用大于或等于2.0的版本\npod 'AFNetworking’, '<2.0'     //使用小于2.0的版本\npod 'AFNetworking’, '<=2.0'     //使用小于或等于2.0的版本\npod 'AFNetworking’, '~>0.1.2'     //使用大于等于0.1.2但小于0.2的版本，相当于>=0.1.2并且<0.2.0\npod 'AFNetworking’, '~>0.1'     //使用大于等于0.1但小于1.0的版本\npod 'AFNetworking’, '~>0'     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本\n```","slug":"Podfile引用第三方库设定版本","published":1,"updated":"2021-09-05T14:35:28.418Z","_id":"cksu5b14s001b8c201xypbk3n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在使用<code>cocoapods</code>引用第三方库时，可以使用如下规则规定引用三方库的版本。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;AFNetworking’      // 不显式指定依赖库版本，表示每次都获取最新版本</span><br><span class=\"line\">pod &#x27;AFNetworking’,  &#x27;2.0’     //只使用2.0版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&gt;2.0&#x27;     //使用高于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&gt;=2.0&#x27;     //使用大于或等于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&lt;2.0&#x27;     //使用小于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&lt;=2.0&#x27;     //使用小于或等于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;~&gt;0.1.2&#x27;     //使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;~&gt;0.1&#x27;     //使用大于等于0.1但小于1.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;~&gt;0&#x27;     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在使用<code>cocoapods</code>引用第三方库时，可以使用如下规则规定引用三方库的版本。</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;AFNetworking’      // 不显式指定依赖库版本，表示每次都获取最新版本</span><br><span class=\"line\">pod &#x27;AFNetworking’,  &#x27;2.0’     //只使用2.0版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&gt;2.0&#x27;     //使用高于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&gt;=2.0&#x27;     //使用大于或等于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&lt;2.0&#x27;     //使用小于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;&lt;=2.0&#x27;     //使用小于或等于2.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;~&gt;0.1.2&#x27;     //使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;~&gt;0.1&#x27;     //使用大于等于0.1但小于1.0的版本</span><br><span class=\"line\">pod &#x27;AFNetworking’, &#x27;~&gt;0&#x27;     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</span><br></pre></td></tr></table></figure>"},{"title":"Runtime在Storyboard中的应用","date":"2014-09-01T13:11:19.000Z","_content":"# 正文\nRuntime真是无处不在啊,打开Storyboard后,我们添加一个View到界面中,选中View,切换属性卡到第三个,有一项是 `User Defined Runtime Attributes`,我们添加如下图两个`Key Path`并设置值.\n<!--more-->\n\n{% img /images/blog/runtime_storyboard_1.png %}\n\n然后运行,果然可以看到我们设置的属性生效了.顿感强大.\n\n{% img /images/blog/runtime_storyboard_2.png %}\n\n\n","source":"_posts/Runtime在Storyboard中的应用.markdown","raw":"---\ntitle: \"Runtime在Storyboard中的应用\"\ndate: 2014-09-01 21:11:19 +0800\ntags: \n    - Runtime\ncategories:\n    - iOS\n\n---\n# 正文\nRuntime真是无处不在啊,打开Storyboard后,我们添加一个View到界面中,选中View,切换属性卡到第三个,有一项是 `User Defined Runtime Attributes`,我们添加如下图两个`Key Path`并设置值.\n<!--more-->\n\n{% img /images/blog/runtime_storyboard_1.png %}\n\n然后运行,果然可以看到我们设置的属性生效了.顿感强大.\n\n{% img /images/blog/runtime_storyboard_2.png %}\n\n\n","slug":"Runtime在Storyboard中的应用","published":1,"updated":"2021-08-27T13:34:42.822Z","_id":"cksu5b14v001d8c20h11w13m4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>Runtime真是无处不在啊,打开Storyboard后,我们添加一个View到界面中,选中View,切换属性卡到第三个,有一项是 <code>User Defined Runtime Attributes</code>,我们添加如下图两个<code>Key Path</code>并设置值.</p>\n<span id=\"more\"></span>\n\n<img src=\"/images/blog/runtime_storyboard_1.png\" class=\"\">\n\n<p>然后运行,果然可以看到我们设置的属性生效了.顿感强大.</p>\n<img src=\"/images/blog/runtime_storyboard_2.png\" class=\"\">\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>Runtime真是无处不在啊,打开Storyboard后,我们添加一个View到界面中,选中View,切换属性卡到第三个,有一项是 <code>User Defined Runtime Attributes</code>,我们添加如下图两个<code>Key Path</code>并设置值.</p>","more":"<img src=\"/images/blog/runtime_storyboard_1.png\" class=\"\">\n\n<p>然后运行,果然可以看到我们设置的属性生效了.顿感强大.</p>\n<img src=\"/images/blog/runtime_storyboard_2.png\" class=\"\">"},{"title":"Swift4.0引用3.0第三方库","date":"2017-10-21T15:56:21.000Z","_content":"\n`Swift`已经发布了`4.0`版本，在`Xcode9`中新建项目后，默认是使用`4.0`语法的。项目中的引用的第三方库，虽然有很多已经发不了`4.0`版本，但是还是有一些未及时更新的，那在作者未更新之前我们是否有更好的办法来使用这些第三方库呢？答案当然是**肯定**的，`Xcode9`中是同时支持`3.2`和`4.0`语法的。具体的设置可以看下图。\n\n<!--more-->\n\n![设置Swift语法版本](http://upload-images.jianshu.io/upload_images/606479-6a28ff6e929e5fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n那么下面就说说如何设置同时支持`3.2`和`4.0`。\n\n1. 项目中如果使用`Cocoapods`来管理第三方库时，可以找到不支持`4.0`语法的库所在`target`，然后找到`Swift Language Version`选项，改为`3.2`，然后就可以顺利编译通过了。\n![Cocoapods库设置](http://upload-images.jianshu.io/upload_images/606479-6d08d94bf9c81df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 如果还有以源码集成进项目的，那就选择`Edit > Convert > To Current Swift Syntax..`吧","source":"_posts/Swift4.0引用3.0第三方库.md","raw":"---\ntitle: Swift4.0引用3.0第三方库\ndate: 2017-10-21 23:56:21\ntags: [Swift4, iOS]\ncategories: [iOS]\n---\n\n`Swift`已经发布了`4.0`版本，在`Xcode9`中新建项目后，默认是使用`4.0`语法的。项目中的引用的第三方库，虽然有很多已经发不了`4.0`版本，但是还是有一些未及时更新的，那在作者未更新之前我们是否有更好的办法来使用这些第三方库呢？答案当然是**肯定**的，`Xcode9`中是同时支持`3.2`和`4.0`语法的。具体的设置可以看下图。\n\n<!--more-->\n\n![设置Swift语法版本](http://upload-images.jianshu.io/upload_images/606479-6a28ff6e929e5fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n那么下面就说说如何设置同时支持`3.2`和`4.0`。\n\n1. 项目中如果使用`Cocoapods`来管理第三方库时，可以找到不支持`4.0`语法的库所在`target`，然后找到`Swift Language Version`选项，改为`3.2`，然后就可以顺利编译通过了。\n![Cocoapods库设置](http://upload-images.jianshu.io/upload_images/606479-6d08d94bf9c81df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 如果还有以源码集成进项目的，那就选择`Edit > Convert > To Current Swift Syntax..`吧","slug":"Swift4.0引用3.0第三方库","published":1,"updated":"2021-08-27T13:34:42.822Z","_id":"cksu5b14w001h8c208rcq7abf","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>Swift</code>已经发布了<code>4.0</code>版本，在<code>Xcode9</code>中新建项目后，默认是使用<code>4.0</code>语法的。项目中的引用的第三方库，虽然有很多已经发不了<code>4.0</code>版本，但是还是有一些未及时更新的，那在作者未更新之前我们是否有更好的办法来使用这些第三方库呢？答案当然是<strong>肯定</strong>的，<code>Xcode9</code>中是同时支持<code>3.2</code>和<code>4.0</code>语法的。具体的设置可以看下图。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-6a28ff6e929e5fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置Swift语法版本\"></p>\n<p>那么下面就说说如何设置同时支持<code>3.2</code>和<code>4.0</code>。</p>\n<ol>\n<li><p>项目中如果使用<code>Cocoapods</code>来管理第三方库时，可以找到不支持<code>4.0</code>语法的库所在<code>target</code>，然后找到<code>Swift Language Version</code>选项，改为<code>3.2</code>，然后就可以顺利编译通过了。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-6d08d94bf9c81df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Cocoapods库设置\"></p>\n</li>\n<li><p>如果还有以源码集成进项目的，那就选择<code>Edit &gt; Convert &gt; To Current Swift Syntax..</code>吧</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><code>Swift</code>已经发布了<code>4.0</code>版本，在<code>Xcode9</code>中新建项目后，默认是使用<code>4.0</code>语法的。项目中的引用的第三方库，虽然有很多已经发不了<code>4.0</code>版本，但是还是有一些未及时更新的，那在作者未更新之前我们是否有更好的办法来使用这些第三方库呢？答案当然是<strong>肯定</strong>的，<code>Xcode9</code>中是同时支持<code>3.2</code>和<code>4.0</code>语法的。具体的设置可以看下图。</p>","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-6a28ff6e929e5fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置Swift语法版本\"></p>\n<p>那么下面就说说如何设置同时支持<code>3.2</code>和<code>4.0</code>。</p>\n<ol>\n<li><p>项目中如果使用<code>Cocoapods</code>来管理第三方库时，可以找到不支持<code>4.0</code>语法的库所在<code>target</code>，然后找到<code>Swift Language Version</code>选项，改为<code>3.2</code>，然后就可以顺利编译通过了。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-6d08d94bf9c81df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Cocoapods库设置\"></p>\n</li>\n<li><p>如果还有以源码集成进项目的，那就选择<code>Edit &gt; Convert &gt; To Current Swift Syntax..</code>吧</p>\n</li>\n</ol>"},{"title":"Swift关于!和?的Tip","date":"2018-02-06T13:45:07.000Z","_content":"\n\n## 前言\n> Q: 为什么我现在还在写这些入门级别的语法 `Tip` 呢？\n>\n> A: 因为我现在才开始学习 `Swift` 呗~\n>\n> Q: 为什么我现在才开始学习 `Swift` 呢？\n>\n> A: 因为懒呗~\n\n<!--more-->\n\n哈哈~分享一些自己看到的小 `Tip` 给大家，让那些也才入门 `Swift` 的童鞋也能多了解一些~\n\n## 关于 `!` 和 `?`\n今天这里不打算介绍为什么 `Swift` 里面会有 `!` 和 `?`，有什么不明白的可以看看这里：[Swift中 ！和 ？的区别及使用\n](https://www.jianshu.com/p/89a2afb82488)\n\n现在我们看一个平时用到的例子：\n\n```\nlet width: Int? = 3\nvar area: Int?\n    \narea = width! * width!\n```\n\n为什么这里 `let area = width! * width!` 会有这么多的 `!` 呢？因为机（愚）智（蠢）的 `Xcode` 建议我们这样写。最关键的是如果 `width` 真的就是 `nil` 会这么样呢？机智如你，会 `Crash`。\n\n那保险一点的写法应该是这样子的：\n\n```\nlet width: Int? = 3\nvar area: Int?\n\nif let tmp = width {\n    area = tmp * tmp\n}\nelse {\n    area = nil\n}\n```\n完全不符合 `Swift` 作为一门`优雅`的语言的称号。\n\n## Optional Map\n面对上面的问题，有个很优雅的写法，那就是 `Optional Map`。让我们先看一下 `Optional` 中关于 `map` 的声明。\n\n```\npublic enum Optional<Wrapped> : ExpressibleByNilLiteral {\n    public func map<U>(_ transform: (Wrapped) throws -> U) rethrows -> U?\n}\n\n```\n该方法的作用是，如果输入有值，则进入 `transform` 的闭包进行变化，并返回一个 `U?` ;如果输入就是 `nil` 的话，则直接返回 `nil` 的 `U?`。\n\n那么我们就有如下优雅的写法了：\n\n```\nlet width: Int? = 3\nlet area = width.map {\n    $0 * $0\n}\n```\n\n## 更多\n我们还能在 `Collection` 中看到 `map` 的身影。\n\n```\nextension Collection {\n\n    /// Returns an array containing the results of mapping the given closure\n    /// over the sequence's elements.\n    ///\n    /// In this example, `map` is used first to convert the names in the array\n    /// to lowercase strings and then to count their characters.\n    ///\n    ///     let cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\n    ///     let lowercaseNames = cast.map { $0.lowercaseString }\n    ///     // 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\n    ///     let letterCounts = cast.map { $0.count }\n    ///     // 'letterCounts' == [6, 6, 3, 4]\n    ///\n    /// - Parameter transform: A mapping closure. `transform` accepts an\n    ///   element of this sequence as its parameter and returns a transformed\n    ///   value of the same or of a different type.\n    /// - Returns: An array containing the transformed elements of this\n    ///   sequence.\n    public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n}\n```\n注释的很清楚了，就不多介绍了。值得注意的是 `Collection` 本身是一个 `protocol`，所以所有实现了 `Collection` 协议的都有这个方法。","source":"_posts/Swift关于解包的Tip.md","raw":"---\ntitle: Swift关于!和?的Tip\ndate: 2018-02-06 21:45:07\ntags: \n    - Swift\ncategories:\n    - iOS\n---\n\n\n## 前言\n> Q: 为什么我现在还在写这些入门级别的语法 `Tip` 呢？\n>\n> A: 因为我现在才开始学习 `Swift` 呗~\n>\n> Q: 为什么我现在才开始学习 `Swift` 呢？\n>\n> A: 因为懒呗~\n\n<!--more-->\n\n哈哈~分享一些自己看到的小 `Tip` 给大家，让那些也才入门 `Swift` 的童鞋也能多了解一些~\n\n## 关于 `!` 和 `?`\n今天这里不打算介绍为什么 `Swift` 里面会有 `!` 和 `?`，有什么不明白的可以看看这里：[Swift中 ！和 ？的区别及使用\n](https://www.jianshu.com/p/89a2afb82488)\n\n现在我们看一个平时用到的例子：\n\n```\nlet width: Int? = 3\nvar area: Int?\n    \narea = width! * width!\n```\n\n为什么这里 `let area = width! * width!` 会有这么多的 `!` 呢？因为机（愚）智（蠢）的 `Xcode` 建议我们这样写。最关键的是如果 `width` 真的就是 `nil` 会这么样呢？机智如你，会 `Crash`。\n\n那保险一点的写法应该是这样子的：\n\n```\nlet width: Int? = 3\nvar area: Int?\n\nif let tmp = width {\n    area = tmp * tmp\n}\nelse {\n    area = nil\n}\n```\n完全不符合 `Swift` 作为一门`优雅`的语言的称号。\n\n## Optional Map\n面对上面的问题，有个很优雅的写法，那就是 `Optional Map`。让我们先看一下 `Optional` 中关于 `map` 的声明。\n\n```\npublic enum Optional<Wrapped> : ExpressibleByNilLiteral {\n    public func map<U>(_ transform: (Wrapped) throws -> U) rethrows -> U?\n}\n\n```\n该方法的作用是，如果输入有值，则进入 `transform` 的闭包进行变化，并返回一个 `U?` ;如果输入就是 `nil` 的话，则直接返回 `nil` 的 `U?`。\n\n那么我们就有如下优雅的写法了：\n\n```\nlet width: Int? = 3\nlet area = width.map {\n    $0 * $0\n}\n```\n\n## 更多\n我们还能在 `Collection` 中看到 `map` 的身影。\n\n```\nextension Collection {\n\n    /// Returns an array containing the results of mapping the given closure\n    /// over the sequence's elements.\n    ///\n    /// In this example, `map` is used first to convert the names in the array\n    /// to lowercase strings and then to count their characters.\n    ///\n    ///     let cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\n    ///     let lowercaseNames = cast.map { $0.lowercaseString }\n    ///     // 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\n    ///     let letterCounts = cast.map { $0.count }\n    ///     // 'letterCounts' == [6, 6, 3, 4]\n    ///\n    /// - Parameter transform: A mapping closure. `transform` accepts an\n    ///   element of this sequence as its parameter and returns a transformed\n    ///   value of the same or of a different type.\n    /// - Returns: An array containing the transformed elements of this\n    ///   sequence.\n    public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n}\n```\n注释的很清楚了，就不多介绍了。值得注意的是 `Collection` 本身是一个 `protocol`，所以所有实现了 `Collection` 协议的都有这个方法。","slug":"Swift关于解包的Tip","published":1,"updated":"2021-08-27T13:34:42.822Z","_id":"cksu5b14x001l8c207dhecrko","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>Q: 为什么我现在还在写这些入门级别的语法 <code>Tip</code> 呢？</p>\n<p>A: 因为我现在才开始学习 <code>Swift</code> 呗~</p>\n<p>Q: 为什么我现在才开始学习 <code>Swift</code> 呢？</p>\n<p>A: 因为懒呗~</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>哈哈<del>分享一些自己看到的小 <code>Tip</code> 给大家，让那些也才入门 <code>Swift</code> 的童鞋也能多了解一些</del></p>\n<h2 id=\"关于-和\"><a href=\"#关于-和\" class=\"headerlink\" title=\"关于 ! 和 ?\"></a>关于 <code>!</code> 和 <code>?</code></h2><p>今天这里不打算介绍为什么 <code>Swift</code> 里面会有 <code>!</code> 和 <code>?</code>，有什么不明白的可以看看这里：<a href=\"https://www.jianshu.com/p/89a2afb82488\">Swift中 ！和 ？的区别及使用\n</a></p>\n<p>现在我们看一个平时用到的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let width: Int? = 3</span><br><span class=\"line\">var area: Int?</span><br><span class=\"line\">    </span><br><span class=\"line\">area = width! * width!</span><br></pre></td></tr></table></figure>\n\n<p>为什么这里 <code>let area = width! * width!</code> 会有这么多的 <code>!</code> 呢？因为机（愚）智（蠢）的 <code>Xcode</code> 建议我们这样写。最关键的是如果 <code>width</code> 真的就是 <code>nil</code> 会这么样呢？机智如你，会 <code>Crash</code>。</p>\n<p>那保险一点的写法应该是这样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let width: Int? = 3</span><br><span class=\"line\">var area: Int?</span><br><span class=\"line\"></span><br><span class=\"line\">if let tmp = width &#123;</span><br><span class=\"line\">    area = tmp * tmp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">    area = nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完全不符合 <code>Swift</code> 作为一门<code>优雅</code>的语言的称号。</p>\n<h2 id=\"Optional-Map\"><a href=\"#Optional-Map\" class=\"headerlink\" title=\"Optional Map\"></a>Optional Map</h2><p>面对上面的问题，有个很优雅的写法，那就是 <code>Optional Map</code>。让我们先看一下 <code>Optional</code> 中关于 <code>map</code> 的声明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Optional&lt;Wrapped&gt; : ExpressibleByNilLiteral &#123;</span><br><span class=\"line\">    public func map&lt;U&gt;(_ transform: (Wrapped) throws -&gt; U) rethrows -&gt; U?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>该方法的作用是，如果输入有值，则进入 <code>transform</code> 的闭包进行变化，并返回一个 <code>U?</code> ;如果输入就是 <code>nil</code> 的话，则直接返回 <code>nil</code> 的 <code>U?</code>。</p>\n<p>那么我们就有如下优雅的写法了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let width: Int? = 3</span><br><span class=\"line\">let area = width.map &#123;</span><br><span class=\"line\">    $0 * $0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>我们还能在 <code>Collection</code> 中看到 <code>map</code> 的身影。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension Collection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// Returns an array containing the results of mapping the given closure</span><br><span class=\"line\">    /// over the sequence&#x27;s elements.</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// In this example, `map` is used first to convert the names in the array</span><br><span class=\"line\">    /// to lowercase strings and then to count their characters.</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    ///     let cast = [&quot;Vivien&quot;, &quot;Marlon&quot;, &quot;Kim&quot;, &quot;Karl&quot;]</span><br><span class=\"line\">    ///     let lowercaseNames = cast.map &#123; $0.lowercaseString &#125;</span><br><span class=\"line\">    ///     // &#x27;lowercaseNames&#x27; == [&quot;vivien&quot;, &quot;marlon&quot;, &quot;kim&quot;, &quot;karl&quot;]</span><br><span class=\"line\">    ///     let letterCounts = cast.map &#123; $0.count &#125;</span><br><span class=\"line\">    ///     // &#x27;letterCounts&#x27; == [6, 6, 3, 4]</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameter transform: A mapping closure. `transform` accepts an</span><br><span class=\"line\">    ///   element of this sequence as its parameter and returns a transformed</span><br><span class=\"line\">    ///   value of the same or of a different type.</span><br><span class=\"line\">    /// - Returns: An array containing the transformed elements of this</span><br><span class=\"line\">    ///   sequence.</span><br><span class=\"line\">    public func map&lt;T&gt;(_ transform: (Self.Element) throws -&gt; T) rethrows -&gt; [T]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注释的很清楚了，就不多介绍了。值得注意的是 <code>Collection</code> 本身是一个 <code>protocol</code>，所以所有实现了 <code>Collection</code> 协议的都有这个方法。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>Q: 为什么我现在还在写这些入门级别的语法 <code>Tip</code> 呢？</p>\n<p>A: 因为我现在才开始学习 <code>Swift</code> 呗~</p>\n<p>Q: 为什么我现在才开始学习 <code>Swift</code> 呢？</p>\n<p>A: 因为懒呗~</p>\n</blockquote>","more":"<p>哈哈<del>分享一些自己看到的小 <code>Tip</code> 给大家，让那些也才入门 <code>Swift</code> 的童鞋也能多了解一些</del></p>\n<h2 id=\"关于-和\"><a href=\"#关于-和\" class=\"headerlink\" title=\"关于 ! 和 ?\"></a>关于 <code>!</code> 和 <code>?</code></h2><p>今天这里不打算介绍为什么 <code>Swift</code> 里面会有 <code>!</code> 和 <code>?</code>，有什么不明白的可以看看这里：<a href=\"https://www.jianshu.com/p/89a2afb82488\">Swift中 ！和 ？的区别及使用\n</a></p>\n<p>现在我们看一个平时用到的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let width: Int? = 3</span><br><span class=\"line\">var area: Int?</span><br><span class=\"line\">    </span><br><span class=\"line\">area = width! * width!</span><br></pre></td></tr></table></figure>\n\n<p>为什么这里 <code>let area = width! * width!</code> 会有这么多的 <code>!</code> 呢？因为机（愚）智（蠢）的 <code>Xcode</code> 建议我们这样写。最关键的是如果 <code>width</code> 真的就是 <code>nil</code> 会这么样呢？机智如你，会 <code>Crash</code>。</p>\n<p>那保险一点的写法应该是这样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let width: Int? = 3</span><br><span class=\"line\">var area: Int?</span><br><span class=\"line\"></span><br><span class=\"line\">if let tmp = width &#123;</span><br><span class=\"line\">    area = tmp * tmp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">    area = nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完全不符合 <code>Swift</code> 作为一门<code>优雅</code>的语言的称号。</p>\n<h2 id=\"Optional-Map\"><a href=\"#Optional-Map\" class=\"headerlink\" title=\"Optional Map\"></a>Optional Map</h2><p>面对上面的问题，有个很优雅的写法，那就是 <code>Optional Map</code>。让我们先看一下 <code>Optional</code> 中关于 <code>map</code> 的声明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Optional&lt;Wrapped&gt; : ExpressibleByNilLiteral &#123;</span><br><span class=\"line\">    public func map&lt;U&gt;(_ transform: (Wrapped) throws -&gt; U) rethrows -&gt; U?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>该方法的作用是，如果输入有值，则进入 <code>transform</code> 的闭包进行变化，并返回一个 <code>U?</code> ;如果输入就是 <code>nil</code> 的话，则直接返回 <code>nil</code> 的 <code>U?</code>。</p>\n<p>那么我们就有如下优雅的写法了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let width: Int? = 3</span><br><span class=\"line\">let area = width.map &#123;</span><br><span class=\"line\">    $0 * $0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>我们还能在 <code>Collection</code> 中看到 <code>map</code> 的身影。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension Collection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// Returns an array containing the results of mapping the given closure</span><br><span class=\"line\">    /// over the sequence&#x27;s elements.</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// In this example, `map` is used first to convert the names in the array</span><br><span class=\"line\">    /// to lowercase strings and then to count their characters.</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    ///     let cast = [&quot;Vivien&quot;, &quot;Marlon&quot;, &quot;Kim&quot;, &quot;Karl&quot;]</span><br><span class=\"line\">    ///     let lowercaseNames = cast.map &#123; $0.lowercaseString &#125;</span><br><span class=\"line\">    ///     // &#x27;lowercaseNames&#x27; == [&quot;vivien&quot;, &quot;marlon&quot;, &quot;kim&quot;, &quot;karl&quot;]</span><br><span class=\"line\">    ///     let letterCounts = cast.map &#123; $0.count &#125;</span><br><span class=\"line\">    ///     // &#x27;letterCounts&#x27; == [6, 6, 3, 4]</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameter transform: A mapping closure. `transform` accepts an</span><br><span class=\"line\">    ///   element of this sequence as its parameter and returns a transformed</span><br><span class=\"line\">    ///   value of the same or of a different type.</span><br><span class=\"line\">    /// - Returns: An array containing the transformed elements of this</span><br><span class=\"line\">    ///   sequence.</span><br><span class=\"line\">    public func map&lt;T&gt;(_ transform: (Self.Element) throws -&gt; T) rethrows -&gt; [T]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注释的很清楚了，就不多介绍了。值得注意的是 <code>Collection</code> 本身是一个 <code>protocol</code>，所以所有实现了 <code>Collection</code> 协议的都有这个方法。</p>"},{"title":"UIScrollView点击StatusBar返回顶部失效的解决","date":"2015-08-21T00:47:45.000Z","_content":"\n前几天看到一篇文章，关于如何解决在一个`Vieww`中有多个`UIScrollView`或者`UIScrollView`子类时，点击`StatusBar`无法使`UIScrollView`返回到顶部的文章。总得思想是自定义一个`View`，然后覆盖在`StatusBar`上，给这个`View`添加点击事件。具体文章链接在[这里](http://www.cocoachina.com/ios/20150814/12949.html)。有兴趣的朋友可以看一下。\n<!--more-->\n其实我们查看`UIScrollView`的头文件就可以找到这段注释：\n\n```\n// When the user taps the status bar, the scroll view beneath the touch which is closest to the status bar will be scrolled to top, but only if its `scrollsToTop` property is YES, its delegate does not return NO from `shouldScrollViewScrollToTop`, and it is not already at the top.\n// On iPhone, we execute this gesture only if there's one on-screen scroll view with `scrollsToTop` == YES. If more than one is found, none will be scrolled.\n@property(nonatomic) BOOL  scrollsToTop;          // default is YES.\n```\n\n这样我们就可以很清楚的了解到，`scrollsToTop`的默认值是`YES`，然而当有多个`UIScrollView`的时候，用户点击`StatusBar`，系统就不知道让哪一个`UIScrollView`来执行`scrollsToTop`这个动作了，所以就导致失效了。\n\n这样一来，解决方法就很简单了，设置你想要执行`scrollsToTop`的`UIScrollView`的`@property(nonatomic) BOOL  scrollsToTop;`属性值为`YES`，其他的`UIScrollView`都为`NO`即可。\n\n注意：凡是`UIScrollView`以及`UIScrollView`的子类都要设置。如:`UITableView`，`UIWebView`，`UICollectionView`等。\n","source":"_posts/UIScrollView点击StatusBar返回顶部失效的解决.markdown","raw":"---\ntitle: \"UIScrollView点击StatusBar返回顶部失效的解决\"\ndate: 2015-08-21 08:47:45 +0800\ntags: \n    - ScrollView\ncategories:\n    - iOS\n\n---\n\n前几天看到一篇文章，关于如何解决在一个`Vieww`中有多个`UIScrollView`或者`UIScrollView`子类时，点击`StatusBar`无法使`UIScrollView`返回到顶部的文章。总得思想是自定义一个`View`，然后覆盖在`StatusBar`上，给这个`View`添加点击事件。具体文章链接在[这里](http://www.cocoachina.com/ios/20150814/12949.html)。有兴趣的朋友可以看一下。\n<!--more-->\n其实我们查看`UIScrollView`的头文件就可以找到这段注释：\n\n```\n// When the user taps the status bar, the scroll view beneath the touch which is closest to the status bar will be scrolled to top, but only if its `scrollsToTop` property is YES, its delegate does not return NO from `shouldScrollViewScrollToTop`, and it is not already at the top.\n// On iPhone, we execute this gesture only if there's one on-screen scroll view with `scrollsToTop` == YES. If more than one is found, none will be scrolled.\n@property(nonatomic) BOOL  scrollsToTop;          // default is YES.\n```\n\n这样我们就可以很清楚的了解到，`scrollsToTop`的默认值是`YES`，然而当有多个`UIScrollView`的时候，用户点击`StatusBar`，系统就不知道让哪一个`UIScrollView`来执行`scrollsToTop`这个动作了，所以就导致失效了。\n\n这样一来，解决方法就很简单了，设置你想要执行`scrollsToTop`的`UIScrollView`的`@property(nonatomic) BOOL  scrollsToTop;`属性值为`YES`，其他的`UIScrollView`都为`NO`即可。\n\n注意：凡是`UIScrollView`以及`UIScrollView`的子类都要设置。如:`UITableView`，`UIWebView`，`UICollectionView`等。\n","slug":"UIScrollView点击StatusBar返回顶部失效的解决","published":1,"updated":"2021-08-27T13:34:42.823Z","_id":"cksu5b14y001o8c20968m1r5c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前几天看到一篇文章，关于如何解决在一个<code>Vieww</code>中有多个<code>UIScrollView</code>或者<code>UIScrollView</code>子类时，点击<code>StatusBar</code>无法使<code>UIScrollView</code>返回到顶部的文章。总得思想是自定义一个<code>View</code>，然后覆盖在<code>StatusBar</code>上，给这个<code>View</code>添加点击事件。具体文章链接在<a href=\"http://www.cocoachina.com/ios/20150814/12949.html\">这里</a>。有兴趣的朋友可以看一下。</p>\n<span id=\"more\"></span>\n<p>其实我们查看<code>UIScrollView</code>的头文件就可以找到这段注释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// When the user taps the status bar, the scroll view beneath the touch which is closest to the status bar will be scrolled to top, but only if its `scrollsToTop` property is YES, its delegate does not return NO from `shouldScrollViewScrollToTop`, and it is not already at the top.</span><br><span class=\"line\">// On iPhone, we execute this gesture only if there&#x27;s one on-screen scroll view with `scrollsToTop` == YES. If more than one is found, none will be scrolled.</span><br><span class=\"line\">@property(nonatomic) BOOL  scrollsToTop;          // default is YES.</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以很清楚的了解到，<code>scrollsToTop</code>的默认值是<code>YES</code>，然而当有多个<code>UIScrollView</code>的时候，用户点击<code>StatusBar</code>，系统就不知道让哪一个<code>UIScrollView</code>来执行<code>scrollsToTop</code>这个动作了，所以就导致失效了。</p>\n<p>这样一来，解决方法就很简单了，设置你想要执行<code>scrollsToTop</code>的<code>UIScrollView</code>的<code>@property(nonatomic) BOOL  scrollsToTop;</code>属性值为<code>YES</code>，其他的<code>UIScrollView</code>都为<code>NO</code>即可。</p>\n<p>注意：凡是<code>UIScrollView</code>以及<code>UIScrollView</code>的子类都要设置。如:<code>UITableView</code>，<code>UIWebView</code>，<code>UICollectionView</code>等。</p>\n","site":{"data":{}},"excerpt":"<p>前几天看到一篇文章，关于如何解决在一个<code>Vieww</code>中有多个<code>UIScrollView</code>或者<code>UIScrollView</code>子类时，点击<code>StatusBar</code>无法使<code>UIScrollView</code>返回到顶部的文章。总得思想是自定义一个<code>View</code>，然后覆盖在<code>StatusBar</code>上，给这个<code>View</code>添加点击事件。具体文章链接在<a href=\"http://www.cocoachina.com/ios/20150814/12949.html\">这里</a>。有兴趣的朋友可以看一下。</p>","more":"<p>其实我们查看<code>UIScrollView</code>的头文件就可以找到这段注释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// When the user taps the status bar, the scroll view beneath the touch which is closest to the status bar will be scrolled to top, but only if its `scrollsToTop` property is YES, its delegate does not return NO from `shouldScrollViewScrollToTop`, and it is not already at the top.</span><br><span class=\"line\">// On iPhone, we execute this gesture only if there&#x27;s one on-screen scroll view with `scrollsToTop` == YES. If more than one is found, none will be scrolled.</span><br><span class=\"line\">@property(nonatomic) BOOL  scrollsToTop;          // default is YES.</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以很清楚的了解到，<code>scrollsToTop</code>的默认值是<code>YES</code>，然而当有多个<code>UIScrollView</code>的时候，用户点击<code>StatusBar</code>，系统就不知道让哪一个<code>UIScrollView</code>来执行<code>scrollsToTop</code>这个动作了，所以就导致失效了。</p>\n<p>这样一来，解决方法就很简单了，设置你想要执行<code>scrollsToTop</code>的<code>UIScrollView</code>的<code>@property(nonatomic) BOOL  scrollsToTop;</code>属性值为<code>YES</code>，其他的<code>UIScrollView</code>都为<code>NO</code>即可。</p>\n<p>注意：凡是<code>UIScrollView</code>以及<code>UIScrollView</code>的子类都要设置。如:<code>UITableView</code>，<code>UIWebView</code>，<code>UICollectionView</code>等。</p>"},{"title":"UITableView多余分割线","date":"2014-12-04T06:35:20.000Z","_content":"\n\n`UITableView`会有多余的分割线,不论是否有内容都会显示出来,看着很心塞.\n于是这样:\n\n* 设置`UITableView`的`style`为`Group`\n* 实现以下`DataSource`\n\n<!--more-->\n\n```\n- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section\n{\n\treturn 0.01f;\n}\n\t\t\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section\n{\n\treturn 0.01f;\n}\n```\n\n整个世界安静了.","source":"_posts/UITableView多余分割线.markdown","raw":"---\ntitle: \"UITableView多余分割线\"\ndate: 2014-12-04 14:35:20 +0800\ntags: \n    - UITableView\ncategories:\n    - iOS\n\n---\n\n\n`UITableView`会有多余的分割线,不论是否有内容都会显示出来,看着很心塞.\n于是这样:\n\n* 设置`UITableView`的`style`为`Group`\n* 实现以下`DataSource`\n\n<!--more-->\n\n```\n- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section\n{\n\treturn 0.01f;\n}\n\t\t\n- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section\n{\n\treturn 0.01f;\n}\n```\n\n整个世界安静了.","slug":"UITableView多余分割线","published":1,"updated":"2021-08-27T13:34:42.823Z","_id":"cksu5b14z001s8c203f9f6zrd","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>UITableView</code>会有多余的分割线,不论是否有内容都会显示出来,看着很心塞.<br>于是这样:</p>\n<ul>\n<li>设置<code>UITableView</code>的<code>style</code>为<code>Group</code></li>\n<li>实现以下<code>DataSource</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn 0.01f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn 0.01f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个世界安静了.</p>\n","site":{"data":{}},"excerpt":"<p><code>UITableView</code>会有多余的分割线,不论是否有内容都会显示出来,看着很心塞.<br>于是这样:</p>\n<ul>\n<li>设置<code>UITableView</code>的<code>style</code>为<code>Group</code></li>\n<li>实现以下<code>DataSource</code></li>\n</ul>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn 0.01f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn 0.01f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个世界安静了.</p>"},{"title":"Xcode自动打包ipa脚本","date":"2014-08-11T12:37:31.000Z","_content":"\n首先申明转载:[http://webfrogs.me/2012/09/19/buildipa/](http://webfrogs.me/2012/09/19/buildipa/).\n\niOS打包我们可以借助shell脚本来自动完成这项功能.具体做法如下:\n<!--More-->\n\n* 复制下面代码到文本中并保存为`ipa_build.sh`.\n\n```\n#!/bin/bash\n\n#--------------------------------------------\n# 功能：为Xcode工程打ipa包\n# 作者：ccf\n# E-mail:ccf.developer@gmail.com\n# 创建日期：2012/09/24\n#--------------------------------------------\n\n\n#参数判断\nif [ $# != 2 ] && [ $# != 1 ];then\n    echo \"Number of params error! Need one or two params!\"\n    echo \"1.path of project(necessary) 2.name of ipa file(optional)\"\n    exit    \nelif [ ! -d $1 ];then\n    echo \"Params Error!! The first param must be a dictionary.\"\n    exit    \nfi\n\n#工程绝对路径\ncd $1\nproject_path=$(pwd)\n#build文件夹路径\nbuild_path=${project_path}/build\n\n#工程配置文件路径\nproject_name=$(ls | grep xcodeproj | awk -F.xcodeproj '{print $1}')\nproject_infoplist_path=${project_path}/${project_name}/${project_name}-Info.plist\n#取版本号\nbundleShortVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleShortVersionString\" ${project_infoplist_path})\n#取build值\nbundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${project_infoplist_path})\n#取bundle Identifier前缀\n#bundlePrefix=$(/usr/libexec/PlistBuddy -c \"print CFBundleIdentifier\" `find . -name \"*-Info.plist\"` | awk -F$ '{print $1}')\n\n\n#IPA名称\nif [ $# = 2 ];then\nipa_name=$2\nfi\n\n\n#编译工程\ncd $project_path\nxcodebuild || exit\n\n#打包\ncd $build_path\ntarget_name=$(basename ./Release-iphoneos/*.app | awk -F. '{print $1}')\nif [ $# = 1 ];then\nipa_name=\"${target_name}_${bundleShortVersion}_build${bundleVersion}_$(date +\"%Y%m%d\")\"\nfi\n\nif [ -d ./ipa-build ];then\n    rm -rf ipa-build\nfi\nmkdir -p ipa-build/Payload\ncp -r ./Release-iphoneos/*.app ./ipa-build/Payload/\ncd ipa-build\nzip -r ${ipa_name}.ipa *\nrm -rf Payload\n```\n\n* 为文件添加可执行权限,命令如下:\n\n```\nchmod +x ipa_build.sh\n```\n\n* 使用如下命令开始打包.\n\n```\n./ipa_build ....../ProjectDir Project\n```\n其中的两个参数分别为:项目路径和最终打包的ipa名.\n\n执行完命令后会在`ProjectDir`文件夹下生成`build`文件夹,ipa文件就在`build`下的`ipa-build`文件夹中.","source":"_posts/XCode自动打包ipa脚本.markdown","raw":"---\ntitle: \"Xcode自动打包ipa脚本\"\ndate: 2014-08-11 20:37:31 +0800\ntags: \n    - shell \n    - 自动打包\ncategories:\n    - iOS\n\n---\n\n首先申明转载:[http://webfrogs.me/2012/09/19/buildipa/](http://webfrogs.me/2012/09/19/buildipa/).\n\niOS打包我们可以借助shell脚本来自动完成这项功能.具体做法如下:\n<!--More-->\n\n* 复制下面代码到文本中并保存为`ipa_build.sh`.\n\n```\n#!/bin/bash\n\n#--------------------------------------------\n# 功能：为Xcode工程打ipa包\n# 作者：ccf\n# E-mail:ccf.developer@gmail.com\n# 创建日期：2012/09/24\n#--------------------------------------------\n\n\n#参数判断\nif [ $# != 2 ] && [ $# != 1 ];then\n    echo \"Number of params error! Need one or two params!\"\n    echo \"1.path of project(necessary) 2.name of ipa file(optional)\"\n    exit    \nelif [ ! -d $1 ];then\n    echo \"Params Error!! The first param must be a dictionary.\"\n    exit    \nfi\n\n#工程绝对路径\ncd $1\nproject_path=$(pwd)\n#build文件夹路径\nbuild_path=${project_path}/build\n\n#工程配置文件路径\nproject_name=$(ls | grep xcodeproj | awk -F.xcodeproj '{print $1}')\nproject_infoplist_path=${project_path}/${project_name}/${project_name}-Info.plist\n#取版本号\nbundleShortVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleShortVersionString\" ${project_infoplist_path})\n#取build值\nbundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${project_infoplist_path})\n#取bundle Identifier前缀\n#bundlePrefix=$(/usr/libexec/PlistBuddy -c \"print CFBundleIdentifier\" `find . -name \"*-Info.plist\"` | awk -F$ '{print $1}')\n\n\n#IPA名称\nif [ $# = 2 ];then\nipa_name=$2\nfi\n\n\n#编译工程\ncd $project_path\nxcodebuild || exit\n\n#打包\ncd $build_path\ntarget_name=$(basename ./Release-iphoneos/*.app | awk -F. '{print $1}')\nif [ $# = 1 ];then\nipa_name=\"${target_name}_${bundleShortVersion}_build${bundleVersion}_$(date +\"%Y%m%d\")\"\nfi\n\nif [ -d ./ipa-build ];then\n    rm -rf ipa-build\nfi\nmkdir -p ipa-build/Payload\ncp -r ./Release-iphoneos/*.app ./ipa-build/Payload/\ncd ipa-build\nzip -r ${ipa_name}.ipa *\nrm -rf Payload\n```\n\n* 为文件添加可执行权限,命令如下:\n\n```\nchmod +x ipa_build.sh\n```\n\n* 使用如下命令开始打包.\n\n```\n./ipa_build ....../ProjectDir Project\n```\n其中的两个参数分别为:项目路径和最终打包的ipa名.\n\n执行完命令后会在`ProjectDir`文件夹下生成`build`文件夹,ipa文件就在`build`下的`ipa-build`文件夹中.","slug":"XCode自动打包ipa脚本","published":1,"updated":"2021-08-27T13:34:42.823Z","_id":"cksu5b150001v8c207haw1ta9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先申明转载:<a href=\"http://webfrogs.me/2012/09/19/buildipa/\">http://webfrogs.me/2012/09/19/buildipa/</a>.</p>\n<p>iOS打包我们可以借助shell脚本来自动完成这项功能.具体做法如下:</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>复制下面代码到文本中并保存为<code>ipa_build.sh</code>.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">#--------------------------------------------</span><br><span class=\"line\"># 功能：为Xcode工程打ipa包</span><br><span class=\"line\"># 作者：ccf</span><br><span class=\"line\"># E-mail:ccf.developer@gmail.com</span><br><span class=\"line\"># 创建日期：2012/09/24</span><br><span class=\"line\">#--------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#参数判断</span><br><span class=\"line\">if [ $# != 2 ] &amp;&amp; [ $# != 1 ];then</span><br><span class=\"line\">    echo &quot;Number of params error! Need one or two params!&quot;</span><br><span class=\"line\">    echo &quot;1.path of project(necessary) 2.name of ipa file(optional)&quot;</span><br><span class=\"line\">    exit    </span><br><span class=\"line\">elif [ ! -d $1 ];then</span><br><span class=\"line\">    echo &quot;Params Error!! The first param must be a dictionary.&quot;</span><br><span class=\"line\">    exit    </span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">#工程绝对路径</span><br><span class=\"line\">cd $1</span><br><span class=\"line\">project_path=$(pwd)</span><br><span class=\"line\">#build文件夹路径</span><br><span class=\"line\">build_path=$&#123;project_path&#125;/build</span><br><span class=\"line\"></span><br><span class=\"line\">#工程配置文件路径</span><br><span class=\"line\">project_name=$(ls | grep xcodeproj | awk -F.xcodeproj &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">project_infoplist_path=$&#123;project_path&#125;/$&#123;project_name&#125;/$&#123;project_name&#125;-Info.plist</span><br><span class=\"line\">#取版本号</span><br><span class=\"line\">bundleShortVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; $&#123;project_infoplist_path&#125;)</span><br><span class=\"line\">#取build值</span><br><span class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;project_infoplist_path&#125;)</span><br><span class=\"line\">#取bundle Identifier前缀</span><br><span class=\"line\">#bundlePrefix=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleIdentifier&quot; `find . -name &quot;*-Info.plist&quot;` | awk -F$ &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#IPA名称</span><br><span class=\"line\">if [ $# = 2 ];then</span><br><span class=\"line\">ipa_name=$2</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#编译工程</span><br><span class=\"line\">cd $project_path</span><br><span class=\"line\">xcodebuild || exit</span><br><span class=\"line\"></span><br><span class=\"line\">#打包</span><br><span class=\"line\">cd $build_path</span><br><span class=\"line\">target_name=$(basename ./Release-iphoneos/*.app | awk -F. &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">if [ $# = 1 ];then</span><br><span class=\"line\">ipa_name=&quot;$&#123;target_name&#125;_$&#123;bundleShortVersion&#125;_build$&#123;bundleVersion&#125;_$(date +&quot;%Y%m%d&quot;)&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -d ./ipa-build ];then</span><br><span class=\"line\">    rm -rf ipa-build</span><br><span class=\"line\">fi</span><br><span class=\"line\">mkdir -p ipa-build/Payload</span><br><span class=\"line\">cp -r ./Release-iphoneos/*.app ./ipa-build/Payload/</span><br><span class=\"line\">cd ipa-build</span><br><span class=\"line\">zip -r $&#123;ipa_name&#125;.ipa *</span><br><span class=\"line\">rm -rf Payload</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为文件添加可执行权限,命令如下:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ipa_build.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用如下命令开始打包.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ipa_build ....../ProjectDir Project</span><br></pre></td></tr></table></figure>\n<p>其中的两个参数分别为:项目路径和最终打包的ipa名.</p>\n<p>执行完命令后会在<code>ProjectDir</code>文件夹下生成<code>build</code>文件夹,ipa文件就在<code>build</code>下的<code>ipa-build</code>文件夹中.</p>\n","site":{"data":{}},"excerpt":"<p>首先申明转载:<a href=\"http://webfrogs.me/2012/09/19/buildipa/\">http://webfrogs.me/2012/09/19/buildipa/</a>.</p>\n<p>iOS打包我们可以借助shell脚本来自动完成这项功能.具体做法如下:</p>","more":"<ul>\n<li>复制下面代码到文本中并保存为<code>ipa_build.sh</code>.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">#--------------------------------------------</span><br><span class=\"line\"># 功能：为Xcode工程打ipa包</span><br><span class=\"line\"># 作者：ccf</span><br><span class=\"line\"># E-mail:ccf.developer@gmail.com</span><br><span class=\"line\"># 创建日期：2012/09/24</span><br><span class=\"line\">#--------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#参数判断</span><br><span class=\"line\">if [ $# != 2 ] &amp;&amp; [ $# != 1 ];then</span><br><span class=\"line\">    echo &quot;Number of params error! Need one or two params!&quot;</span><br><span class=\"line\">    echo &quot;1.path of project(necessary) 2.name of ipa file(optional)&quot;</span><br><span class=\"line\">    exit    </span><br><span class=\"line\">elif [ ! -d $1 ];then</span><br><span class=\"line\">    echo &quot;Params Error!! The first param must be a dictionary.&quot;</span><br><span class=\"line\">    exit    </span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">#工程绝对路径</span><br><span class=\"line\">cd $1</span><br><span class=\"line\">project_path=$(pwd)</span><br><span class=\"line\">#build文件夹路径</span><br><span class=\"line\">build_path=$&#123;project_path&#125;/build</span><br><span class=\"line\"></span><br><span class=\"line\">#工程配置文件路径</span><br><span class=\"line\">project_name=$(ls | grep xcodeproj | awk -F.xcodeproj &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">project_infoplist_path=$&#123;project_path&#125;/$&#123;project_name&#125;/$&#123;project_name&#125;-Info.plist</span><br><span class=\"line\">#取版本号</span><br><span class=\"line\">bundleShortVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; $&#123;project_infoplist_path&#125;)</span><br><span class=\"line\">#取build值</span><br><span class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;project_infoplist_path&#125;)</span><br><span class=\"line\">#取bundle Identifier前缀</span><br><span class=\"line\">#bundlePrefix=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleIdentifier&quot; `find . -name &quot;*-Info.plist&quot;` | awk -F$ &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#IPA名称</span><br><span class=\"line\">if [ $# = 2 ];then</span><br><span class=\"line\">ipa_name=$2</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#编译工程</span><br><span class=\"line\">cd $project_path</span><br><span class=\"line\">xcodebuild || exit</span><br><span class=\"line\"></span><br><span class=\"line\">#打包</span><br><span class=\"line\">cd $build_path</span><br><span class=\"line\">target_name=$(basename ./Release-iphoneos/*.app | awk -F. &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">if [ $# = 1 ];then</span><br><span class=\"line\">ipa_name=&quot;$&#123;target_name&#125;_$&#123;bundleShortVersion&#125;_build$&#123;bundleVersion&#125;_$(date +&quot;%Y%m%d&quot;)&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -d ./ipa-build ];then</span><br><span class=\"line\">    rm -rf ipa-build</span><br><span class=\"line\">fi</span><br><span class=\"line\">mkdir -p ipa-build/Payload</span><br><span class=\"line\">cp -r ./Release-iphoneos/*.app ./ipa-build/Payload/</span><br><span class=\"line\">cd ipa-build</span><br><span class=\"line\">zip -r $&#123;ipa_name&#125;.ipa *</span><br><span class=\"line\">rm -rf Payload</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>为文件添加可执行权限,命令如下:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ipa_build.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用如下命令开始打包.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ipa_build ....../ProjectDir Project</span><br></pre></td></tr></table></figure>\n<p>其中的两个参数分别为:项目路径和最终打包的ipa名.</p>\n<p>执行完命令后会在<code>ProjectDir</code>文件夹下生成<code>build</code>文件夹,ipa文件就在<code>build</code>下的<code>ipa-build</code>文件夹中.</p>"},{"title":"Xcode9下自动化编译错误","date":"2017-11-09T14:03:20.000Z","_content":"\n最近在使用`CI`平台打包时突然失败了，查看日志后发现是在`exportArchive`时失败了。之前一直都是好好地，升级了`Xcode`之后突然就不行了，提示如下信息：\n```\nerror: exportArchive: \"AppName.app\" requires a provisioning profile with the Push Notifications and App Groups features.\nError Domain=IDEProvisioningErrorDomain Code=9\n\"AppName.app\" requires a provisioning profile with the Push Notifications and App Groups features.\" UserInfo={NSLocalizedDescription=\"AppName.app\" requires a provisioning profile with the Push Notifications and App Groups features., NSLocalizedRecoverySuggestion=Add a profile to the \"provisioningProfiles\" dictionary in your Export Options property list.}\n```\n<!--more-->\n查阅资料后发现，在`Xcode9`下，`xcodebuild`需要配置更多的信息才能导出`ipa`，最主要的一个就是`provisioningProfiles`。\n具体的操作步骤如下。\n1. 使用`Xcode` `Archive`一个新的版本\n![1.png](http://upload-images.jianshu.io/upload_images/606479-78a2269f27ebb3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 在`Organizer`中找到刚刚`Archive`出来的版本，选择`Export`。\n![2.png](http://upload-images.jianshu.io/upload_images/606479-7d463a8e3b69181a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3. 选择你要导出的`ipa`类型，如果你需要不同版本，可以重复该流程，就可以得到其他类型所需要的信息了。\n![3.png](http://upload-images.jianshu.io/upload_images/606479-ac0a0a0c788747a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4. 导出`ipa`到目录\n![4.png](http://upload-images.jianshu.io/upload_images/606479-7c81d9a2d4c0f347.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n5. 最终导出的目录下会有`4`个文件，除了`ipa`文件还有一个`ExportOptions.plist`文件，这个文件就是我们使用`xcodebuild -exportArchive`命令时，`-exportOptionsPlist`参数需要指定的`plist`文件。\n![5.png](http://upload-images.jianshu.io/upload_images/606479-da5c33fac97fc3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们用这个新的`plist`文件就可以了。如果你需要打其他类型的`ipa`，可以重复上述步骤，在`第三步`重新选择即可。你也可以按照刚才导出的`plist`自己修改。\n\n新的`plist`中有如下一些选项，你也可以参照修改。\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>compileBitcode</key>\n    <false/>\n    <key>method</key>\n    <string>ad-hoc</string>\n    <key>provisioningProfiles</key>\n    <dict>\n        <key>com.tsing.calculate</key>\n        <string>calculate_adhoc</string>\n    </dict>\n    <key>signingCertificate</key>\n    <string>iPhone Distribution</string>\n    <key>signingStyle</key>\n    <string>manual</string>\n    <key>stripSwiftSymbols</key>\n    <true/>\n    <key>teamID</key>\n    <string>CL32FD34</string>\n    <key>thinning</key>\n    <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n","source":"_posts/Xcode9下自动化编译错误.md","raw":"---\ntitle: Xcode9下自动化编译错误\ndate: 2017-11-09 22:03:20\ntags: [xcodebuild, Jenkins, 自动打包, Xcode9]\ncategories: iOS\n---\n\n最近在使用`CI`平台打包时突然失败了，查看日志后发现是在`exportArchive`时失败了。之前一直都是好好地，升级了`Xcode`之后突然就不行了，提示如下信息：\n```\nerror: exportArchive: \"AppName.app\" requires a provisioning profile with the Push Notifications and App Groups features.\nError Domain=IDEProvisioningErrorDomain Code=9\n\"AppName.app\" requires a provisioning profile with the Push Notifications and App Groups features.\" UserInfo={NSLocalizedDescription=\"AppName.app\" requires a provisioning profile with the Push Notifications and App Groups features., NSLocalizedRecoverySuggestion=Add a profile to the \"provisioningProfiles\" dictionary in your Export Options property list.}\n```\n<!--more-->\n查阅资料后发现，在`Xcode9`下，`xcodebuild`需要配置更多的信息才能导出`ipa`，最主要的一个就是`provisioningProfiles`。\n具体的操作步骤如下。\n1. 使用`Xcode` `Archive`一个新的版本\n![1.png](http://upload-images.jianshu.io/upload_images/606479-78a2269f27ebb3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 在`Organizer`中找到刚刚`Archive`出来的版本，选择`Export`。\n![2.png](http://upload-images.jianshu.io/upload_images/606479-7d463a8e3b69181a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3. 选择你要导出的`ipa`类型，如果你需要不同版本，可以重复该流程，就可以得到其他类型所需要的信息了。\n![3.png](http://upload-images.jianshu.io/upload_images/606479-ac0a0a0c788747a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4. 导出`ipa`到目录\n![4.png](http://upload-images.jianshu.io/upload_images/606479-7c81d9a2d4c0f347.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n5. 最终导出的目录下会有`4`个文件，除了`ipa`文件还有一个`ExportOptions.plist`文件，这个文件就是我们使用`xcodebuild -exportArchive`命令时，`-exportOptionsPlist`参数需要指定的`plist`文件。\n![5.png](http://upload-images.jianshu.io/upload_images/606479-da5c33fac97fc3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们用这个新的`plist`文件就可以了。如果你需要打其他类型的`ipa`，可以重复上述步骤，在`第三步`重新选择即可。你也可以按照刚才导出的`plist`自己修改。\n\n新的`plist`中有如下一些选项，你也可以参照修改。\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>compileBitcode</key>\n    <false/>\n    <key>method</key>\n    <string>ad-hoc</string>\n    <key>provisioningProfiles</key>\n    <dict>\n        <key>com.tsing.calculate</key>\n        <string>calculate_adhoc</string>\n    </dict>\n    <key>signingCertificate</key>\n    <string>iPhone Distribution</string>\n    <key>signingStyle</key>\n    <string>manual</string>\n    <key>stripSwiftSymbols</key>\n    <true/>\n    <key>teamID</key>\n    <string>CL32FD34</string>\n    <key>thinning</key>\n    <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n","slug":"Xcode9下自动化编译错误","published":1,"updated":"2021-08-27T13:34:42.823Z","_id":"cksu5b151001z8c201cpn5pmx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在使用<code>CI</code>平台打包时突然失败了，查看日志后发现是在<code>exportArchive</code>时失败了。之前一直都是好好地，升级了<code>Xcode</code>之后突然就不行了，提示如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: exportArchive: &quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features.</span><br><span class=\"line\">Error Domain=IDEProvisioningErrorDomain Code=9</span><br><span class=\"line\">&quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features.&quot; UserInfo=&#123;NSLocalizedDescription=&quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features., NSLocalizedRecoverySuggestion=Add a profile to the &quot;provisioningProfiles&quot; dictionary in your Export Options property list.&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>查阅资料后发现，在<code>Xcode9</code>下，<code>xcodebuild</code>需要配置更多的信息才能导出<code>ipa</code>，最主要的一个就是<code>provisioningProfiles</code>。<br>具体的操作步骤如下。</p>\n<ol>\n<li><p>使用<code>Xcode</code> <code>Archive</code>一个新的版本<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-78a2269f27ebb3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.png\"></p>\n</li>\n<li><p>在<code>Organizer</code>中找到刚刚<code>Archive</code>出来的版本，选择<code>Export</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-7d463a8e3b69181a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2.png\"></p>\n</li>\n<li><p>选择你要导出的<code>ipa</code>类型，如果你需要不同版本，可以重复该流程，就可以得到其他类型所需要的信息了。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-ac0a0a0c788747a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"3.png\"></p>\n</li>\n<li><p>导出<code>ipa</code>到目录<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-7c81d9a2d4c0f347.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"4.png\"></p>\n</li>\n<li><p>最终导出的目录下会有<code>4</code>个文件，除了<code>ipa</code>文件还有一个<code>ExportOptions.plist</code>文件，这个文件就是我们使用<code>xcodebuild -exportArchive</code>命令时，<code>-exportOptionsPlist</code>参数需要指定的<code>plist</code>文件。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-da5c33fac97fc3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"5.png\"></p>\n</li>\n</ol>\n<p>我们用这个新的<code>plist</code>文件就可以了。如果你需要打其他类型的<code>ipa</code>，可以重复上述步骤，在<code>第三步</code>重新选择即可。你也可以按照刚才导出的<code>plist</code>自己修改。</p>\n<p>新的<code>plist</code>中有如下一些选项，你也可以参照修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;compileBitcode&lt;/key&gt;</span><br><span class=\"line\">    &lt;false/&gt;</span><br><span class=\"line\">    &lt;key&gt;method&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;ad-hoc&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;provisioningProfiles&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;com.tsing.calculate&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;calculate_adhoc&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">    &lt;key&gt;signingCertificate&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;iPhone Distribution&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;signingStyle&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;manual&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;stripSwiftSymbols&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">    &lt;key&gt;teamID&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;CL32FD34&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;thinning&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;&amp;lt;none&amp;gt;&lt;/string&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近在使用<code>CI</code>平台打包时突然失败了，查看日志后发现是在<code>exportArchive</code>时失败了。之前一直都是好好地，升级了<code>Xcode</code>之后突然就不行了，提示如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: exportArchive: &quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features.</span><br><span class=\"line\">Error Domain=IDEProvisioningErrorDomain Code=9</span><br><span class=\"line\">&quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features.&quot; UserInfo=&#123;NSLocalizedDescription=&quot;AppName.app&quot; requires a provisioning profile with the Push Notifications and App Groups features., NSLocalizedRecoverySuggestion=Add a profile to the &quot;provisioningProfiles&quot; dictionary in your Export Options property list.&#125;</span><br></pre></td></tr></table></figure>","more":"<p>查阅资料后发现，在<code>Xcode9</code>下，<code>xcodebuild</code>需要配置更多的信息才能导出<code>ipa</code>，最主要的一个就是<code>provisioningProfiles</code>。<br>具体的操作步骤如下。</p>\n<ol>\n<li><p>使用<code>Xcode</code> <code>Archive</code>一个新的版本<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-78a2269f27ebb3ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.png\"></p>\n</li>\n<li><p>在<code>Organizer</code>中找到刚刚<code>Archive</code>出来的版本，选择<code>Export</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-7d463a8e3b69181a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2.png\"></p>\n</li>\n<li><p>选择你要导出的<code>ipa</code>类型，如果你需要不同版本，可以重复该流程，就可以得到其他类型所需要的信息了。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-ac0a0a0c788747a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"3.png\"></p>\n</li>\n<li><p>导出<code>ipa</code>到目录<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-7c81d9a2d4c0f347.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"4.png\"></p>\n</li>\n<li><p>最终导出的目录下会有<code>4</code>个文件，除了<code>ipa</code>文件还有一个<code>ExportOptions.plist</code>文件，这个文件就是我们使用<code>xcodebuild -exportArchive</code>命令时，<code>-exportOptionsPlist</code>参数需要指定的<code>plist</code>文件。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-da5c33fac97fc3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"5.png\"></p>\n</li>\n</ol>\n<p>我们用这个新的<code>plist</code>文件就可以了。如果你需要打其他类型的<code>ipa</code>，可以重复上述步骤，在<code>第三步</code>重新选择即可。你也可以按照刚才导出的<code>plist</code>自己修改。</p>\n<p>新的<code>plist</code>中有如下一些选项，你也可以参照修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;compileBitcode&lt;/key&gt;</span><br><span class=\"line\">    &lt;false/&gt;</span><br><span class=\"line\">    &lt;key&gt;method&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;ad-hoc&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;provisioningProfiles&lt;/key&gt;</span><br><span class=\"line\">    &lt;dict&gt;</span><br><span class=\"line\">        &lt;key&gt;com.tsing.calculate&lt;/key&gt;</span><br><span class=\"line\">        &lt;string&gt;calculate_adhoc&lt;/string&gt;</span><br><span class=\"line\">    &lt;/dict&gt;</span><br><span class=\"line\">    &lt;key&gt;signingCertificate&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;iPhone Distribution&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;signingStyle&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;manual&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;stripSwiftSymbols&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">    &lt;key&gt;teamID&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;CL32FD34&lt;/string&gt;</span><br><span class=\"line\">    &lt;key&gt;thinning&lt;/key&gt;</span><br><span class=\"line\">    &lt;string&gt;&amp;lt;none&amp;gt;&lt;/string&gt;</span><br><span class=\"line\">&lt;/dict&gt;</span><br><span class=\"line\">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Xcode多Target设置","date":"2016-10-01T14:32:11.000Z","_content":"\n有时候一个项目会分为多个版本，比如免费版、收费版，或者对于不同的客户定制不同版本。但是大体上功能都是差不多，只是部分页面稍有区别。如果每个版本都建一个工程又显得麻烦了，都放在一个 `Target` 又得写一堆的代码去区分甄别，而且在打包的时候很可能因为参数配置错误需要一而再、再而三的打包。\n\n这个时候我们就可以用多 `Target` 来操作了。具体方法且听我一一道来。\n\n<!--more-->\n\n***\n\n### * 首先我们得有一个工程，这里我就新建一个基本的模板工程。\n\n工程的样子应该是这样。（我已经升级到 `Xcode8` 了，有什么不同之处请不要在意。）\n\n![QQ20161001-0.png](http://upload-images.jianshu.io/upload_images/606479-c9844bad20dccae2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### *  然后我们进入工程设置，右击中间的 `TARGETS` ，会有个选择让你 `Duplicate` 还是 `Delete` ，这里我们选择 `Duplicate`。\n![QQ20161001-1.png](http://upload-images.jianshu.io/upload_images/606479-2225d4c608db3235.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n结果就是下面这个样子了，多个一个 `Target` 叫 `MultiTarget copy` ，还多了一个 `plist` 文件叫 `MultiTarget copy-Info.plist`。\n![QQ20161001-2.png](http://upload-images.jianshu.io/upload_images/606479-a2f374ee5f20b7e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### * 接下来首先想到的应该是改名字，毕竟 `XXX copy` 不怎么友好。\n\n目前我所知道的方法只有一个一个的改。\n\n囧。\n\n如果你有好的方法，可以留言给我。\n\n改完 `plist` 的名字后，需要在工程设置里面重新选择一下 `Info.plist` 。改完之后就像下图一样。我列了一下我改的几个地方。但是我记得早期版本的 `Xcode` 好像还需要修改 `Build Settings` 里面的一些东西。不过我的 `Xcode8` 好像不需要了。大家在做的时候注意一下。\n![QQ20161001-3.png](http://upload-images.jianshu.io/upload_images/606479-0f87e7da284493a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`PS：忘了修改Bundle Identifier了，大家记得改一下`\n\n### * 最后一步就是做版本区分了。\n\n首先我们在 `PRO` 版本中定义一个宏 `PRO_VERSION`，写在 `Build Settings` 里面。一定记得先选择 `PRO` `Target`。这个作用就是告诉编译器，我们在编译该 `Target` 时会有个全局的宏叫做 `PRO_VERSION`。这个时候我们就可以利用这个宏来做一些代码区分了。\n\n![QQ20161001-4.png](http://upload-images.jianshu.io/upload_images/606479-95d137145edbd4e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### * 最后我们测试一下。\n\n我们在 `ViewController` 里面增加一个 `UILabel` ，方便起见，我就直接写 `frame` 了，在两个不同版本显示不同的文本。代码如下。\n\n```\n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 50, CGRectGetWidth([UIScreen mainScreen].bounds), 80)];\n    label.textAlignment = NSTextAlignmentCenter;\n    [self.view addSubview:label];\n    \n#ifdef PRO_VERSION\n    label.text = @\"这是PRO版本\";\n#else\n    label.text = @\"这是NORMAL版本\";\n#endif\n```\n\n当然，编译哪个版本需要选择对应的 `Scheme`。下面放两张截图。\n\n![PRO版本](http://upload-images.jianshu.io/upload_images/606479-7f3317bd714c2300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![NORMAL版本\n![Uploading QQ20161001-9_892356.png . . .]\n](http://upload-images.jianshu.io/upload_images/606479-b368c5be845363d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### * 还有个事情就是图标，其实也可以设置的。\n\n打开 `Assets.xcassets`，会发现已经有一个 `AppIcon` 了，我们再`copy`一份出来，然后改个名字，换一下图标，就是这样的效果。\n\n![QQ20161001-5.png](http://upload-images.jianshu.io/upload_images/606479-edcc35f26db7e23c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然并没有结束，因为我们只是添加了资源，并没有用到。还是在工程设置里面，有个 `App Icons Source` ，选择一下就可以了。当然，我们还可以配置启动画面等等，这里就不演示了。\n\n![QQ20161001-6.png](http://upload-images.jianshu.io/upload_images/606479-4245677ed7eec517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后放一张两个 `App` 的图标，注意修改 `Bundle Identifier`，不然你不会运行出两个 `App` 的。\n\n![QQ20161001-9.png](http://upload-images.jianshu.io/upload_images/606479-08ca83fc44225585.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/Xcode多Target设置.md","raw":"---\ntitle: Xcode多Target设置\ndate: 2016-10-01 22:32:11\ntags: \n    - 多Target\n    - 多版本\ncategories:\n    - iOS\n---\n\n有时候一个项目会分为多个版本，比如免费版、收费版，或者对于不同的客户定制不同版本。但是大体上功能都是差不多，只是部分页面稍有区别。如果每个版本都建一个工程又显得麻烦了，都放在一个 `Target` 又得写一堆的代码去区分甄别，而且在打包的时候很可能因为参数配置错误需要一而再、再而三的打包。\n\n这个时候我们就可以用多 `Target` 来操作了。具体方法且听我一一道来。\n\n<!--more-->\n\n***\n\n### * 首先我们得有一个工程，这里我就新建一个基本的模板工程。\n\n工程的样子应该是这样。（我已经升级到 `Xcode8` 了，有什么不同之处请不要在意。）\n\n![QQ20161001-0.png](http://upload-images.jianshu.io/upload_images/606479-c9844bad20dccae2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### *  然后我们进入工程设置，右击中间的 `TARGETS` ，会有个选择让你 `Duplicate` 还是 `Delete` ，这里我们选择 `Duplicate`。\n![QQ20161001-1.png](http://upload-images.jianshu.io/upload_images/606479-2225d4c608db3235.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n结果就是下面这个样子了，多个一个 `Target` 叫 `MultiTarget copy` ，还多了一个 `plist` 文件叫 `MultiTarget copy-Info.plist`。\n![QQ20161001-2.png](http://upload-images.jianshu.io/upload_images/606479-a2f374ee5f20b7e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### * 接下来首先想到的应该是改名字，毕竟 `XXX copy` 不怎么友好。\n\n目前我所知道的方法只有一个一个的改。\n\n囧。\n\n如果你有好的方法，可以留言给我。\n\n改完 `plist` 的名字后，需要在工程设置里面重新选择一下 `Info.plist` 。改完之后就像下图一样。我列了一下我改的几个地方。但是我记得早期版本的 `Xcode` 好像还需要修改 `Build Settings` 里面的一些东西。不过我的 `Xcode8` 好像不需要了。大家在做的时候注意一下。\n![QQ20161001-3.png](http://upload-images.jianshu.io/upload_images/606479-0f87e7da284493a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`PS：忘了修改Bundle Identifier了，大家记得改一下`\n\n### * 最后一步就是做版本区分了。\n\n首先我们在 `PRO` 版本中定义一个宏 `PRO_VERSION`，写在 `Build Settings` 里面。一定记得先选择 `PRO` `Target`。这个作用就是告诉编译器，我们在编译该 `Target` 时会有个全局的宏叫做 `PRO_VERSION`。这个时候我们就可以利用这个宏来做一些代码区分了。\n\n![QQ20161001-4.png](http://upload-images.jianshu.io/upload_images/606479-95d137145edbd4e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### * 最后我们测试一下。\n\n我们在 `ViewController` 里面增加一个 `UILabel` ，方便起见，我就直接写 `frame` 了，在两个不同版本显示不同的文本。代码如下。\n\n```\n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 50, CGRectGetWidth([UIScreen mainScreen].bounds), 80)];\n    label.textAlignment = NSTextAlignmentCenter;\n    [self.view addSubview:label];\n    \n#ifdef PRO_VERSION\n    label.text = @\"这是PRO版本\";\n#else\n    label.text = @\"这是NORMAL版本\";\n#endif\n```\n\n当然，编译哪个版本需要选择对应的 `Scheme`。下面放两张截图。\n\n![PRO版本](http://upload-images.jianshu.io/upload_images/606479-7f3317bd714c2300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![NORMAL版本\n![Uploading QQ20161001-9_892356.png . . .]\n](http://upload-images.jianshu.io/upload_images/606479-b368c5be845363d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### * 还有个事情就是图标，其实也可以设置的。\n\n打开 `Assets.xcassets`，会发现已经有一个 `AppIcon` 了，我们再`copy`一份出来，然后改个名字，换一下图标，就是这样的效果。\n\n![QQ20161001-5.png](http://upload-images.jianshu.io/upload_images/606479-edcc35f26db7e23c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然并没有结束，因为我们只是添加了资源，并没有用到。还是在工程设置里面，有个 `App Icons Source` ，选择一下就可以了。当然，我们还可以配置启动画面等等，这里就不演示了。\n\n![QQ20161001-6.png](http://upload-images.jianshu.io/upload_images/606479-4245677ed7eec517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后放一张两个 `App` 的图标，注意修改 `Bundle Identifier`，不然你不会运行出两个 `App` 的。\n\n![QQ20161001-9.png](http://upload-images.jianshu.io/upload_images/606479-08ca83fc44225585.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"Xcode多Target设置","published":1,"updated":"2021-08-27T13:34:42.823Z","_id":"cksu5b15200228c2061lu2r1e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>有时候一个项目会分为多个版本，比如免费版、收费版，或者对于不同的客户定制不同版本。但是大体上功能都是差不多，只是部分页面稍有区别。如果每个版本都建一个工程又显得麻烦了，都放在一个 <code>Target</code> 又得写一堆的代码去区分甄别，而且在打包的时候很可能因为参数配置错误需要一而再、再而三的打包。</p>\n<p>这个时候我们就可以用多 <code>Target</code> 来操作了。具体方法且听我一一道来。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h3 id=\"首先我们得有一个工程，这里我就新建一个基本的模板工程。\"><a href=\"#首先我们得有一个工程，这里我就新建一个基本的模板工程。\" class=\"headerlink\" title=\"* 首先我们得有一个工程，这里我就新建一个基本的模板工程。\"></a>* 首先我们得有一个工程，这里我就新建一个基本的模板工程。</h3><p>工程的样子应该是这样。（我已经升级到 <code>Xcode8</code> 了，有什么不同之处请不要在意。）</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-c9844bad20dccae2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-0.png\"></p>\n<h3 id=\"然后我们进入工程设置，右击中间的-TARGETS-，会有个选择让你-Duplicate-还是-Delete-，这里我们选择-Duplicate。\"><a href=\"#然后我们进入工程设置，右击中间的-TARGETS-，会有个选择让你-Duplicate-还是-Delete-，这里我们选择-Duplicate。\" class=\"headerlink\" title=\"*  然后我们进入工程设置，右击中间的 TARGETS ，会有个选择让你 Duplicate 还是 Delete ，这里我们选择 Duplicate。\"></a>*  然后我们进入工程设置，右击中间的 <code>TARGETS</code> ，会有个选择让你 <code>Duplicate</code> 还是 <code>Delete</code> ，这里我们选择 <code>Duplicate</code>。</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/606479-2225d4c608db3235.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-1.png\"></p>\n<p>结果就是下面这个样子了，多个一个 <code>Target</code> 叫 <code>MultiTarget copy</code> ，还多了一个 <code>plist</code> 文件叫 <code>MultiTarget copy-Info.plist</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-a2f374ee5f20b7e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-2.png\"></p>\n<h4 id=\"接下来首先想到的应该是改名字，毕竟-XXX-copy-不怎么友好。\"><a href=\"#接下来首先想到的应该是改名字，毕竟-XXX-copy-不怎么友好。\" class=\"headerlink\" title=\"* 接下来首先想到的应该是改名字，毕竟 XXX copy 不怎么友好。\"></a>* 接下来首先想到的应该是改名字，毕竟 <code>XXX copy</code> 不怎么友好。</h4><p>目前我所知道的方法只有一个一个的改。</p>\n<p>囧。</p>\n<p>如果你有好的方法，可以留言给我。</p>\n<p>改完 <code>plist</code> 的名字后，需要在工程设置里面重新选择一下 <code>Info.plist</code> 。改完之后就像下图一样。我列了一下我改的几个地方。但是我记得早期版本的 <code>Xcode</code> 好像还需要修改 <code>Build Settings</code> 里面的一些东西。不过我的 <code>Xcode8</code> 好像不需要了。大家在做的时候注意一下。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-0f87e7da284493a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-3.png\"></p>\n<p><code>PS：忘了修改Bundle Identifier了，大家记得改一下</code></p>\n<h3 id=\"最后一步就是做版本区分了。\"><a href=\"#最后一步就是做版本区分了。\" class=\"headerlink\" title=\"* 最后一步就是做版本区分了。\"></a>* 最后一步就是做版本区分了。</h3><p>首先我们在 <code>PRO</code> 版本中定义一个宏 <code>PRO_VERSION</code>，写在 <code>Build Settings</code> 里面。一定记得先选择 <code>PRO</code> <code>Target</code>。这个作用就是告诉编译器，我们在编译该 <code>Target</code> 时会有个全局的宏叫做 <code>PRO_VERSION</code>。这个时候我们就可以利用这个宏来做一些代码区分了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-95d137145edbd4e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-4.png\"></p>\n<h3 id=\"最后我们测试一下。\"><a href=\"#最后我们测试一下。\" class=\"headerlink\" title=\"* 最后我们测试一下。\"></a>* 最后我们测试一下。</h3><p>我们在 <code>ViewController</code> 里面增加一个 <code>UILabel</code> ，方便起见，我就直接写 <code>frame</code> 了，在两个不同版本显示不同的文本。代码如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 50, CGRectGetWidth([UIScreen mainScreen].bounds), 80)];</span><br><span class=\"line\">    label.textAlignment = NSTextAlignmentCenter;</span><br><span class=\"line\">    [self.view addSubview:label];</span><br><span class=\"line\">    </span><br><span class=\"line\">#ifdef PRO_VERSION</span><br><span class=\"line\">    label.text = @&quot;这是PRO版本&quot;;</span><br><span class=\"line\">#else</span><br><span class=\"line\">    label.text = @&quot;这是NORMAL版本&quot;;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<p>当然，编译哪个版本需要选择对应的 <code>Scheme</code>。下面放两张截图。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-7f3317bd714c2300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PRO版本\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-b368c5be845363d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"NORMAL版本\n![Uploading QQ20161001-9_892356.png . . .]\n\"></p>\n<h3 id=\"还有个事情就是图标，其实也可以设置的。\"><a href=\"#还有个事情就是图标，其实也可以设置的。\" class=\"headerlink\" title=\"* 还有个事情就是图标，其实也可以设置的。\"></a>* 还有个事情就是图标，其实也可以设置的。</h3><p>打开 <code>Assets.xcassets</code>，会发现已经有一个 <code>AppIcon</code> 了，我们再<code>copy</code>一份出来，然后改个名字，换一下图标，就是这样的效果。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-edcc35f26db7e23c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-5.png\"></p>\n<p>当然并没有结束，因为我们只是添加了资源，并没有用到。还是在工程设置里面，有个 <code>App Icons Source</code> ，选择一下就可以了。当然，我们还可以配置启动画面等等，这里就不演示了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-4245677ed7eec517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-6.png\"></p>\n<p>最后放一张两个 <code>App</code> 的图标，注意修改 <code>Bundle Identifier</code>，不然你不会运行出两个 <code>App</code> 的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-08ca83fc44225585.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-9.png\"></p>\n","site":{"data":{}},"excerpt":"<p>有时候一个项目会分为多个版本，比如免费版、收费版，或者对于不同的客户定制不同版本。但是大体上功能都是差不多，只是部分页面稍有区别。如果每个版本都建一个工程又显得麻烦了，都放在一个 <code>Target</code> 又得写一堆的代码去区分甄别，而且在打包的时候很可能因为参数配置错误需要一而再、再而三的打包。</p>\n<p>这个时候我们就可以用多 <code>Target</code> 来操作了。具体方法且听我一一道来。</p>","more":"<hr>\n<h3 id=\"首先我们得有一个工程，这里我就新建一个基本的模板工程。\"><a href=\"#首先我们得有一个工程，这里我就新建一个基本的模板工程。\" class=\"headerlink\" title=\"* 首先我们得有一个工程，这里我就新建一个基本的模板工程。\"></a>* 首先我们得有一个工程，这里我就新建一个基本的模板工程。</h3><p>工程的样子应该是这样。（我已经升级到 <code>Xcode8</code> 了，有什么不同之处请不要在意。）</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-c9844bad20dccae2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-0.png\"></p>\n<h3 id=\"然后我们进入工程设置，右击中间的-TARGETS-，会有个选择让你-Duplicate-还是-Delete-，这里我们选择-Duplicate。\"><a href=\"#然后我们进入工程设置，右击中间的-TARGETS-，会有个选择让你-Duplicate-还是-Delete-，这里我们选择-Duplicate。\" class=\"headerlink\" title=\"*  然后我们进入工程设置，右击中间的 TARGETS ，会有个选择让你 Duplicate 还是 Delete ，这里我们选择 Duplicate。\"></a>*  然后我们进入工程设置，右击中间的 <code>TARGETS</code> ，会有个选择让你 <code>Duplicate</code> 还是 <code>Delete</code> ，这里我们选择 <code>Duplicate</code>。</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/606479-2225d4c608db3235.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-1.png\"></p>\n<p>结果就是下面这个样子了，多个一个 <code>Target</code> 叫 <code>MultiTarget copy</code> ，还多了一个 <code>plist</code> 文件叫 <code>MultiTarget copy-Info.plist</code>。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-a2f374ee5f20b7e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-2.png\"></p>\n<h4 id=\"接下来首先想到的应该是改名字，毕竟-XXX-copy-不怎么友好。\"><a href=\"#接下来首先想到的应该是改名字，毕竟-XXX-copy-不怎么友好。\" class=\"headerlink\" title=\"* 接下来首先想到的应该是改名字，毕竟 XXX copy 不怎么友好。\"></a>* 接下来首先想到的应该是改名字，毕竟 <code>XXX copy</code> 不怎么友好。</h4><p>目前我所知道的方法只有一个一个的改。</p>\n<p>囧。</p>\n<p>如果你有好的方法，可以留言给我。</p>\n<p>改完 <code>plist</code> 的名字后，需要在工程设置里面重新选择一下 <code>Info.plist</code> 。改完之后就像下图一样。我列了一下我改的几个地方。但是我记得早期版本的 <code>Xcode</code> 好像还需要修改 <code>Build Settings</code> 里面的一些东西。不过我的 <code>Xcode8</code> 好像不需要了。大家在做的时候注意一下。<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-0f87e7da284493a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-3.png\"></p>\n<p><code>PS：忘了修改Bundle Identifier了，大家记得改一下</code></p>\n<h3 id=\"最后一步就是做版本区分了。\"><a href=\"#最后一步就是做版本区分了。\" class=\"headerlink\" title=\"* 最后一步就是做版本区分了。\"></a>* 最后一步就是做版本区分了。</h3><p>首先我们在 <code>PRO</code> 版本中定义一个宏 <code>PRO_VERSION</code>，写在 <code>Build Settings</code> 里面。一定记得先选择 <code>PRO</code> <code>Target</code>。这个作用就是告诉编译器，我们在编译该 <code>Target</code> 时会有个全局的宏叫做 <code>PRO_VERSION</code>。这个时候我们就可以利用这个宏来做一些代码区分了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-95d137145edbd4e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-4.png\"></p>\n<h3 id=\"最后我们测试一下。\"><a href=\"#最后我们测试一下。\" class=\"headerlink\" title=\"* 最后我们测试一下。\"></a>* 最后我们测试一下。</h3><p>我们在 <code>ViewController</code> 里面增加一个 <code>UILabel</code> ，方便起见，我就直接写 <code>frame</code> 了，在两个不同版本显示不同的文本。代码如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 50, CGRectGetWidth([UIScreen mainScreen].bounds), 80)];</span><br><span class=\"line\">    label.textAlignment = NSTextAlignmentCenter;</span><br><span class=\"line\">    [self.view addSubview:label];</span><br><span class=\"line\">    </span><br><span class=\"line\">#ifdef PRO_VERSION</span><br><span class=\"line\">    label.text = @&quot;这是PRO版本&quot;;</span><br><span class=\"line\">#else</span><br><span class=\"line\">    label.text = @&quot;这是NORMAL版本&quot;;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<p>当然，编译哪个版本需要选择对应的 <code>Scheme</code>。下面放两张截图。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-7f3317bd714c2300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PRO版本\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-b368c5be845363d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"NORMAL版本\n![Uploading QQ20161001-9_892356.png . . .]\n\"></p>\n<h3 id=\"还有个事情就是图标，其实也可以设置的。\"><a href=\"#还有个事情就是图标，其实也可以设置的。\" class=\"headerlink\" title=\"* 还有个事情就是图标，其实也可以设置的。\"></a>* 还有个事情就是图标，其实也可以设置的。</h3><p>打开 <code>Assets.xcassets</code>，会发现已经有一个 <code>AppIcon</code> 了，我们再<code>copy</code>一份出来，然后改个名字，换一下图标，就是这样的效果。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-edcc35f26db7e23c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-5.png\"></p>\n<p>当然并没有结束，因为我们只是添加了资源，并没有用到。还是在工程设置里面，有个 <code>App Icons Source</code> ，选择一下就可以了。当然，我们还可以配置启动画面等等，这里就不演示了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-4245677ed7eec517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-6.png\"></p>\n<p>最后放一张两个 <code>App</code> 的图标，注意修改 <code>Bundle Identifier</code>，不然你不会运行出两个 <code>App</code> 的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-08ca83fc44225585.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"QQ20161001-9.png\"></p>"},{"title":"cocos2d v3.x mac 安装","date":"2014-08-08T12:46:28.000Z","_content":"\ncocos2d v3.x 版本出来后,从配置安装到创建项目都是命令行,下面简单说一下.\n\n* 官网下载最新版本Cocos2d-x,地址是 [http://cn.cocos2d-x.org/download/](http://cn.cocos2d-x.org/download/).\n* 解压后,在命令行中`cp`到文件夹,然后执行`./setup.py`,回车.\n* 期间会有几次询问,是设置安卓SDK路径的,不设置安卓直接`Enter`跳过即可\n\n```\n ->Please enter the path of NDK_ROOT (or press Enter to skip):\n ->Please enter the path of ANDROID_SDK_ROOT (or press Enter to skip):\n ->Please enter the path of ANT_ROOT (or press Enter to skip):\n```\n之后就OK了,会有提示:\n```\nPlease execute command: \"source /Users/history/.bash_profile\" to make added system variables take effect\n```\n<!--more-->\n根据提示敲击`source /Users/history/.bash_profile`后`Enter`,这样就算设置好了.\n\n* 最后就是创建工程.继续命令行.\n`cd tools/cocos2d-console/bin`,接着使用下面命令即可:\n`cocos new 工程名 -p 包名 -l 语言 -d 目标文件夹`,例如\n`./cocos new HelloWorld -p com.history.HelloWorld -l cpp -d ~/Wrok/Projects/Privates/`.\n执行后就有如下提示:\n\n```\nRunning command: new\n> Copy template into /Users/history/Wrok/Projects/Privates/HelloWorld\n> Copying cocos2d-x files...\n> Rename project name from 'HelloCpp' to 'HelloWorld'\n> Replace the project name from 'HelloCpp' to 'HelloWorld'\n> Replace the project package name from 'org.cocos2dx.hellocpp' to 'com.history.HelloWorld'\n```\n\n这样就大功告成了.","source":"_posts/cocos2d v3.x mac 安装.markdown","raw":"---\ntitle: \"cocos2d v3.x mac 安装\"\ndate: 2014-08-08 20:46:28 +0800\ntags: \n    - cocos2d\ncategories:\n    - cocos2d-x\n\n---\n\ncocos2d v3.x 版本出来后,从配置安装到创建项目都是命令行,下面简单说一下.\n\n* 官网下载最新版本Cocos2d-x,地址是 [http://cn.cocos2d-x.org/download/](http://cn.cocos2d-x.org/download/).\n* 解压后,在命令行中`cp`到文件夹,然后执行`./setup.py`,回车.\n* 期间会有几次询问,是设置安卓SDK路径的,不设置安卓直接`Enter`跳过即可\n\n```\n ->Please enter the path of NDK_ROOT (or press Enter to skip):\n ->Please enter the path of ANDROID_SDK_ROOT (or press Enter to skip):\n ->Please enter the path of ANT_ROOT (or press Enter to skip):\n```\n之后就OK了,会有提示:\n```\nPlease execute command: \"source /Users/history/.bash_profile\" to make added system variables take effect\n```\n<!--more-->\n根据提示敲击`source /Users/history/.bash_profile`后`Enter`,这样就算设置好了.\n\n* 最后就是创建工程.继续命令行.\n`cd tools/cocos2d-console/bin`,接着使用下面命令即可:\n`cocos new 工程名 -p 包名 -l 语言 -d 目标文件夹`,例如\n`./cocos new HelloWorld -p com.history.HelloWorld -l cpp -d ~/Wrok/Projects/Privates/`.\n执行后就有如下提示:\n\n```\nRunning command: new\n> Copy template into /Users/history/Wrok/Projects/Privates/HelloWorld\n> Copying cocos2d-x files...\n> Rename project name from 'HelloCpp' to 'HelloWorld'\n> Replace the project name from 'HelloCpp' to 'HelloWorld'\n> Replace the project package name from 'org.cocos2dx.hellocpp' to 'com.history.HelloWorld'\n```\n\n这样就大功告成了.","slug":"cocos2d v3.x mac 安装","published":1,"updated":"2021-08-27T13:34:42.823Z","_id":"cksu5b15300258c2058ny0yor","comments":1,"layout":"post","photos":[],"link":"","content":"<p>cocos2d v3.x 版本出来后,从配置安装到创建项目都是命令行,下面简单说一下.</p>\n<ul>\n<li>官网下载最新版本Cocos2d-x,地址是 <a href=\"http://cn.cocos2d-x.org/download/\">http://cn.cocos2d-x.org/download/</a>.</li>\n<li>解压后,在命令行中<code>cp</code>到文件夹,然后执行<code>./setup.py</code>,回车.</li>\n<li>期间会有几次询问,是设置安卓SDK路径的,不设置安卓直接<code>Enter</code>跳过即可</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt;Please enter the path of NDK_ROOT (or press Enter to skip):</span><br><span class=\"line\">-&gt;Please enter the path of ANDROID_SDK_ROOT (or press Enter to skip):</span><br><span class=\"line\">-&gt;Please enter the path of ANT_ROOT (or press Enter to skip):</span><br></pre></td></tr></table></figure>\n<p>之后就OK了,会有提示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please execute command: &quot;source /Users/history/.bash_profile&quot; to make added system variables take effect</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>根据提示敲击<code>source /Users/history/.bash_profile</code>后<code>Enter</code>,这样就算设置好了.</p>\n<ul>\n<li>最后就是创建工程.继续命令行.<br><code>cd tools/cocos2d-console/bin</code>,接着使用下面命令即可:<br><code>cocos new 工程名 -p 包名 -l 语言 -d 目标文件夹</code>,例如<br><code>./cocos new HelloWorld -p com.history.HelloWorld -l cpp -d ~/Wrok/Projects/Privates/</code>.<br>执行后就有如下提示:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running command: new</span><br><span class=\"line\">&gt; Copy template into /Users/history/Wrok/Projects/Privates/HelloWorld</span><br><span class=\"line\">&gt; Copying cocos2d-x files...</span><br><span class=\"line\">&gt; Rename project name from &#x27;HelloCpp&#x27; to &#x27;HelloWorld&#x27;</span><br><span class=\"line\">&gt; Replace the project name from &#x27;HelloCpp&#x27; to &#x27;HelloWorld&#x27;</span><br><span class=\"line\">&gt; Replace the project package name from &#x27;org.cocos2dx.hellocpp&#x27; to &#x27;com.history.HelloWorld&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这样就大功告成了.</p>\n","site":{"data":{}},"excerpt":"<p>cocos2d v3.x 版本出来后,从配置安装到创建项目都是命令行,下面简单说一下.</p>\n<ul>\n<li>官网下载最新版本Cocos2d-x,地址是 <a href=\"http://cn.cocos2d-x.org/download/\">http://cn.cocos2d-x.org/download/</a>.</li>\n<li>解压后,在命令行中<code>cp</code>到文件夹,然后执行<code>./setup.py</code>,回车.</li>\n<li>期间会有几次询问,是设置安卓SDK路径的,不设置安卓直接<code>Enter</code>跳过即可</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt;Please enter the path of NDK_ROOT (or press Enter to skip):</span><br><span class=\"line\">-&gt;Please enter the path of ANDROID_SDK_ROOT (or press Enter to skip):</span><br><span class=\"line\">-&gt;Please enter the path of ANT_ROOT (or press Enter to skip):</span><br></pre></td></tr></table></figure>\n<p>之后就OK了,会有提示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please execute command: &quot;source /Users/history/.bash_profile&quot; to make added system variables take effect</span><br></pre></td></tr></table></figure>","more":"<p>根据提示敲击<code>source /Users/history/.bash_profile</code>后<code>Enter</code>,这样就算设置好了.</p>\n<ul>\n<li>最后就是创建工程.继续命令行.<br><code>cd tools/cocos2d-console/bin</code>,接着使用下面命令即可:<br><code>cocos new 工程名 -p 包名 -l 语言 -d 目标文件夹</code>,例如<br><code>./cocos new HelloWorld -p com.history.HelloWorld -l cpp -d ~/Wrok/Projects/Privates/</code>.<br>执行后就有如下提示:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running command: new</span><br><span class=\"line\">&gt; Copy template into /Users/history/Wrok/Projects/Privates/HelloWorld</span><br><span class=\"line\">&gt; Copying cocos2d-x files...</span><br><span class=\"line\">&gt; Rename project name from &#x27;HelloCpp&#x27; to &#x27;HelloWorld&#x27;</span><br><span class=\"line\">&gt; Replace the project name from &#x27;HelloCpp&#x27; to &#x27;HelloWorld&#x27;</span><br><span class=\"line\">&gt; Replace the project package name from &#x27;org.cocos2dx.hellocpp&#x27; to &#x27;com.history.HelloWorld&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这样就大功告成了.</p>"},{"layout":"post","title":"hidesBottomBarWhenPushed用法","date":"2014-08-02T02:12:57.000Z","_content":"\n# 前言\n前两天看论坛又看到有人在问`hidesBottomBarWhenPushed`到底怎么用,为什么他用总是不对.所以在这里还是总结下,希望可以帮助更多的人.\n<!--more-->\n# 正文\n在使用`TabBar`的时候,需要在`push`到下个页面的时候隐藏`TabBar`,再`pop`回来的时候显示`TabBar`.以前有很多博客是说使用`hidden`参数,不过总是有黑边,遂又有一堆博客解决如何去掉黑边,甚至有人自定义了`TabBar`.\n\n其实看看`API`就会发现有`hidesBottomBarWhenPushed`这个属性可以使用.不过很多人用了发现有点问题,比如有`A->B->C`这个`push`流程,其中`A`中有`TabBar`,`B`和`C`中需要隐藏,很多人从`A` `push`到 `B`是可以隐藏`TabBar`,可是`B` `push`到 `C`又冒出来了.或者从`C` `pop`到 `B`又冒出来了.反正就是不对.\n\n说到底,还是用法有误.`Apple`不会给一个错误的`API`的.其实你可以在`B`和`C`的`init`函数中使用`self.hidesBottomBarWhenPushed = YES`,这样就可以达到你想要的效果了.\n\n\n","source":"_posts/hidesBottomBarWhenPushed用法.markdown","raw":"---\nlayout: post\ntitle: \"hidesBottomBarWhenPushed用法\"\ndate: 2014-08-02 10:12:57 +0800\ntags: \n    - TabBar\ncategories:\n    - iOS\n\n---\n\n# 前言\n前两天看论坛又看到有人在问`hidesBottomBarWhenPushed`到底怎么用,为什么他用总是不对.所以在这里还是总结下,希望可以帮助更多的人.\n<!--more-->\n# 正文\n在使用`TabBar`的时候,需要在`push`到下个页面的时候隐藏`TabBar`,再`pop`回来的时候显示`TabBar`.以前有很多博客是说使用`hidden`参数,不过总是有黑边,遂又有一堆博客解决如何去掉黑边,甚至有人自定义了`TabBar`.\n\n其实看看`API`就会发现有`hidesBottomBarWhenPushed`这个属性可以使用.不过很多人用了发现有点问题,比如有`A->B->C`这个`push`流程,其中`A`中有`TabBar`,`B`和`C`中需要隐藏,很多人从`A` `push`到 `B`是可以隐藏`TabBar`,可是`B` `push`到 `C`又冒出来了.或者从`C` `pop`到 `B`又冒出来了.反正就是不对.\n\n说到底,还是用法有误.`Apple`不会给一个错误的`API`的.其实你可以在`B`和`C`的`init`函数中使用`self.hidesBottomBarWhenPushed = YES`,这样就可以达到你想要的效果了.\n\n\n","slug":"hidesBottomBarWhenPushed用法","published":1,"updated":"2021-08-27T13:34:42.824Z","_id":"cksu5b15400298c20fmatfetb","comments":1,"photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前两天看论坛又看到有人在问<code>hidesBottomBarWhenPushed</code>到底怎么用,为什么他用总是不对.所以在这里还是总结下,希望可以帮助更多的人.</p>\n<span id=\"more\"></span>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>在使用<code>TabBar</code>的时候,需要在<code>push</code>到下个页面的时候隐藏<code>TabBar</code>,再<code>pop</code>回来的时候显示<code>TabBar</code>.以前有很多博客是说使用<code>hidden</code>参数,不过总是有黑边,遂又有一堆博客解决如何去掉黑边,甚至有人自定义了<code>TabBar</code>.</p>\n<p>其实看看<code>API</code>就会发现有<code>hidesBottomBarWhenPushed</code>这个属性可以使用.不过很多人用了发现有点问题,比如有<code>A-&gt;B-&gt;C</code>这个<code>push</code>流程,其中<code>A</code>中有<code>TabBar</code>,<code>B</code>和<code>C</code>中需要隐藏,很多人从<code>A</code> <code>push</code>到 <code>B</code>是可以隐藏<code>TabBar</code>,可是<code>B</code> <code>push</code>到 <code>C</code>又冒出来了.或者从<code>C</code> <code>pop</code>到 <code>B</code>又冒出来了.反正就是不对.</p>\n<p>说到底,还是用法有误.<code>Apple</code>不会给一个错误的<code>API</code>的.其实你可以在<code>B</code>和<code>C</code>的<code>init</code>函数中使用<code>self.hidesBottomBarWhenPushed = YES</code>,这样就可以达到你想要的效果了.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前两天看论坛又看到有人在问<code>hidesBottomBarWhenPushed</code>到底怎么用,为什么他用总是不对.所以在这里还是总结下,希望可以帮助更多的人.</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>在使用<code>TabBar</code>的时候,需要在<code>push</code>到下个页面的时候隐藏<code>TabBar</code>,再<code>pop</code>回来的时候显示<code>TabBar</code>.以前有很多博客是说使用<code>hidden</code>参数,不过总是有黑边,遂又有一堆博客解决如何去掉黑边,甚至有人自定义了<code>TabBar</code>.</p>\n<p>其实看看<code>API</code>就会发现有<code>hidesBottomBarWhenPushed</code>这个属性可以使用.不过很多人用了发现有点问题,比如有<code>A-&gt;B-&gt;C</code>这个<code>push</code>流程,其中<code>A</code>中有<code>TabBar</code>,<code>B</code>和<code>C</code>中需要隐藏,很多人从<code>A</code> <code>push</code>到 <code>B</code>是可以隐藏<code>TabBar</code>,可是<code>B</code> <code>push</code>到 <code>C</code>又冒出来了.或者从<code>C</code> <code>pop</code>到 <code>B</code>又冒出来了.反正就是不对.</p>\n<p>说到底,还是用法有误.<code>Apple</code>不会给一个错误的<code>API</code>的.其实你可以在<code>B</code>和<code>C</code>的<code>init</code>函数中使用<code>self.hidesBottomBarWhenPushed = YES</code>,这样就可以达到你想要的效果了.</p>"},{"title":"iOS 高性能异构滚动视图-LazyScrollView实现","date":"2016-12-08T12:08:14.000Z","_content":"\n## `LazyScrollView`简介\n>LazyScrollView 继承自ScrollView，目标是解决异构（与TableView的同构对比）滚动视图的复用回收问题。它可以支持跨View层的复用，用易用方式来生成一个高性能的滚动视图。此方案最先在天猫iOS客户端的首页落地。\n\n>----[苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView](http://pingguohe.net/2016/01/31/lazyscroll.html)\n\n在[这篇文章](http://pingguohe.net/2016/01/31/lazyscroll.html)中，博主详细介绍了LazyScrollView的使用和实现方案，但是并没有给出具体DEMO，这里只是站在巨人的肩膀上，给一个DEMO，同时也希望可以抛砖引玉。\n\n<!--more-->\n\n## `LazyScrollView`使用\n暂时的实现比较简陋，目前只有一个`id<LazyScrollViewDataSource> dataSource;`，需要实现下面三个接口：\n```\n@protocol LazyScrollViewDataSource <NSObject>\n@required\n// ScrollView一共展示多少个item\n- (NSUInteger)numberOfItemInScrollView:(LazyScrollView *)scrollView;\n// 要求根据index直接返回RectModel\n- (LSVRectModel *)scrollView:(LazyScrollView *)scrollView rectModelAtIndex:(NSUInteger)index;\n// 返回下标所对应的view\n- (UIView *)scrollView:(LazyScrollView *)scrollView itemByLsvId:(NSString *)lsvId;\n@end\n```\n其中`LSVRectModel`就是原文中的`TMMuiRectModel`：\n```\n@interface LSVRectModel : NSObject\n// 转换后的绝对值rect\n@property (nonatomic, assign) CGRect absRect;\n// 业务下标\n@property (nonatomic, copy) NSString *lsvId;\n+ (instancetype)modelWithRect:(CGRect)rect lsvId:(NSString *)lsvId;\n@end\n```\n三个接口都很简单，和`UITableView`很类似，如果有不清楚，可以在底部查看DEMO或者原文。\n\n另外，``LazyScrollView``提供了三个接口，也都是仿照`UITableView`来的，所以整个`LazyScrollView`的使用应该是很容易上手的：\n```\n- (void)reloadData;\n- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;\n- (void)registerClass:(Class)viewClass forViewReuseIdentifier:(NSString *)identifier;\n```\n## `LazyScrollView`实现\n最主要的思路就是复用，所以有两个`View`池：\n```\n@property (nonatomic, strong) NSMutableDictionary<NSString *, NSMutableSet *> *reuseViews;\n@property (nonatomic, strong) NSMutableSet<__kindof UIView *> *visibleViews;\n```\n由于每个`View`可能对应不同的identifier，所以`reuseViews`是一个`NSMutableDictionary`。\n当一个`View`滑出可见区域之后，会将它先从`visibleViews`中移除，然后添加到`reuseViews`中，并从`LazyScrollView`中 *remove*，即调用`removeFromSuperview`。这个地方在原文中作者的表述可能让大家误会了。\n>LazyScrollView中有一个Dictionary，key是reuseIdentifier,Value是对应reuseIdentifier被回收的View，当LazyScrollView得知这个View不该再出现了，会把View放在这里，并且把这个View hidden掉。\n\n这里作者用的是`hidden掉`，但是我们知道，`hidden`只是控制显隐，`View`本身还是在那里，也无法去复用。\n\n而当一个View滑到可见区域内时，需要先从`reuseViews`中复用，如果`reuseViews`没有，则重新创建一个。相关实现请看`- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;`。\n\n最后一个问题就是如何判断一个`View`是在可见区域内的。这里原文中说的很清晰，还有图片配合。建议大家还是移步原文。这里我简单说一下，找到顶边大于`contentOffset.y - BUFFER_HEIGHT`，底边小于`contentOffset.y+CGRectGetHeight(self.bounds) + BUFFER_HEIGHT`，然后两个集合取交集就是需要显示的`View`集合了。\n当然，这里有一些处理算法：\n* 对 **顶边** 做升序处理得到一个集合，对 **底边** 降序处理得到一个集合。\n* 采用二分法查找合适的位置，然后再对上一步得到的集合取子集即可。\n\n好了，说了这么多，先放出DEMO地址吧，希望大家可以帮助完善，也希望可以给个Star。\n[https://github.com/HistoryZhang/LazyScrollView](https://github.com/HistoryZhang/LazyScrollView)。\n原文地址：[苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView](http://pingguohe.net/2016/01/31/lazyscroll.html)（里面还有很多干货）。\n\n最后说一下目前写的几个问题，希望大家可以一起来优化：\n1. 没有处理`View`点击事件，即没有写`delegate`回调。\n2. 二分法查找合适位置的时候算法待优化。\n3. 从旧的`visibleViews`中移除被滑出的`View`算法待优化。\n\n贴一段第二个问题的代码：\n```\n- (NSMutableSet *)findSetWithMinEdge:(CGFloat)minEdge {\n    NSArray *ascendingEdgeArray =\n    [self.allRects sortedArrayUsingComparator:^NSComparisonResult(LSVRectModel *obj1, LSVRectModel *obj2) {\n        return CGRectGetMinY(obj1.absRect) > CGRectGetMinY(obj2.absRect) ? NSOrderedDescending : NSOrderedAscending;\n    }];\n    \n    // TOOD: 此处待优化\n    // 二分法\n    NSInteger minIndex = 0;\n    NSInteger maxIndex = ascendingEdgeArray.count - 1;\n    NSInteger midIndex = (minIndex + maxIndex) / 2;\n    LSVRectModel *model = ascendingEdgeArray[midIndex];\n    while (minIndex < maxIndex - 1) {\n        if (CGRectGetMinY(model.absRect) > minEdge) {\n            maxIndex = midIndex;\n        }\n        else {\n            minIndex = midIndex;\n        }\n        midIndex = (minIndex + maxIndex) / 2;\n        model = ascendingEdgeArray[midIndex];\n    }\n    midIndex = MAX(midIndex - 1, 0);\n    NSArray *array = [ascendingEdgeArray subarrayWithRange:NSMakeRange(midIndex, ascendingEdgeArray.count - midIndex)];\n    return [NSMutableSet setWithArray:array];\n}\n```\n\n再贴一段第三个问题的代码：\n```\n    NSMutableArray *newVisibleViews = [self visiableViewModels].mutableCopy;\n    NSMutableArray *newVisibleLsvIds = [newVisibleViews valueForKey:@\"lsvId\"];\n    NSMutableArray *removeViews = [NSMutableArray array];\n    for (UIView *view in self.visibleViews) {\n        if (![newVisibleLsvIds containsObject:view.lsvId]) {\n            [removeViews addObject:view];\n        }\n    }\n    for (UIView *view in removeViews) {\n        [self.visibleViews removeObject:view];\n        [self enqueueReusableView:view];\n        [view removeFromSuperview];\n    }\n```","source":"_posts/iOS-高性能异构滚动视图-LazyScrollView实现.md","raw":"---\ntitle: iOS 高性能异构滚动视图-LazyScrollView实现\ndate: 2016-12-08 20:08:14\ntags: \n\t- LazyScrollView\n\t- 高性能\ncategories:\n\t- iOS\n\n---\n\n## `LazyScrollView`简介\n>LazyScrollView 继承自ScrollView，目标是解决异构（与TableView的同构对比）滚动视图的复用回收问题。它可以支持跨View层的复用，用易用方式来生成一个高性能的滚动视图。此方案最先在天猫iOS客户端的首页落地。\n\n>----[苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView](http://pingguohe.net/2016/01/31/lazyscroll.html)\n\n在[这篇文章](http://pingguohe.net/2016/01/31/lazyscroll.html)中，博主详细介绍了LazyScrollView的使用和实现方案，但是并没有给出具体DEMO，这里只是站在巨人的肩膀上，给一个DEMO，同时也希望可以抛砖引玉。\n\n<!--more-->\n\n## `LazyScrollView`使用\n暂时的实现比较简陋，目前只有一个`id<LazyScrollViewDataSource> dataSource;`，需要实现下面三个接口：\n```\n@protocol LazyScrollViewDataSource <NSObject>\n@required\n// ScrollView一共展示多少个item\n- (NSUInteger)numberOfItemInScrollView:(LazyScrollView *)scrollView;\n// 要求根据index直接返回RectModel\n- (LSVRectModel *)scrollView:(LazyScrollView *)scrollView rectModelAtIndex:(NSUInteger)index;\n// 返回下标所对应的view\n- (UIView *)scrollView:(LazyScrollView *)scrollView itemByLsvId:(NSString *)lsvId;\n@end\n```\n其中`LSVRectModel`就是原文中的`TMMuiRectModel`：\n```\n@interface LSVRectModel : NSObject\n// 转换后的绝对值rect\n@property (nonatomic, assign) CGRect absRect;\n// 业务下标\n@property (nonatomic, copy) NSString *lsvId;\n+ (instancetype)modelWithRect:(CGRect)rect lsvId:(NSString *)lsvId;\n@end\n```\n三个接口都很简单，和`UITableView`很类似，如果有不清楚，可以在底部查看DEMO或者原文。\n\n另外，``LazyScrollView``提供了三个接口，也都是仿照`UITableView`来的，所以整个`LazyScrollView`的使用应该是很容易上手的：\n```\n- (void)reloadData;\n- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;\n- (void)registerClass:(Class)viewClass forViewReuseIdentifier:(NSString *)identifier;\n```\n## `LazyScrollView`实现\n最主要的思路就是复用，所以有两个`View`池：\n```\n@property (nonatomic, strong) NSMutableDictionary<NSString *, NSMutableSet *> *reuseViews;\n@property (nonatomic, strong) NSMutableSet<__kindof UIView *> *visibleViews;\n```\n由于每个`View`可能对应不同的identifier，所以`reuseViews`是一个`NSMutableDictionary`。\n当一个`View`滑出可见区域之后，会将它先从`visibleViews`中移除，然后添加到`reuseViews`中，并从`LazyScrollView`中 *remove*，即调用`removeFromSuperview`。这个地方在原文中作者的表述可能让大家误会了。\n>LazyScrollView中有一个Dictionary，key是reuseIdentifier,Value是对应reuseIdentifier被回收的View，当LazyScrollView得知这个View不该再出现了，会把View放在这里，并且把这个View hidden掉。\n\n这里作者用的是`hidden掉`，但是我们知道，`hidden`只是控制显隐，`View`本身还是在那里，也无法去复用。\n\n而当一个View滑到可见区域内时，需要先从`reuseViews`中复用，如果`reuseViews`没有，则重新创建一个。相关实现请看`- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;`。\n\n最后一个问题就是如何判断一个`View`是在可见区域内的。这里原文中说的很清晰，还有图片配合。建议大家还是移步原文。这里我简单说一下，找到顶边大于`contentOffset.y - BUFFER_HEIGHT`，底边小于`contentOffset.y+CGRectGetHeight(self.bounds) + BUFFER_HEIGHT`，然后两个集合取交集就是需要显示的`View`集合了。\n当然，这里有一些处理算法：\n* 对 **顶边** 做升序处理得到一个集合，对 **底边** 降序处理得到一个集合。\n* 采用二分法查找合适的位置，然后再对上一步得到的集合取子集即可。\n\n好了，说了这么多，先放出DEMO地址吧，希望大家可以帮助完善，也希望可以给个Star。\n[https://github.com/HistoryZhang/LazyScrollView](https://github.com/HistoryZhang/LazyScrollView)。\n原文地址：[苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView](http://pingguohe.net/2016/01/31/lazyscroll.html)（里面还有很多干货）。\n\n最后说一下目前写的几个问题，希望大家可以一起来优化：\n1. 没有处理`View`点击事件，即没有写`delegate`回调。\n2. 二分法查找合适位置的时候算法待优化。\n3. 从旧的`visibleViews`中移除被滑出的`View`算法待优化。\n\n贴一段第二个问题的代码：\n```\n- (NSMutableSet *)findSetWithMinEdge:(CGFloat)minEdge {\n    NSArray *ascendingEdgeArray =\n    [self.allRects sortedArrayUsingComparator:^NSComparisonResult(LSVRectModel *obj1, LSVRectModel *obj2) {\n        return CGRectGetMinY(obj1.absRect) > CGRectGetMinY(obj2.absRect) ? NSOrderedDescending : NSOrderedAscending;\n    }];\n    \n    // TOOD: 此处待优化\n    // 二分法\n    NSInteger minIndex = 0;\n    NSInteger maxIndex = ascendingEdgeArray.count - 1;\n    NSInteger midIndex = (minIndex + maxIndex) / 2;\n    LSVRectModel *model = ascendingEdgeArray[midIndex];\n    while (minIndex < maxIndex - 1) {\n        if (CGRectGetMinY(model.absRect) > minEdge) {\n            maxIndex = midIndex;\n        }\n        else {\n            minIndex = midIndex;\n        }\n        midIndex = (minIndex + maxIndex) / 2;\n        model = ascendingEdgeArray[midIndex];\n    }\n    midIndex = MAX(midIndex - 1, 0);\n    NSArray *array = [ascendingEdgeArray subarrayWithRange:NSMakeRange(midIndex, ascendingEdgeArray.count - midIndex)];\n    return [NSMutableSet setWithArray:array];\n}\n```\n\n再贴一段第三个问题的代码：\n```\n    NSMutableArray *newVisibleViews = [self visiableViewModels].mutableCopy;\n    NSMutableArray *newVisibleLsvIds = [newVisibleViews valueForKey:@\"lsvId\"];\n    NSMutableArray *removeViews = [NSMutableArray array];\n    for (UIView *view in self.visibleViews) {\n        if (![newVisibleLsvIds containsObject:view.lsvId]) {\n            [removeViews addObject:view];\n        }\n    }\n    for (UIView *view in removeViews) {\n        [self.visibleViews removeObject:view];\n        [self enqueueReusableView:view];\n        [view removeFromSuperview];\n    }\n```","slug":"iOS-高性能异构滚动视图-LazyScrollView实现","published":1,"updated":"2021-08-27T13:34:42.824Z","_id":"cksu5b155002c8c204zk2eo3r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"LazyScrollView简介\"><a href=\"#LazyScrollView简介\" class=\"headerlink\" title=\"LazyScrollView简介\"></a><code>LazyScrollView</code>简介</h2><blockquote>\n<p>LazyScrollView 继承自ScrollView，目标是解决异构（与TableView的同构对比）滚动视图的复用回收问题。它可以支持跨View层的复用，用易用方式来生成一个高性能的滚动视图。此方案最先在天猫iOS客户端的首页落地。</p>\n</blockquote>\n<blockquote>\n<p>—-<a href=\"http://pingguohe.net/2016/01/31/lazyscroll.html\">苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a></p>\n</blockquote>\n<p>在<a href=\"http://pingguohe.net/2016/01/31/lazyscroll.html\">这篇文章</a>中，博主详细介绍了LazyScrollView的使用和实现方案，但是并没有给出具体DEMO，这里只是站在巨人的肩膀上，给一个DEMO，同时也希望可以抛砖引玉。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"LazyScrollView使用\"><a href=\"#LazyScrollView使用\" class=\"headerlink\" title=\"LazyScrollView使用\"></a><code>LazyScrollView</code>使用</h2><p>暂时的实现比较简陋，目前只有一个<code>id&lt;LazyScrollViewDataSource&gt; dataSource;</code>，需要实现下面三个接口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol LazyScrollViewDataSource &lt;NSObject&gt;</span><br><span class=\"line\">@required</span><br><span class=\"line\">// ScrollView一共展示多少个item</span><br><span class=\"line\">- (NSUInteger)numberOfItemInScrollView:(LazyScrollView *)scrollView;</span><br><span class=\"line\">// 要求根据index直接返回RectModel</span><br><span class=\"line\">- (LSVRectModel *)scrollView:(LazyScrollView *)scrollView rectModelAtIndex:(NSUInteger)index;</span><br><span class=\"line\">// 返回下标所对应的view</span><br><span class=\"line\">- (UIView *)scrollView:(LazyScrollView *)scrollView itemByLsvId:(NSString *)lsvId;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>其中<code>LSVRectModel</code>就是原文中的<code>TMMuiRectModel</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface LSVRectModel : NSObject</span><br><span class=\"line\">// 转换后的绝对值rect</span><br><span class=\"line\">@property (nonatomic, assign) CGRect absRect;</span><br><span class=\"line\">// 业务下标</span><br><span class=\"line\">@property (nonatomic, copy) NSString *lsvId;</span><br><span class=\"line\">+ (instancetype)modelWithRect:(CGRect)rect lsvId:(NSString *)lsvId;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>三个接口都很简单，和<code>UITableView</code>很类似，如果有不清楚，可以在底部查看DEMO或者原文。</p>\n<p>另外，<code>LazyScrollView</code>提供了三个接口，也都是仿照<code>UITableView</code>来的，所以整个<code>LazyScrollView</code>的使用应该是很容易上手的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)reloadData;</span><br><span class=\"line\">- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;</span><br><span class=\"line\">- (void)registerClass:(Class)viewClass forViewReuseIdentifier:(NSString *)identifier;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LazyScrollView实现\"><a href=\"#LazyScrollView实现\" class=\"headerlink\" title=\"LazyScrollView实现\"></a><code>LazyScrollView</code>实现</h2><p>最主要的思路就是复用，所以有两个<code>View</code>池：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSMutableDictionary&lt;NSString *, NSMutableSet *&gt; *reuseViews;</span><br><span class=\"line\">@property (nonatomic, strong) NSMutableSet&lt;__kindof UIView *&gt; *visibleViews;</span><br></pre></td></tr></table></figure>\n<p>由于每个<code>View</code>可能对应不同的identifier，所以<code>reuseViews</code>是一个<code>NSMutableDictionary</code>。<br>当一个<code>View</code>滑出可见区域之后，会将它先从<code>visibleViews</code>中移除，然后添加到<code>reuseViews</code>中，并从<code>LazyScrollView</code>中 <em>remove</em>，即调用<code>removeFromSuperview</code>。这个地方在原文中作者的表述可能让大家误会了。</p>\n<blockquote>\n<p>LazyScrollView中有一个Dictionary，key是reuseIdentifier,Value是对应reuseIdentifier被回收的View，当LazyScrollView得知这个View不该再出现了，会把View放在这里，并且把这个View hidden掉。</p>\n</blockquote>\n<p>这里作者用的是<code>hidden掉</code>，但是我们知道，<code>hidden</code>只是控制显隐，<code>View</code>本身还是在那里，也无法去复用。</p>\n<p>而当一个View滑到可见区域内时，需要先从<code>reuseViews</code>中复用，如果<code>reuseViews</code>没有，则重新创建一个。相关实现请看<code>- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;</code>。</p>\n<p>最后一个问题就是如何判断一个<code>View</code>是在可见区域内的。这里原文中说的很清晰，还有图片配合。建议大家还是移步原文。这里我简单说一下，找到顶边大于<code>contentOffset.y - BUFFER_HEIGHT</code>，底边小于<code>contentOffset.y+CGRectGetHeight(self.bounds) + BUFFER_HEIGHT</code>，然后两个集合取交集就是需要显示的<code>View</code>集合了。<br>当然，这里有一些处理算法：</p>\n<ul>\n<li>对 <strong>顶边</strong> 做升序处理得到一个集合，对 <strong>底边</strong> 降序处理得到一个集合。</li>\n<li>采用二分法查找合适的位置，然后再对上一步得到的集合取子集即可。</li>\n</ul>\n<p>好了，说了这么多，先放出DEMO地址吧，希望大家可以帮助完善，也希望可以给个Star。<br><a href=\"https://github.com/HistoryZhang/LazyScrollView\">https://github.com/HistoryZhang/LazyScrollView</a>。<br>原文地址：<a href=\"http://pingguohe.net/2016/01/31/lazyscroll.html\">苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a>（里面还有很多干货）。</p>\n<p>最后说一下目前写的几个问题，希望大家可以一起来优化：</p>\n<ol>\n<li>没有处理<code>View</code>点击事件，即没有写<code>delegate</code>回调。</li>\n<li>二分法查找合适位置的时候算法待优化。</li>\n<li>从旧的<code>visibleViews</code>中移除被滑出的<code>View</code>算法待优化。</li>\n</ol>\n<p>贴一段第二个问题的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSMutableSet *)findSetWithMinEdge:(CGFloat)minEdge &#123;</span><br><span class=\"line\">    NSArray *ascendingEdgeArray =</span><br><span class=\"line\">    [self.allRects sortedArrayUsingComparator:^NSComparisonResult(LSVRectModel *obj1, LSVRectModel *obj2) &#123;</span><br><span class=\"line\">        return CGRectGetMinY(obj1.absRect) &gt; CGRectGetMinY(obj2.absRect) ? NSOrderedDescending : NSOrderedAscending;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // TOOD: 此处待优化</span><br><span class=\"line\">    // 二分法</span><br><span class=\"line\">    NSInteger minIndex = 0;</span><br><span class=\"line\">    NSInteger maxIndex = ascendingEdgeArray.count - 1;</span><br><span class=\"line\">    NSInteger midIndex = (minIndex + maxIndex) / 2;</span><br><span class=\"line\">    LSVRectModel *model = ascendingEdgeArray[midIndex];</span><br><span class=\"line\">    while (minIndex &lt; maxIndex - 1) &#123;</span><br><span class=\"line\">        if (CGRectGetMinY(model.absRect) &gt; minEdge) &#123;</span><br><span class=\"line\">            maxIndex = midIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            minIndex = midIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        midIndex = (minIndex + maxIndex) / 2;</span><br><span class=\"line\">        model = ascendingEdgeArray[midIndex];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    midIndex = MAX(midIndex - 1, 0);</span><br><span class=\"line\">    NSArray *array = [ascendingEdgeArray subarrayWithRange:NSMakeRange(midIndex, ascendingEdgeArray.count - midIndex)];</span><br><span class=\"line\">    return [NSMutableSet setWithArray:array];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再贴一段第三个问题的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    NSMutableArray *newVisibleViews = [self visiableViewModels].mutableCopy;</span><br><span class=\"line\">    NSMutableArray *newVisibleLsvIds = [newVisibleViews valueForKey:@&quot;lsvId&quot;];</span><br><span class=\"line\">    NSMutableArray *removeViews = [NSMutableArray array];</span><br><span class=\"line\">    for (UIView *view in self.visibleViews) &#123;</span><br><span class=\"line\">        if (![newVisibleLsvIds containsObject:view.lsvId]) &#123;</span><br><span class=\"line\">            [removeViews addObject:view];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (UIView *view in removeViews) &#123;</span><br><span class=\"line\">        [self.visibleViews removeObject:view];</span><br><span class=\"line\">        [self enqueueReusableView:view];</span><br><span class=\"line\">        [view removeFromSuperview];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"LazyScrollView简介\"><a href=\"#LazyScrollView简介\" class=\"headerlink\" title=\"LazyScrollView简介\"></a><code>LazyScrollView</code>简介</h2><blockquote>\n<p>LazyScrollView 继承自ScrollView，目标是解决异构（与TableView的同构对比）滚动视图的复用回收问题。它可以支持跨View层的复用，用易用方式来生成一个高性能的滚动视图。此方案最先在天猫iOS客户端的首页落地。</p>\n</blockquote>\n<blockquote>\n<p>—-<a href=\"http://pingguohe.net/2016/01/31/lazyscroll.html\">苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a></p>\n</blockquote>\n<p>在<a href=\"http://pingguohe.net/2016/01/31/lazyscroll.html\">这篇文章</a>中，博主详细介绍了LazyScrollView的使用和实现方案，但是并没有给出具体DEMO，这里只是站在巨人的肩膀上，给一个DEMO，同时也希望可以抛砖引玉。</p>","more":"<h2 id=\"LazyScrollView使用\"><a href=\"#LazyScrollView使用\" class=\"headerlink\" title=\"LazyScrollView使用\"></a><code>LazyScrollView</code>使用</h2><p>暂时的实现比较简陋，目前只有一个<code>id&lt;LazyScrollViewDataSource&gt; dataSource;</code>，需要实现下面三个接口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol LazyScrollViewDataSource &lt;NSObject&gt;</span><br><span class=\"line\">@required</span><br><span class=\"line\">// ScrollView一共展示多少个item</span><br><span class=\"line\">- (NSUInteger)numberOfItemInScrollView:(LazyScrollView *)scrollView;</span><br><span class=\"line\">// 要求根据index直接返回RectModel</span><br><span class=\"line\">- (LSVRectModel *)scrollView:(LazyScrollView *)scrollView rectModelAtIndex:(NSUInteger)index;</span><br><span class=\"line\">// 返回下标所对应的view</span><br><span class=\"line\">- (UIView *)scrollView:(LazyScrollView *)scrollView itemByLsvId:(NSString *)lsvId;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>其中<code>LSVRectModel</code>就是原文中的<code>TMMuiRectModel</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface LSVRectModel : NSObject</span><br><span class=\"line\">// 转换后的绝对值rect</span><br><span class=\"line\">@property (nonatomic, assign) CGRect absRect;</span><br><span class=\"line\">// 业务下标</span><br><span class=\"line\">@property (nonatomic, copy) NSString *lsvId;</span><br><span class=\"line\">+ (instancetype)modelWithRect:(CGRect)rect lsvId:(NSString *)lsvId;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>三个接口都很简单，和<code>UITableView</code>很类似，如果有不清楚，可以在底部查看DEMO或者原文。</p>\n<p>另外，<code>LazyScrollView</code>提供了三个接口，也都是仿照<code>UITableView</code>来的，所以整个<code>LazyScrollView</code>的使用应该是很容易上手的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)reloadData;</span><br><span class=\"line\">- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;</span><br><span class=\"line\">- (void)registerClass:(Class)viewClass forViewReuseIdentifier:(NSString *)identifier;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LazyScrollView实现\"><a href=\"#LazyScrollView实现\" class=\"headerlink\" title=\"LazyScrollView实现\"></a><code>LazyScrollView</code>实现</h2><p>最主要的思路就是复用，所以有两个<code>View</code>池：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) NSMutableDictionary&lt;NSString *, NSMutableSet *&gt; *reuseViews;</span><br><span class=\"line\">@property (nonatomic, strong) NSMutableSet&lt;__kindof UIView *&gt; *visibleViews;</span><br></pre></td></tr></table></figure>\n<p>由于每个<code>View</code>可能对应不同的identifier，所以<code>reuseViews</code>是一个<code>NSMutableDictionary</code>。<br>当一个<code>View</code>滑出可见区域之后，会将它先从<code>visibleViews</code>中移除，然后添加到<code>reuseViews</code>中，并从<code>LazyScrollView</code>中 <em>remove</em>，即调用<code>removeFromSuperview</code>。这个地方在原文中作者的表述可能让大家误会了。</p>\n<blockquote>\n<p>LazyScrollView中有一个Dictionary，key是reuseIdentifier,Value是对应reuseIdentifier被回收的View，当LazyScrollView得知这个View不该再出现了，会把View放在这里，并且把这个View hidden掉。</p>\n</blockquote>\n<p>这里作者用的是<code>hidden掉</code>，但是我们知道，<code>hidden</code>只是控制显隐，<code>View</code>本身还是在那里，也无法去复用。</p>\n<p>而当一个View滑到可见区域内时，需要先从<code>reuseViews</code>中复用，如果<code>reuseViews</code>没有，则重新创建一个。相关实现请看<code>- (UIView *)dequeueReusableItemWithIdentifier:(NSString *)identifier;</code>。</p>\n<p>最后一个问题就是如何判断一个<code>View</code>是在可见区域内的。这里原文中说的很清晰，还有图片配合。建议大家还是移步原文。这里我简单说一下，找到顶边大于<code>contentOffset.y - BUFFER_HEIGHT</code>，底边小于<code>contentOffset.y+CGRectGetHeight(self.bounds) + BUFFER_HEIGHT</code>，然后两个集合取交集就是需要显示的<code>View</code>集合了。<br>当然，这里有一些处理算法：</p>\n<ul>\n<li>对 <strong>顶边</strong> 做升序处理得到一个集合，对 <strong>底边</strong> 降序处理得到一个集合。</li>\n<li>采用二分法查找合适的位置，然后再对上一步得到的集合取子集即可。</li>\n</ul>\n<p>好了，说了这么多，先放出DEMO地址吧，希望大家可以帮助完善，也希望可以给个Star。<br><a href=\"https://github.com/HistoryZhang/LazyScrollView\">https://github.com/HistoryZhang/LazyScrollView</a>。<br>原文地址：<a href=\"http://pingguohe.net/2016/01/31/lazyscroll.html\">苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a>（里面还有很多干货）。</p>\n<p>最后说一下目前写的几个问题，希望大家可以一起来优化：</p>\n<ol>\n<li>没有处理<code>View</code>点击事件，即没有写<code>delegate</code>回调。</li>\n<li>二分法查找合适位置的时候算法待优化。</li>\n<li>从旧的<code>visibleViews</code>中移除被滑出的<code>View</code>算法待优化。</li>\n</ol>\n<p>贴一段第二个问题的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSMutableSet *)findSetWithMinEdge:(CGFloat)minEdge &#123;</span><br><span class=\"line\">    NSArray *ascendingEdgeArray =</span><br><span class=\"line\">    [self.allRects sortedArrayUsingComparator:^NSComparisonResult(LSVRectModel *obj1, LSVRectModel *obj2) &#123;</span><br><span class=\"line\">        return CGRectGetMinY(obj1.absRect) &gt; CGRectGetMinY(obj2.absRect) ? NSOrderedDescending : NSOrderedAscending;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // TOOD: 此处待优化</span><br><span class=\"line\">    // 二分法</span><br><span class=\"line\">    NSInteger minIndex = 0;</span><br><span class=\"line\">    NSInteger maxIndex = ascendingEdgeArray.count - 1;</span><br><span class=\"line\">    NSInteger midIndex = (minIndex + maxIndex) / 2;</span><br><span class=\"line\">    LSVRectModel *model = ascendingEdgeArray[midIndex];</span><br><span class=\"line\">    while (minIndex &lt; maxIndex - 1) &#123;</span><br><span class=\"line\">        if (CGRectGetMinY(model.absRect) &gt; minEdge) &#123;</span><br><span class=\"line\">            maxIndex = midIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            minIndex = midIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        midIndex = (minIndex + maxIndex) / 2;</span><br><span class=\"line\">        model = ascendingEdgeArray[midIndex];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    midIndex = MAX(midIndex - 1, 0);</span><br><span class=\"line\">    NSArray *array = [ascendingEdgeArray subarrayWithRange:NSMakeRange(midIndex, ascendingEdgeArray.count - midIndex)];</span><br><span class=\"line\">    return [NSMutableSet setWithArray:array];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再贴一段第三个问题的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    NSMutableArray *newVisibleViews = [self visiableViewModels].mutableCopy;</span><br><span class=\"line\">    NSMutableArray *newVisibleLsvIds = [newVisibleViews valueForKey:@&quot;lsvId&quot;];</span><br><span class=\"line\">    NSMutableArray *removeViews = [NSMutableArray array];</span><br><span class=\"line\">    for (UIView *view in self.visibleViews) &#123;</span><br><span class=\"line\">        if (![newVisibleLsvIds containsObject:view.lsvId]) &#123;</span><br><span class=\"line\">            [removeViews addObject:view];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (UIView *view in removeViews) &#123;</span><br><span class=\"line\">        [self.visibleViews removeObject:view];</span><br><span class=\"line\">        [self enqueueReusableView:view];</span><br><span class=\"line\">        [view removeFromSuperview];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"iOS10下使用AutoLayout动画失效解决","date":"2016-11-01T11:57:31.000Z","_content":"更新到 `iOS10` 后，原来使用 `AutoLayout` 自定义的控件做了一些简单的动画失效了，但是在 `iOS10` 以下还是正常的。于是 `Google` 了一番，终于又是在 [http://stackoverflow.com](http://stackoverflow.com) 找到了解决办法。\n\n<!--more-->\n\n```\n[UIView animateWithDuration:0.3\n                          delay:0\n                          options:UIViewAnimationOptionCurveEaseOut\n                       animations:^{\n         [self mas_updateConstraints:^(MASConstraintMaker *make) {\n                                                          \n         }];\n         [self layoutIfNeeded];\n     }\n                      completion:^(BOOL finished) {\n                                              \n     }];\n```\n\n原来我们的代码应该是类似这样的，使用 `layoutIfNeeded` 强制刷新然后执行动画。`iOS10` 以后需要使用 `[self.superview layoutIfNeeded];` 。这样消失的动画就又出来了。","source":"_posts/iOS10下使用AutoLayout动画失效解决.md","raw":"---\ntitle: iOS10下使用AutoLayout动画失效解决\ndate: 2016-11-01 19:57:31\ntags: \n    - iOS10\n    - AutoLayout\ncategories:\n    - iOS\n\n---\n更新到 `iOS10` 后，原来使用 `AutoLayout` 自定义的控件做了一些简单的动画失效了，但是在 `iOS10` 以下还是正常的。于是 `Google` 了一番，终于又是在 [http://stackoverflow.com](http://stackoverflow.com) 找到了解决办法。\n\n<!--more-->\n\n```\n[UIView animateWithDuration:0.3\n                          delay:0\n                          options:UIViewAnimationOptionCurveEaseOut\n                       animations:^{\n         [self mas_updateConstraints:^(MASConstraintMaker *make) {\n                                                          \n         }];\n         [self layoutIfNeeded];\n     }\n                      completion:^(BOOL finished) {\n                                              \n     }];\n```\n\n原来我们的代码应该是类似这样的，使用 `layoutIfNeeded` 强制刷新然后执行动画。`iOS10` 以后需要使用 `[self.superview layoutIfNeeded];` 。这样消失的动画就又出来了。","slug":"iOS10下使用AutoLayout动画失效解决","published":1,"updated":"2021-08-27T13:34:42.824Z","_id":"cksu5b156002g8c2033qe46yi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>更新到 <code>iOS10</code> 后，原来使用 <code>AutoLayout</code> 自定义的控件做了一些简单的动画失效了，但是在 <code>iOS10</code> 以下还是正常的。于是 <code>Google</code> 了一番，终于又是在 <a href=\"http://stackoverflow.com/\">http://stackoverflow.com</a> 找到了解决办法。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UIView animateWithDuration:0.3</span><br><span class=\"line\">                          delay:0</span><br><span class=\"line\">                          options:UIViewAnimationOptionCurveEaseOut</span><br><span class=\"line\">                       animations:^&#123;</span><br><span class=\"line\">         [self mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">                                                          </span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">         [self layoutIfNeeded];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">                      completion:^(BOOL finished) &#123;</span><br><span class=\"line\">                                              </span><br><span class=\"line\">     &#125;];</span><br></pre></td></tr></table></figure>\n\n<p>原来我们的代码应该是类似这样的，使用 <code>layoutIfNeeded</code> 强制刷新然后执行动画。<code>iOS10</code> 以后需要使用 <code>[self.superview layoutIfNeeded];</code> 。这样消失的动画就又出来了。</p>\n","site":{"data":{}},"excerpt":"<p>更新到 <code>iOS10</code> 后，原来使用 <code>AutoLayout</code> 自定义的控件做了一些简单的动画失效了，但是在 <code>iOS10</code> 以下还是正常的。于是 <code>Google</code> 了一番，终于又是在 <a href=\"http://stackoverflow.com/\">http://stackoverflow.com</a> 找到了解决办法。</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[UIView animateWithDuration:0.3</span><br><span class=\"line\">                          delay:0</span><br><span class=\"line\">                          options:UIViewAnimationOptionCurveEaseOut</span><br><span class=\"line\">                       animations:^&#123;</span><br><span class=\"line\">         [self mas_updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">                                                          </span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">         [self layoutIfNeeded];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">                      completion:^(BOOL finished) &#123;</span><br><span class=\"line\">                                              </span><br><span class=\"line\">     &#125;];</span><br></pre></td></tr></table></figure>\n\n<p>原来我们的代码应该是类似这样的，使用 <code>layoutIfNeeded</code> 强制刷新然后执行动画。<code>iOS10</code> 以后需要使用 <code>[self.superview layoutIfNeeded];</code> 。这样消失的动画就又出来了。</p>"},{"layout":"post","title":"iOS8下TabBarController push后控件下移闪动","date":"2015-04-27T08:04:40.000Z","comments":1,"_content":"使用`TabBarController`后,如果push下一个页面需要隐藏`TabBar`,而下一个页面中有个控件设置`AutoLayout`的时候设置了和页面底部的距离,那么会有个闪烁动画,控件会以动画的形式下移44px.该现象只在iOS8中有,iOS7未发现.\n\n<!--more-->\n我们需要在设置`AutoLayout`的时候如下图修改一下即可修复这个动画.\n{% img /images/blog/2015-04-27-16-00.png %}\n","source":"_posts/iOS8下TabBarController push后控件下移闪动.markdown","raw":"---\nlayout: post\ntitle: \"iOS8下TabBarController push后控件下移闪动\"\ndate: 2015-04-27 16:04:40 +0800\ncomments: true\ntags:  ['AutoLayout']\ncategories:\n    - iOS\n---\n使用`TabBarController`后,如果push下一个页面需要隐藏`TabBar`,而下一个页面中有个控件设置`AutoLayout`的时候设置了和页面底部的距离,那么会有个闪烁动画,控件会以动画的形式下移44px.该现象只在iOS8中有,iOS7未发现.\n\n<!--more-->\n我们需要在设置`AutoLayout`的时候如下图修改一下即可修复这个动画.\n{% img /images/blog/2015-04-27-16-00.png %}\n","slug":"iOS8下TabBarController push后控件下移闪动","published":1,"updated":"2021-09-05T14:34:41.611Z","_id":"cksu5b158002j8c20fcmgbwz7","photos":[],"link":"","content":"<p>使用<code>TabBarController</code>后,如果push下一个页面需要隐藏<code>TabBar</code>,而下一个页面中有个控件设置<code>AutoLayout</code>的时候设置了和页面底部的距离,那么会有个闪烁动画,控件会以动画的形式下移44px.该现象只在iOS8中有,iOS7未发现.</p>\n<span id=\"more\"></span>\n<p>我们需要在设置<code>AutoLayout</code>的时候如下图修改一下即可修复这个动画.</p>\n<img src=\"/images/blog/2015-04-27-16-00.png\" class=\"\">\n","site":{"data":{}},"excerpt":"<p>使用<code>TabBarController</code>后,如果push下一个页面需要隐藏<code>TabBar</code>,而下一个页面中有个控件设置<code>AutoLayout</code>的时候设置了和页面底部的距离,那么会有个闪烁动画,控件会以动画的形式下移44px.该现象只在iOS8中有,iOS7未发现.</p>","more":"<p>我们需要在设置<code>AutoLayout</code>的时候如下图修改一下即可修复这个动画.</p>\n<img src=\"/images/blog/2015-04-27-16-00.png\" class=\"\">"},{"title":"iOS下日志记录","date":"2017-09-24T00:22:30.000Z","_content":"\n`iOS`开发中，一般大家都会自定义一个`DLog`的宏来代替`NSLog`，用来控制`Release`下的`Log`输出。\n但是有以下几个弊端：\n* 没有日志分级。做过`Android`的都知道，`Android`可以分为5级，`Error`、`Warning`、`Info`、`Debug`、`Verbose`。\n* 日志没法记录到文件，`Release`版本无法通过`Log`日志定位问题。\n<!--more-->\n所以今天就推荐一个第三方库，[CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)，完全满足以上需求，不但如此，还支持以下需求：\n* 自定义Log文件的文件数、有效期、缓存大小\n```\nfileLogger.logFileManager.maximumNumberOfLogFiles = 20;\nfileLogger.maximumFileSize = 1024 * 1024 * 5;\nfileLogger.rollingFrequency = 60 * 60 * 24;\n```\n具体使用大家还是看看`GitHub`上的介绍。\n现在说一下集成中遇到的问题：\n1 . 可以自定义输出`Log`的格式，需要实现`DDLogFormatter`协议，下面提供一个示例：\n```\n- (NSString *)formatLogMessage:(DDLogMessage *)logMessage {\n    \n    NSString *logLevel = nil;\n    switch (logMessage.flag) {\n        case DDLogFlagError:\n            logLevel = @\"[E]\";\n            break;\n        case DDLogFlagWarning:\n            logLevel = @\"[W]\";\n            break;\n        case DDLogFlagInfo:\n            logLevel = @\"[I]\";\n            break;\n        case DDLogFlagDebug:\n            logLevel = @\"[D]\";\n            break;\n        default:\n            logLevel = @\"[V]\";\n            break;\n    }\n    \n    NSString *formatString = [NSString stringWithFormat:@\"%@ %@ [@%zd] %@ %@\", [logMessage.timestamp descriptionWithLocale:[NSLocale currentLocale]], logLevel, logMessage.line, logMessage.function, logMessage.message];\n    return formatString;\n}\n```\n\n2 . 在单步调试时会发现，很多级别的日志不会立即显示到控制台中。在`DDLogMacros.h`中，我们可以看到以下几个宏定义：\n```\n#define DDLogError(frmt, ...)   LOG_MAYBE(NO,                LOG_LEVEL_DEF, DDLogFlagError,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogWarn(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagWarning, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogInfo(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagInfo,    0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogDebug(frmt, ...)   LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagDebug,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogVerbose(frmt, ...) LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagVerbose, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n```\n你会发现`DDLogError`和其他的宏定义的第一个参数不是很一样，然后找到`LOG_ASYNC_ENABLED`的定义，这样就很明白了，如果你需要立即显示，把`LOG_ASYNC_ENABLED`的定义改为如下即可。\n```\n#ifndef LOG_ASYNC_ENABLED\n    #define LOG_ASYNC_ENABLED NO\n#endif\n```\n3 . 说一下`rollingFrequency`这个属性，看了源码后发现，作者是根据文件的创建时间来处理的，所以就会导致这样的问题，`1号15:00`创建的文件，然后用到`2号15:00`就会重新创建一个文件，所以会导致`2号的Log在15:00`被分为2个文件。\n\n如果需要更高度的自定义，可以去[CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)主页上看一下`README`。\n","source":"_posts/iOS下日志记录.md","raw":"---\ntitle: iOS下日志记录\ndate: 2017-09-24 08:22:30\ncategories:\n    - iOS\ntags: \n    - Log\n---\n\n`iOS`开发中，一般大家都会自定义一个`DLog`的宏来代替`NSLog`，用来控制`Release`下的`Log`输出。\n但是有以下几个弊端：\n* 没有日志分级。做过`Android`的都知道，`Android`可以分为5级，`Error`、`Warning`、`Info`、`Debug`、`Verbose`。\n* 日志没法记录到文件，`Release`版本无法通过`Log`日志定位问题。\n<!--more-->\n所以今天就推荐一个第三方库，[CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)，完全满足以上需求，不但如此，还支持以下需求：\n* 自定义Log文件的文件数、有效期、缓存大小\n```\nfileLogger.logFileManager.maximumNumberOfLogFiles = 20;\nfileLogger.maximumFileSize = 1024 * 1024 * 5;\nfileLogger.rollingFrequency = 60 * 60 * 24;\n```\n具体使用大家还是看看`GitHub`上的介绍。\n现在说一下集成中遇到的问题：\n1 . 可以自定义输出`Log`的格式，需要实现`DDLogFormatter`协议，下面提供一个示例：\n```\n- (NSString *)formatLogMessage:(DDLogMessage *)logMessage {\n    \n    NSString *logLevel = nil;\n    switch (logMessage.flag) {\n        case DDLogFlagError:\n            logLevel = @\"[E]\";\n            break;\n        case DDLogFlagWarning:\n            logLevel = @\"[W]\";\n            break;\n        case DDLogFlagInfo:\n            logLevel = @\"[I]\";\n            break;\n        case DDLogFlagDebug:\n            logLevel = @\"[D]\";\n            break;\n        default:\n            logLevel = @\"[V]\";\n            break;\n    }\n    \n    NSString *formatString = [NSString stringWithFormat:@\"%@ %@ [@%zd] %@ %@\", [logMessage.timestamp descriptionWithLocale:[NSLocale currentLocale]], logLevel, logMessage.line, logMessage.function, logMessage.message];\n    return formatString;\n}\n```\n\n2 . 在单步调试时会发现，很多级别的日志不会立即显示到控制台中。在`DDLogMacros.h`中，我们可以看到以下几个宏定义：\n```\n#define DDLogError(frmt, ...)   LOG_MAYBE(NO,                LOG_LEVEL_DEF, DDLogFlagError,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogWarn(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagWarning, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogInfo(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagInfo,    0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogDebug(frmt, ...)   LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagDebug,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n#define DDLogVerbose(frmt, ...) LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagVerbose, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)\n```\n你会发现`DDLogError`和其他的宏定义的第一个参数不是很一样，然后找到`LOG_ASYNC_ENABLED`的定义，这样就很明白了，如果你需要立即显示，把`LOG_ASYNC_ENABLED`的定义改为如下即可。\n```\n#ifndef LOG_ASYNC_ENABLED\n    #define LOG_ASYNC_ENABLED NO\n#endif\n```\n3 . 说一下`rollingFrequency`这个属性，看了源码后发现，作者是根据文件的创建时间来处理的，所以就会导致这样的问题，`1号15:00`创建的文件，然后用到`2号15:00`就会重新创建一个文件，所以会导致`2号的Log在15:00`被分为2个文件。\n\n如果需要更高度的自定义，可以去[CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack)主页上看一下`README`。\n","slug":"iOS下日志记录","published":1,"updated":"2021-08-27T13:34:42.824Z","_id":"cksu5b159002m8c20c9uv2hlw","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>iOS</code>开发中，一般大家都会自定义一个<code>DLog</code>的宏来代替<code>NSLog</code>，用来控制<code>Release</code>下的<code>Log</code>输出。<br>但是有以下几个弊端：</p>\n<ul>\n<li>没有日志分级。做过<code>Android</code>的都知道，<code>Android</code>可以分为5级，<code>Error</code>、<code>Warning</code>、<code>Info</code>、<code>Debug</code>、<code>Verbose</code>。</li>\n<li>日志没法记录到文件，<code>Release</code>版本无法通过<code>Log</code>日志定位问题。<span id=\"more\"></span>\n所以今天就推荐一个第三方库，<a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a>，完全满足以上需求，不但如此，还支持以下需求：</li>\n<li>自定义Log文件的文件数、有效期、缓存大小<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileLogger.logFileManager.maximumNumberOfLogFiles = 20;</span><br><span class=\"line\">fileLogger.maximumFileSize = 1024 * 1024 * 5;</span><br><span class=\"line\">fileLogger.rollingFrequency = 60 * 60 * 24;</span><br></pre></td></tr></table></figure>\n具体使用大家还是看看<code>GitHub</code>上的介绍。<br>现在说一下集成中遇到的问题：<br>1 . 可以自定义输出<code>Log</code>的格式，需要实现<code>DDLogFormatter</code>协议，下面提供一个示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)formatLogMessage:(DDLogMessage *)logMessage &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *logLevel = nil;</span><br><span class=\"line\">    switch (logMessage.flag) &#123;</span><br><span class=\"line\">        case DDLogFlagError:</span><br><span class=\"line\">            logLevel = @&quot;[E]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case DDLogFlagWarning:</span><br><span class=\"line\">            logLevel = @&quot;[W]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case DDLogFlagInfo:</span><br><span class=\"line\">            logLevel = @&quot;[I]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case DDLogFlagDebug:</span><br><span class=\"line\">            logLevel = @&quot;[D]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            logLevel = @&quot;[V]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *formatString = [NSString stringWithFormat:@&quot;%@ %@ [@%zd] %@ %@&quot;, [logMessage.timestamp descriptionWithLocale:[NSLocale currentLocale]], logLevel, logMessage.line, logMessage.function, logMessage.message];</span><br><span class=\"line\">    return formatString;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>2 . 在单步调试时会发现，很多级别的日志不会立即显示到控制台中。在<code>DDLogMacros.h</code>中，我们可以看到以下几个宏定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define DDLogError(frmt, ...)   LOG_MAYBE(NO,                LOG_LEVEL_DEF, DDLogFlagError,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogWarn(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagWarning, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogInfo(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagInfo,    0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogDebug(frmt, ...)   LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagDebug,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogVerbose(frmt, ...) LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagVerbose, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br></pre></td></tr></table></figure>\n<p>你会发现<code>DDLogError</code>和其他的宏定义的第一个参数不是很一样，然后找到<code>LOG_ASYNC_ENABLED</code>的定义，这样就很明白了，如果你需要立即显示，把<code>LOG_ASYNC_ENABLED</code>的定义改为如下即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef LOG_ASYNC_ENABLED</span><br><span class=\"line\">    #define LOG_ASYNC_ENABLED NO</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>3 . 说一下<code>rollingFrequency</code>这个属性，看了源码后发现，作者是根据文件的创建时间来处理的，所以就会导致这样的问题，<code>1号15:00</code>创建的文件，然后用到<code>2号15:00</code>就会重新创建一个文件，所以会导致<code>2号的Log在15:00</code>被分为2个文件。</p>\n<p>如果需要更高度的自定义，可以去<a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a>主页上看一下<code>README</code>。</p>\n","site":{"data":{}},"excerpt":"<p><code>iOS</code>开发中，一般大家都会自定义一个<code>DLog</code>的宏来代替<code>NSLog</code>，用来控制<code>Release</code>下的<code>Log</code>输出。<br>但是有以下几个弊端：</p>\n<ul>\n<li>没有日志分级。做过<code>Android</code>的都知道，<code>Android</code>可以分为5级，<code>Error</code>、<code>Warning</code>、<code>Info</code>、<code>Debug</code>、<code>Verbose</code>。</li>\n<li>日志没法记录到文件，<code>Release</code>版本无法通过<code>Log</code>日志定位问题。","more":"所以今天就推荐一个第三方库，<a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a>，完全满足以上需求，不但如此，还支持以下需求：</li>\n<li>自定义Log文件的文件数、有效期、缓存大小<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileLogger.logFileManager.maximumNumberOfLogFiles = 20;</span><br><span class=\"line\">fileLogger.maximumFileSize = 1024 * 1024 * 5;</span><br><span class=\"line\">fileLogger.rollingFrequency = 60 * 60 * 24;</span><br></pre></td></tr></table></figure>\n具体使用大家还是看看<code>GitHub</code>上的介绍。<br>现在说一下集成中遇到的问题：<br>1 . 可以自定义输出<code>Log</code>的格式，需要实现<code>DDLogFormatter</code>协议，下面提供一个示例：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)formatLogMessage:(DDLogMessage *)logMessage &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *logLevel = nil;</span><br><span class=\"line\">    switch (logMessage.flag) &#123;</span><br><span class=\"line\">        case DDLogFlagError:</span><br><span class=\"line\">            logLevel = @&quot;[E]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case DDLogFlagWarning:</span><br><span class=\"line\">            logLevel = @&quot;[W]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case DDLogFlagInfo:</span><br><span class=\"line\">            logLevel = @&quot;[I]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case DDLogFlagDebug:</span><br><span class=\"line\">            logLevel = @&quot;[D]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            logLevel = @&quot;[V]&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSString *formatString = [NSString stringWithFormat:@&quot;%@ %@ [@%zd] %@ %@&quot;, [logMessage.timestamp descriptionWithLocale:[NSLocale currentLocale]], logLevel, logMessage.line, logMessage.function, logMessage.message];</span><br><span class=\"line\">    return formatString;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>2 . 在单步调试时会发现，很多级别的日志不会立即显示到控制台中。在<code>DDLogMacros.h</code>中，我们可以看到以下几个宏定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define DDLogError(frmt, ...)   LOG_MAYBE(NO,                LOG_LEVEL_DEF, DDLogFlagError,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogWarn(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagWarning, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogInfo(frmt, ...)    LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagInfo,    0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogDebug(frmt, ...)   LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagDebug,   0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br><span class=\"line\">#define DDLogVerbose(frmt, ...) LOG_MAYBE(LOG_ASYNC_ENABLED, LOG_LEVEL_DEF, DDLogFlagVerbose, 0, nil, __PRETTY_FUNCTION__, frmt, ##__VA_ARGS__)</span><br></pre></td></tr></table></figure>\n<p>你会发现<code>DDLogError</code>和其他的宏定义的第一个参数不是很一样，然后找到<code>LOG_ASYNC_ENABLED</code>的定义，这样就很明白了，如果你需要立即显示，把<code>LOG_ASYNC_ENABLED</code>的定义改为如下即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef LOG_ASYNC_ENABLED</span><br><span class=\"line\">    #define LOG_ASYNC_ENABLED NO</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>3 . 说一下<code>rollingFrequency</code>这个属性，看了源码后发现，作者是根据文件的创建时间来处理的，所以就会导致这样的问题，<code>1号15:00</code>创建的文件，然后用到<code>2号15:00</code>就会重新创建一个文件，所以会导致<code>2号的Log在15:00</code>被分为2个文件。</p>\n<p>如果需要更高度的自定义，可以去<a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a>主页上看一下<code>README</code>。</p>"},{"title":"iOS下更改系统音量","date":"2017-09-30T13:29:38.000Z","_content":"\n`iOS`中，如果想更改系统音量，只有2个方法，一是使用私有方法；二是使用`MPVolumeView`。\n\n私有方法不在我们的讨论范围之列，我们来讨论一下如何使用`MPVolumeView`。\n\n用过一系列的音乐播放器都知道，添加一个`MPVolumeView`在`View`上，然后设置`showsVolumeSlider = YES`，就会有一个`SliderView`，用户滑动时，就能更改系统音量。\n\n这样带来的问题就是，\n<!--more-->\n1. 会显示一个`MPVolumeView`;\n\n2. 需要手动触发滑动事件;\n\n对于第一个问题很简单，`MPVolumeView`的`hidden`属性设置为`YES`即可；所以主要解决如何模拟用户手动滑动事件即可。\n\n不多说，有了思路后就变得很简单了，下面奉上实现代码。\n\n```\n/*\n * 设置音量\n */\n- (void)setVolume:(float)value {\n\n    UISlider *volumeSlider = [self volumeSlider];\n    self.volumeView.showsVolumeSlider = YES; // 需要设置 showsVolumeSlider 为 YES\n    // 下面两句代码是关键\n    [volumeSlider setValue:value animated:NO];\n    [volumeSlider sendActionsForControlEvents:UIControlEventTouchUpInside];\n    [self.volumeView sizeToFit];\n}\n\n- (MPVolumeView *)volumeView {\n    if (!_volumeView) {\n        _volumeView = [[MPVolumeView alloc] init];\n        _volumeView.hidden = YES;\n        [self.window addSubview:_volumeView];\n    }\n    return _volumeView;\n}\n/*\n * 遍历控件，拿到UISlider\n */\n- (UISlider *)volumeSlider {\n    UISlider* volumeSlider = nil;\n    for (UIView *view in [self.volumeView subviews]) {\n        if ([view.class.description isEqualToString:@\"MPVolumeSlider\"]){\n            volumeSlider = (UISlider *)view;\n            break;\n        }\n    }\n    return volumeSlider;\n}\n\n```","source":"_posts/iOS下更改系统音量.md","raw":"---\ntitle: iOS下更改系统音量\ndate: 2017-09-30 21:29:38\ntags: [音量, MPVolumeView]\ncategories: iOS\n---\n\n`iOS`中，如果想更改系统音量，只有2个方法，一是使用私有方法；二是使用`MPVolumeView`。\n\n私有方法不在我们的讨论范围之列，我们来讨论一下如何使用`MPVolumeView`。\n\n用过一系列的音乐播放器都知道，添加一个`MPVolumeView`在`View`上，然后设置`showsVolumeSlider = YES`，就会有一个`SliderView`，用户滑动时，就能更改系统音量。\n\n这样带来的问题就是，\n<!--more-->\n1. 会显示一个`MPVolumeView`;\n\n2. 需要手动触发滑动事件;\n\n对于第一个问题很简单，`MPVolumeView`的`hidden`属性设置为`YES`即可；所以主要解决如何模拟用户手动滑动事件即可。\n\n不多说，有了思路后就变得很简单了，下面奉上实现代码。\n\n```\n/*\n * 设置音量\n */\n- (void)setVolume:(float)value {\n\n    UISlider *volumeSlider = [self volumeSlider];\n    self.volumeView.showsVolumeSlider = YES; // 需要设置 showsVolumeSlider 为 YES\n    // 下面两句代码是关键\n    [volumeSlider setValue:value animated:NO];\n    [volumeSlider sendActionsForControlEvents:UIControlEventTouchUpInside];\n    [self.volumeView sizeToFit];\n}\n\n- (MPVolumeView *)volumeView {\n    if (!_volumeView) {\n        _volumeView = [[MPVolumeView alloc] init];\n        _volumeView.hidden = YES;\n        [self.window addSubview:_volumeView];\n    }\n    return _volumeView;\n}\n/*\n * 遍历控件，拿到UISlider\n */\n- (UISlider *)volumeSlider {\n    UISlider* volumeSlider = nil;\n    for (UIView *view in [self.volumeView subviews]) {\n        if ([view.class.description isEqualToString:@\"MPVolumeSlider\"]){\n            volumeSlider = (UISlider *)view;\n            break;\n        }\n    }\n    return volumeSlider;\n}\n\n```","slug":"iOS下更改系统音量","published":1,"updated":"2021-09-05T14:35:00.458Z","_id":"cksu5b15a002q8c206xls5cr2","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>iOS</code>中，如果想更改系统音量，只有2个方法，一是使用私有方法；二是使用<code>MPVolumeView</code>。</p>\n<p>私有方法不在我们的讨论范围之列，我们来讨论一下如何使用<code>MPVolumeView</code>。</p>\n<p>用过一系列的音乐播放器都知道，添加一个<code>MPVolumeView</code>在<code>View</code>上，然后设置<code>showsVolumeSlider = YES</code>，就会有一个<code>SliderView</code>，用户滑动时，就能更改系统音量。</p>\n<p>这样带来的问题就是，</p>\n<span id=\"more\"></span>\n<ol>\n<li><p>会显示一个<code>MPVolumeView</code>;</p>\n</li>\n<li><p>需要手动触发滑动事件;</p>\n</li>\n</ol>\n<p>对于第一个问题很简单，<code>MPVolumeView</code>的<code>hidden</code>属性设置为<code>YES</code>即可；所以主要解决如何模拟用户手动滑动事件即可。</p>\n<p>不多说，有了思路后就变得很简单了，下面奉上实现代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 设置音量</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (void)setVolume:(float)value &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    UISlider *volumeSlider = [self volumeSlider];</span><br><span class=\"line\">    self.volumeView.showsVolumeSlider = YES; // 需要设置 showsVolumeSlider 为 YES</span><br><span class=\"line\">    // 下面两句代码是关键</span><br><span class=\"line\">    [volumeSlider setValue:value animated:NO];</span><br><span class=\"line\">    [volumeSlider sendActionsForControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">    [self.volumeView sizeToFit];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MPVolumeView *)volumeView &#123;</span><br><span class=\"line\">    if (!_volumeView) &#123;</span><br><span class=\"line\">        _volumeView = [[MPVolumeView alloc] init];</span><br><span class=\"line\">        _volumeView.hidden = YES;</span><br><span class=\"line\">        [self.window addSubview:_volumeView];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _volumeView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*</span><br><span class=\"line\"> * 遍历控件，拿到UISlider</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (UISlider *)volumeSlider &#123;</span><br><span class=\"line\">    UISlider* volumeSlider = nil;</span><br><span class=\"line\">    for (UIView *view in [self.volumeView subviews]) &#123;</span><br><span class=\"line\">        if ([view.class.description isEqualToString:@&quot;MPVolumeSlider&quot;])&#123;</span><br><span class=\"line\">            volumeSlider = (UISlider *)view;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return volumeSlider;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><code>iOS</code>中，如果想更改系统音量，只有2个方法，一是使用私有方法；二是使用<code>MPVolumeView</code>。</p>\n<p>私有方法不在我们的讨论范围之列，我们来讨论一下如何使用<code>MPVolumeView</code>。</p>\n<p>用过一系列的音乐播放器都知道，添加一个<code>MPVolumeView</code>在<code>View</code>上，然后设置<code>showsVolumeSlider = YES</code>，就会有一个<code>SliderView</code>，用户滑动时，就能更改系统音量。</p>\n<p>这样带来的问题就是，</p>","more":"<ol>\n<li><p>会显示一个<code>MPVolumeView</code>;</p>\n</li>\n<li><p>需要手动触发滑动事件;</p>\n</li>\n</ol>\n<p>对于第一个问题很简单，<code>MPVolumeView</code>的<code>hidden</code>属性设置为<code>YES</code>即可；所以主要解决如何模拟用户手动滑动事件即可。</p>\n<p>不多说，有了思路后就变得很简单了，下面奉上实现代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 设置音量</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (void)setVolume:(float)value &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    UISlider *volumeSlider = [self volumeSlider];</span><br><span class=\"line\">    self.volumeView.showsVolumeSlider = YES; // 需要设置 showsVolumeSlider 为 YES</span><br><span class=\"line\">    // 下面两句代码是关键</span><br><span class=\"line\">    [volumeSlider setValue:value animated:NO];</span><br><span class=\"line\">    [volumeSlider sendActionsForControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">    [self.volumeView sizeToFit];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MPVolumeView *)volumeView &#123;</span><br><span class=\"line\">    if (!_volumeView) &#123;</span><br><span class=\"line\">        _volumeView = [[MPVolumeView alloc] init];</span><br><span class=\"line\">        _volumeView.hidden = YES;</span><br><span class=\"line\">        [self.window addSubview:_volumeView];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _volumeView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*</span><br><span class=\"line\"> * 遍历控件，拿到UISlider</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (UISlider *)volumeSlider &#123;</span><br><span class=\"line\">    UISlider* volumeSlider = nil;</span><br><span class=\"line\">    for (UIView *view in [self.volumeView subviews]) &#123;</span><br><span class=\"line\">        if ([view.class.description isEqualToString:@&quot;MPVolumeSlider&quot;])&#123;</span><br><span class=\"line\">            volumeSlider = (UISlider *)view;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return volumeSlider;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"iOS创建单例","date":"2016-11-01T12:01:31.000Z","_content":"在开发过程中经常会遇到需要单例的时候，然后很多时候大家写的单例其实并不符合要求。下面介绍一个标准的单例。\n\n一般来说，我还是喜欢用`GCD`来创建单例，使用`dispatch_once`很方便。\n<!--more-->\n```\nstatic id _instance;   \n \n+ (instancetype)sharedInstance  \n{   \n    static dispatch_once_t onceToken;   \n    dispatch_once(&onceToken, ^{   \n        _instance = [[self alloc] init];   \n    });   \n    return _instance;   \n} \n\n```\n\n上面说的并不符合要求就是这样创建出来的单例。很多人以为这样就可以了，`dispatch_once`保证了只运行一次。然而，如果一个不知情的人调用了你写的类，你无法保证他不去调用`alloc`，`copy`来生成实例。\n所以我们还要做一些其他的处理。\n\n```\n+ (instancetype)allocWithZone:(struct _NSZone *)zone  \n{   \n    static dispatch_once_t onceToken;   \n    dispatch_once(&onceToken, ^{   \n        _instance = [super allocWithZone:zone];   \n    });   \n    return _instance;   \n}   \n \n- (id)copyWithZone:(NSZone *)zone   \n{   \n    return _instance;   \n}  \n \n- (id)mutableCopyWithZone:(NSZone *)zone {   \n    return _instance;   \n}\n```\n\n这样就可以了。","source":"_posts/iOS创建单例.md","raw":"---\ntitle: iOS创建单例\ndate: 2016-11-01 20:01:31\ntags: \n    - 单例\ncategories:\n    - iOS\n\n---\n在开发过程中经常会遇到需要单例的时候，然后很多时候大家写的单例其实并不符合要求。下面介绍一个标准的单例。\n\n一般来说，我还是喜欢用`GCD`来创建单例，使用`dispatch_once`很方便。\n<!--more-->\n```\nstatic id _instance;   \n \n+ (instancetype)sharedInstance  \n{   \n    static dispatch_once_t onceToken;   \n    dispatch_once(&onceToken, ^{   \n        _instance = [[self alloc] init];   \n    });   \n    return _instance;   \n} \n\n```\n\n上面说的并不符合要求就是这样创建出来的单例。很多人以为这样就可以了，`dispatch_once`保证了只运行一次。然而，如果一个不知情的人调用了你写的类，你无法保证他不去调用`alloc`，`copy`来生成实例。\n所以我们还要做一些其他的处理。\n\n```\n+ (instancetype)allocWithZone:(struct _NSZone *)zone  \n{   \n    static dispatch_once_t onceToken;   \n    dispatch_once(&onceToken, ^{   \n        _instance = [super allocWithZone:zone];   \n    });   \n    return _instance;   \n}   \n \n- (id)copyWithZone:(NSZone *)zone   \n{   \n    return _instance;   \n}  \n \n- (id)mutableCopyWithZone:(NSZone *)zone {   \n    return _instance;   \n}\n```\n\n这样就可以了。","slug":"iOS创建单例","published":1,"updated":"2021-08-27T13:34:42.825Z","_id":"cksu5b15b002t8c201sai9n9n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在开发过程中经常会遇到需要单例的时候，然后很多时候大家写的单例其实并不符合要求。下面介绍一个标准的单例。</p>\n<p>一般来说，我还是喜欢用<code>GCD</code>来创建单例，使用<code>dispatch_once</code>很方便。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static id _instance;   </span><br><span class=\"line\"> </span><br><span class=\"line\">+ (instancetype)sharedInstance  </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    static dispatch_once_t onceToken;   </span><br><span class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;   </span><br><span class=\"line\">        _instance = [[self alloc] init];   </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面说的并不符合要求就是这样创建出来的单例。很多人以为这样就可以了，<code>dispatch_once</code>保证了只运行一次。然而，如果一个不知情的人调用了你写的类，你无法保证他不去调用<code>alloc</code>，<code>copy</code>来生成实例。<br>所以我们还要做一些其他的处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (instancetype)allocWithZone:(struct _NSZone *)zone  </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    static dispatch_once_t onceToken;   </span><br><span class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;   </span><br><span class=\"line\">        _instance = [super allocWithZone:zone];   </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)copyWithZone:(NSZone *)zone   </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)mutableCopyWithZone:(NSZone *)zone &#123;   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以了。</p>\n","site":{"data":{}},"excerpt":"<p>在开发过程中经常会遇到需要单例的时候，然后很多时候大家写的单例其实并不符合要求。下面介绍一个标准的单例。</p>\n<p>一般来说，我还是喜欢用<code>GCD</code>来创建单例，使用<code>dispatch_once</code>很方便。</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static id _instance;   </span><br><span class=\"line\"> </span><br><span class=\"line\">+ (instancetype)sharedInstance  </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    static dispatch_once_t onceToken;   </span><br><span class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;   </span><br><span class=\"line\">        _instance = [[self alloc] init];   </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面说的并不符合要求就是这样创建出来的单例。很多人以为这样就可以了，<code>dispatch_once</code>保证了只运行一次。然而，如果一个不知情的人调用了你写的类，你无法保证他不去调用<code>alloc</code>，<code>copy</code>来生成实例。<br>所以我们还要做一些其他的处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (instancetype)allocWithZone:(struct _NSZone *)zone  </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    static dispatch_once_t onceToken;   </span><br><span class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;   </span><br><span class=\"line\">        _instance = [super allocWithZone:zone];   </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)copyWithZone:(NSZone *)zone   </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\">- (id)mutableCopyWithZone:(NSZone *)zone &#123;   </span><br><span class=\"line\">    return _instance;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以了。</p>"},{"title":"iOS合并真机和模拟器静态库","date":"2014-08-03T02:48:38.000Z","_content":"# 前言\n有时候会在真机和模拟器间切换,总是来回替换库到是很不方便.这样可以在开发的时候将真机和模拟器库何必为一个文件,等到发布的时候再替换为真机库即可.\n<!--more-->\n# 正文\n使用下面的命令即可合并两个静态库.\n\n```\nlipo -create /libXXSimulator.a /libXXOs.a -output /libXX.a\n```\n使用的时候记得注意文件的路径.其中`-create`后的两个参数是真机和模拟器静态库的路径,`-output`后面的参数是合并后的静态库路径.","source":"_posts/iOS合并真机和模拟器静态库.markdown","raw":"---\ntitle: \"iOS合并真机和模拟器静态库\"\ndate: 2014-08-03 10:48:38 +0800\ntags: \n    - 静态库\ncategories:\n    - iOS\n\n---\n# 前言\n有时候会在真机和模拟器间切换,总是来回替换库到是很不方便.这样可以在开发的时候将真机和模拟器库何必为一个文件,等到发布的时候再替换为真机库即可.\n<!--more-->\n# 正文\n使用下面的命令即可合并两个静态库.\n\n```\nlipo -create /libXXSimulator.a /libXXOs.a -output /libXX.a\n```\n使用的时候记得注意文件的路径.其中`-create`后的两个参数是真机和模拟器静态库的路径,`-output`后面的参数是合并后的静态库路径.","slug":"iOS合并真机和模拟器静态库","published":1,"updated":"2021-08-27T13:34:42.825Z","_id":"cksu5b15c002x8c20eynudfzd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有时候会在真机和模拟器间切换,总是来回替换库到是很不方便.这样可以在开发的时候将真机和模拟器库何必为一个文件,等到发布的时候再替换为真机库即可.</p>\n<span id=\"more\"></span>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>使用下面的命令即可合并两个静态库.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lipo -create /libXXSimulator.a /libXXOs.a -output /libXX.a</span><br></pre></td></tr></table></figure>\n<p>使用的时候记得注意文件的路径.其中<code>-create</code>后的两个参数是真机和模拟器静态库的路径,<code>-output</code>后面的参数是合并后的静态库路径.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>有时候会在真机和模拟器间切换,总是来回替换库到是很不方便.这样可以在开发的时候将真机和模拟器库何必为一个文件,等到发布的时候再替换为真机库即可.</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>使用下面的命令即可合并两个静态库.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lipo -create /libXXSimulator.a /libXXOs.a -output /libXX.a</span><br></pre></td></tr></table></figure>\n<p>使用的时候记得注意文件的路径.其中<code>-create</code>后的两个参数是真机和模拟器静态库的路径,<code>-output</code>后面的参数是合并后的静态库路径.</p>"},{"title":"iOS唯一标志","date":"2014-07-19T13:33:48.000Z","_content":"# 背景\n由于iOS对于用户隐私的保护,使得在iOS下面想要拿到一个唯一的设备号是不怎么方便的.当然在IOS5,6中还是可以有那么一丝希望的,UUID,MAC地址等.可是后来,苹果彻底把所有的路都堵死了.瞬间大家都觉得没戏了.\n# 新方案\n既然我写这个博客,说明还是有方法的.大家都知道在Mac OSX上有Keychain,可以保存用户的所有密码.其实在iOS上也有这个Keychain的,只不过没有像Mac OSX上面那样的App来管理罢了.\n所以,我们就可以借用这个Keychain来构造设备的唯一标志.\n至于iOS底层的库我就不多说了,直接推荐一个三方开源库,[SSKeychain](https://github.com/soffes/sskeychain),大家可以去GitHub下载,也可以使用CocosPods来管理.\n\n<!--more-->\n\n# API\n我们主要使用`SSKeychain`中的几个API.\n## a.获取密码\n\n```\n+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account;\n+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;\n```\n\n## b.删除密码\n\n```\n+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account;\n+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;\n```\n\n## c.设置密码\n\n```\n+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account;\n+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;\n```\n\n当然,我们是需要一个唯一标志,所以就需要生成一个UUID,这样就可以用`SSKeychain`来设置密码为生成的UUID,具体操作如下:\n\n### 1.创建一个NSString的Category生成UUID\n\n```\n@implementation NSString (Extension)\n+ (NSString *)stringForUUID\n{\n   CFUUIDRef uuidObj    = CFUUIDCreate(nil);\n   NSString *uuidString = (NSString *)CFBridgingRelease(CFUUIDCreateString(nil, uuidObj));\n   CFRelease(uuidObj);\n   return uuidString;\n}\n@end\n```\n\n### 2.创建一个HZKeychainManager\n\n```\n@implementation HZKeychainManager\n+ (NSString *)appUUID\n{\n  NSError *error = nil;\n  NSString *uuid = [SSKeychain passwordForService:@\"com.company.app.service\" account:@\"com.company.app.account\" error:&error]; // 获取 密码\n  if (!uuid.length) { // 如果获取不到 则新保存一个\n      uuid = [NSString stringForUUID];\n      BOOL res = [SSKeychain setPassword:uuid forService:kDBServiceKey account:kDBAccountKey error:&error];\n      if (!res) {\n      }\n  }\n  return uuid;\n}\n@end\n```","source":"_posts/iOS唯一标志.markdown","raw":"---\ntitle: \"iOS唯一标志\"\ndate: 2014-07-19 21:33:48 +0800\ntags: \n    - UDID\n    - 唯一标志\ncategories:\n    - iOS\n \n---\n# 背景\n由于iOS对于用户隐私的保护,使得在iOS下面想要拿到一个唯一的设备号是不怎么方便的.当然在IOS5,6中还是可以有那么一丝希望的,UUID,MAC地址等.可是后来,苹果彻底把所有的路都堵死了.瞬间大家都觉得没戏了.\n# 新方案\n既然我写这个博客,说明还是有方法的.大家都知道在Mac OSX上有Keychain,可以保存用户的所有密码.其实在iOS上也有这个Keychain的,只不过没有像Mac OSX上面那样的App来管理罢了.\n所以,我们就可以借用这个Keychain来构造设备的唯一标志.\n至于iOS底层的库我就不多说了,直接推荐一个三方开源库,[SSKeychain](https://github.com/soffes/sskeychain),大家可以去GitHub下载,也可以使用CocosPods来管理.\n\n<!--more-->\n\n# API\n我们主要使用`SSKeychain`中的几个API.\n## a.获取密码\n\n```\n+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account;\n+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;\n```\n\n## b.删除密码\n\n```\n+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account;\n+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;\n```\n\n## c.设置密码\n\n```\n+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account;\n+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;\n```\n\n当然,我们是需要一个唯一标志,所以就需要生成一个UUID,这样就可以用`SSKeychain`来设置密码为生成的UUID,具体操作如下:\n\n### 1.创建一个NSString的Category生成UUID\n\n```\n@implementation NSString (Extension)\n+ (NSString *)stringForUUID\n{\n   CFUUIDRef uuidObj    = CFUUIDCreate(nil);\n   NSString *uuidString = (NSString *)CFBridgingRelease(CFUUIDCreateString(nil, uuidObj));\n   CFRelease(uuidObj);\n   return uuidString;\n}\n@end\n```\n\n### 2.创建一个HZKeychainManager\n\n```\n@implementation HZKeychainManager\n+ (NSString *)appUUID\n{\n  NSError *error = nil;\n  NSString *uuid = [SSKeychain passwordForService:@\"com.company.app.service\" account:@\"com.company.app.account\" error:&error]; // 获取 密码\n  if (!uuid.length) { // 如果获取不到 则新保存一个\n      uuid = [NSString stringForUUID];\n      BOOL res = [SSKeychain setPassword:uuid forService:kDBServiceKey account:kDBAccountKey error:&error];\n      if (!res) {\n      }\n  }\n  return uuid;\n}\n@end\n```","slug":"iOS唯一标志","published":1,"updated":"2021-08-27T13:34:42.825Z","_id":"cksu5b15d00308c20dylu5uix","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>由于iOS对于用户隐私的保护,使得在iOS下面想要拿到一个唯一的设备号是不怎么方便的.当然在IOS5,6中还是可以有那么一丝希望的,UUID,MAC地址等.可是后来,苹果彻底把所有的路都堵死了.瞬间大家都觉得没戏了.</p>\n<h1 id=\"新方案\"><a href=\"#新方案\" class=\"headerlink\" title=\"新方案\"></a>新方案</h1><p>既然我写这个博客,说明还是有方法的.大家都知道在Mac OSX上有Keychain,可以保存用户的所有密码.其实在iOS上也有这个Keychain的,只不过没有像Mac OSX上面那样的App来管理罢了.<br>所以,我们就可以借用这个Keychain来构造设备的唯一标志.<br>至于iOS底层的库我就不多说了,直接推荐一个三方开源库,<a href=\"https://github.com/soffes/sskeychain\">SSKeychain</a>,大家可以去GitHub下载,也可以使用CocosPods来管理.</p>\n<span id=\"more\"></span>\n\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>我们主要使用<code>SSKeychain</code>中的几个API.</p>\n<h2 id=\"a-获取密码\"><a href=\"#a-获取密码\" class=\"headerlink\" title=\"a.获取密码\"></a>a.获取密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account;</span><br><span class=\"line\">+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"b-删除密码\"><a href=\"#b-删除密码\" class=\"headerlink\" title=\"b.删除密码\"></a>b.删除密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account;</span><br><span class=\"line\">+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"c-设置密码\"><a href=\"#c-设置密码\" class=\"headerlink\" title=\"c.设置密码\"></a>c.设置密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account;</span><br><span class=\"line\">+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;</span><br></pre></td></tr></table></figure>\n\n<p>当然,我们是需要一个唯一标志,所以就需要生成一个UUID,这样就可以用<code>SSKeychain</code>来设置密码为生成的UUID,具体操作如下:</p>\n<h3 id=\"1-创建一个NSString的Category生成UUID\"><a href=\"#1-创建一个NSString的Category生成UUID\" class=\"headerlink\" title=\"1.创建一个NSString的Category生成UUID\"></a>1.创建一个NSString的Category生成UUID</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation NSString (Extension)</span><br><span class=\"line\">+ (NSString *)stringForUUID</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   CFUUIDRef uuidObj    = CFUUIDCreate(nil);</span><br><span class=\"line\">   NSString *uuidString = (NSString *)CFBridgingRelease(CFUUIDCreateString(nil, uuidObj));</span><br><span class=\"line\">   CFRelease(uuidObj);</span><br><span class=\"line\">   return uuidString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建一个HZKeychainManager\"><a href=\"#2-创建一个HZKeychainManager\" class=\"headerlink\" title=\"2.创建一个HZKeychainManager\"></a>2.创建一个HZKeychainManager</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation HZKeychainManager</span><br><span class=\"line\">+ (NSString *)appUUID</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSError *error = nil;</span><br><span class=\"line\">  NSString *uuid = [SSKeychain passwordForService:@&quot;com.company.app.service&quot; account:@&quot;com.company.app.account&quot; error:&amp;error]; // 获取 密码</span><br><span class=\"line\">  if (!uuid.length) &#123; // 如果获取不到 则新保存一个</span><br><span class=\"line\">      uuid = [NSString stringForUUID];</span><br><span class=\"line\">      BOOL res = [SSKeychain setPassword:uuid forService:kDBServiceKey account:kDBAccountKey error:&amp;error];</span><br><span class=\"line\">      if (!res) &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return uuid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>由于iOS对于用户隐私的保护,使得在iOS下面想要拿到一个唯一的设备号是不怎么方便的.当然在IOS5,6中还是可以有那么一丝希望的,UUID,MAC地址等.可是后来,苹果彻底把所有的路都堵死了.瞬间大家都觉得没戏了.</p>\n<h1 id=\"新方案\"><a href=\"#新方案\" class=\"headerlink\" title=\"新方案\"></a>新方案</h1><p>既然我写这个博客,说明还是有方法的.大家都知道在Mac OSX上有Keychain,可以保存用户的所有密码.其实在iOS上也有这个Keychain的,只不过没有像Mac OSX上面那样的App来管理罢了.<br>所以,我们就可以借用这个Keychain来构造设备的唯一标志.<br>至于iOS底层的库我就不多说了,直接推荐一个三方开源库,<a href=\"https://github.com/soffes/sskeychain\">SSKeychain</a>,大家可以去GitHub下载,也可以使用CocosPods来管理.</p>","more":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>我们主要使用<code>SSKeychain</code>中的几个API.</p>\n<h2 id=\"a-获取密码\"><a href=\"#a-获取密码\" class=\"headerlink\" title=\"a.获取密码\"></a>a.获取密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account;</span><br><span class=\"line\">+ (NSString *)passwordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"b-删除密码\"><a href=\"#b-删除密码\" class=\"headerlink\" title=\"b.删除密码\"></a>b.删除密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account;</span><br><span class=\"line\">+ (BOOL)deletePasswordForService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"c-设置密码\"><a href=\"#c-设置密码\" class=\"headerlink\" title=\"c.设置密码\"></a>c.设置密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account;</span><br><span class=\"line\">+ (BOOL)setPassword:(NSString *)password forService:(NSString *)serviceName account:(NSString *)account error:(NSError **)error;</span><br></pre></td></tr></table></figure>\n\n<p>当然,我们是需要一个唯一标志,所以就需要生成一个UUID,这样就可以用<code>SSKeychain</code>来设置密码为生成的UUID,具体操作如下:</p>\n<h3 id=\"1-创建一个NSString的Category生成UUID\"><a href=\"#1-创建一个NSString的Category生成UUID\" class=\"headerlink\" title=\"1.创建一个NSString的Category生成UUID\"></a>1.创建一个NSString的Category生成UUID</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation NSString (Extension)</span><br><span class=\"line\">+ (NSString *)stringForUUID</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   CFUUIDRef uuidObj    = CFUUIDCreate(nil);</span><br><span class=\"line\">   NSString *uuidString = (NSString *)CFBridgingRelease(CFUUIDCreateString(nil, uuidObj));</span><br><span class=\"line\">   CFRelease(uuidObj);</span><br><span class=\"line\">   return uuidString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建一个HZKeychainManager\"><a href=\"#2-创建一个HZKeychainManager\" class=\"headerlink\" title=\"2.创建一个HZKeychainManager\"></a>2.创建一个HZKeychainManager</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation HZKeychainManager</span><br><span class=\"line\">+ (NSString *)appUUID</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSError *error = nil;</span><br><span class=\"line\">  NSString *uuid = [SSKeychain passwordForService:@&quot;com.company.app.service&quot; account:@&quot;com.company.app.account&quot; error:&amp;error]; // 获取 密码</span><br><span class=\"line\">  if (!uuid.length) &#123; // 如果获取不到 则新保存一个</span><br><span class=\"line\">      uuid = [NSString stringForUUID];</span><br><span class=\"line\">      BOOL res = [SSKeychain setPassword:uuid forService:kDBServiceKey account:kDBAccountKey error:&amp;error];</span><br><span class=\"line\">      if (!res) &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return uuid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>"},{"title":"iOS拨打电话","date":"2014-09-05T13:53:07.000Z","_content":"\niOS拨打电话公开的方法有两种,其他的是调用私有方法,是会被苹果拒绝的.下面记录一下.\n\n第一种方法拨打完之后会停留在拨号盘,不会返回应用。\n\n<!--more-->\n```\n[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@\"tel://123456789\"]];\n\n```\n\n第二种方法拨打玩电话后会返回应用，但是拨打之前会有一个`UIAlertView`提示是否拨打。\n\n\n```\nUIWebView *callWebview =[[UIWebView alloc] init]; // 如果无效,则将callWebView置为成员变量\nNSURL *telURL =[NSURL URLWithString:@\"tel:10086\"];\n[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];\n[self.view addSubview:callWebview];\n```","source":"_posts/iOS拨打电话.markdown","raw":"---\ntitle: \"iOS拨打电话\"\ndate: 2014-09-05 21:53:07 +0800\ntags: \n    - 电话\ncategories:\n    - iOS\n\n---\n\niOS拨打电话公开的方法有两种,其他的是调用私有方法,是会被苹果拒绝的.下面记录一下.\n\n第一种方法拨打完之后会停留在拨号盘,不会返回应用。\n\n<!--more-->\n```\n[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@\"tel://123456789\"]];\n\n```\n\n第二种方法拨打玩电话后会返回应用，但是拨打之前会有一个`UIAlertView`提示是否拨打。\n\n\n```\nUIWebView *callWebview =[[UIWebView alloc] init]; // 如果无效,则将callWebView置为成员变量\nNSURL *telURL =[NSURL URLWithString:@\"tel:10086\"];\n[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];\n[self.view addSubview:callWebview];\n```","slug":"iOS拨打电话","published":1,"updated":"2021-08-27T13:34:42.825Z","_id":"cksu5b15e00348c2054gp1amc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>iOS拨打电话公开的方法有两种,其他的是调用私有方法,是会被苹果拒绝的.下面记录一下.</p>\n<p>第一种方法拨打完之后会停留在拨号盘,不会返回应用。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;tel://123456789&quot;]];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第二种方法拨打玩电话后会返回应用，但是拨打之前会有一个<code>UIAlertView</code>提示是否拨打。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIWebView *callWebview =[[UIWebView alloc] init]; // 如果无效,则将callWebView置为成员变量</span><br><span class=\"line\">NSURL *telURL =[NSURL URLWithString:@&quot;tel:10086&quot;];</span><br><span class=\"line\">[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];</span><br><span class=\"line\">[self.view addSubview:callWebview];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>iOS拨打电话公开的方法有两种,其他的是调用私有方法,是会被苹果拒绝的.下面记录一下.</p>\n<p>第一种方法拨打完之后会停留在拨号盘,不会返回应用。</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;tel://123456789&quot;]];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第二种方法拨打玩电话后会返回应用，但是拨打之前会有一个<code>UIAlertView</code>提示是否拨打。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIWebView *callWebview =[[UIWebView alloc] init]; // 如果无效,则将callWebView置为成员变量</span><br><span class=\"line\">NSURL *telURL =[NSURL URLWithString:@&quot;tel:10086&quot;];</span><br><span class=\"line\">[callWebview loadRequest:[NSURLRequest requestWithURL:telURL]];</span><br><span class=\"line\">[self.view addSubview:callWebview];</span><br></pre></td></tr></table></figure>"},{"title":"iOS拨打电话对话框问题解决","date":"2017-09-28T14:14:20.000Z","_content":"\n`iOS`中拨打电话大家应该都很清楚了，如果还有什么疑问的话可以参考[这篇文章](https://historyzhang.github.io/2014/09/05/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/)。但是`iOS10`的系统会先有个对话框确认，这与并不符合小飞鱼的需求。小飞鱼是由语音控制拨打电话，当用户查找到号码后，只需语音确认一次即可拨打电话，如果有系统的确认对话框，不仅多了一个步骤，而且还需要模拟点击对话框按钮事件，比较繁琐。\n<!--more-->\n由于小飞鱼中，`App`和设备之间是通过`BLE`和传统蓝牙来连接的，而用过蓝牙耳机的都应该知道，可以之间通过蓝牙耳机拨打电话。所以方案就有了：\n![小飞鱼打电话方案](http://upload-images.jianshu.io/upload_images/606479-40f070fe687c0735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如上图，`App`端先通过`BLE`把号码发送给设备，然后设备通过传统蓝牙协议(`PBAP`中`AT Command`)，直接拨号即可，不会弹出确认框。\n\n具体的指令如下：`AT#CW13012341234\\r\\n`；\n整个`PBAP`协议参见[这篇文章](http://file.yizimg.com/440517/2015090120595853.pdf)\n","source":"_posts/iOS拨打电话对话框问题解决.md","raw":"---\ntitle: iOS拨打电话对话框问题解决\ndate: 2017-09-28 22:14:20\ntags: [打电话, 蓝牙, PBAP]\ncategories: [iOS]\n---\n\n`iOS`中拨打电话大家应该都很清楚了，如果还有什么疑问的话可以参考[这篇文章](https://historyzhang.github.io/2014/09/05/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/)。但是`iOS10`的系统会先有个对话框确认，这与并不符合小飞鱼的需求。小飞鱼是由语音控制拨打电话，当用户查找到号码后，只需语音确认一次即可拨打电话，如果有系统的确认对话框，不仅多了一个步骤，而且还需要模拟点击对话框按钮事件，比较繁琐。\n<!--more-->\n由于小飞鱼中，`App`和设备之间是通过`BLE`和传统蓝牙来连接的，而用过蓝牙耳机的都应该知道，可以之间通过蓝牙耳机拨打电话。所以方案就有了：\n![小飞鱼打电话方案](http://upload-images.jianshu.io/upload_images/606479-40f070fe687c0735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如上图，`App`端先通过`BLE`把号码发送给设备，然后设备通过传统蓝牙协议(`PBAP`中`AT Command`)，直接拨号即可，不会弹出确认框。\n\n具体的指令如下：`AT#CW13012341234\\r\\n`；\n整个`PBAP`协议参见[这篇文章](http://file.yizimg.com/440517/2015090120595853.pdf)\n","slug":"iOS拨打电话对话框问题解决","published":1,"updated":"2021-09-05T14:35:11.490Z","_id":"cksu5b15f00378c205a9xag7m","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>iOS</code>中拨打电话大家应该都很清楚了，如果还有什么疑问的话可以参考<a href=\"https://historyzhang.github.io/2014/09/05/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/\">这篇文章</a>。但是<code>iOS10</code>的系统会先有个对话框确认，这与并不符合小飞鱼的需求。小飞鱼是由语音控制拨打电话，当用户查找到号码后，只需语音确认一次即可拨打电话，如果有系统的确认对话框，不仅多了一个步骤，而且还需要模拟点击对话框按钮事件，比较繁琐。</p>\n<span id=\"more\"></span>\n<p>由于小飞鱼中，<code>App</code>和设备之间是通过<code>BLE</code>和传统蓝牙来连接的，而用过蓝牙耳机的都应该知道，可以之间通过蓝牙耳机拨打电话。所以方案就有了：<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-40f070fe687c0735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小飞鱼打电话方案\"><br>如上图，<code>App</code>端先通过<code>BLE</code>把号码发送给设备，然后设备通过传统蓝牙协议(<code>PBAP</code>中<code>AT Command</code>)，直接拨号即可，不会弹出确认框。</p>\n<p>具体的指令如下：<code>AT#CW13012341234\\r\\n</code>；<br>整个<code>PBAP</code>协议参见<a href=\"http://file.yizimg.com/440517/2015090120595853.pdf\">这篇文章</a></p>\n","site":{"data":{}},"excerpt":"<p><code>iOS</code>中拨打电话大家应该都很清楚了，如果还有什么疑问的话可以参考<a href=\"https://historyzhang.github.io/2014/09/05/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D/\">这篇文章</a>。但是<code>iOS10</code>的系统会先有个对话框确认，这与并不符合小飞鱼的需求。小飞鱼是由语音控制拨打电话，当用户查找到号码后，只需语音确认一次即可拨打电话，如果有系统的确认对话框，不仅多了一个步骤，而且还需要模拟点击对话框按钮事件，比较繁琐。</p>","more":"<p>由于小飞鱼中，<code>App</code>和设备之间是通过<code>BLE</code>和传统蓝牙来连接的，而用过蓝牙耳机的都应该知道，可以之间通过蓝牙耳机拨打电话。所以方案就有了：<br><img src=\"http://upload-images.jianshu.io/upload_images/606479-40f070fe687c0735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"小飞鱼打电话方案\"><br>如上图，<code>App</code>端先通过<code>BLE</code>把号码发送给设备，然后设备通过传统蓝牙协议(<code>PBAP</code>中<code>AT Command</code>)，直接拨号即可，不会弹出确认框。</p>\n<p>具体的指令如下：<code>AT#CW13012341234\\r\\n</code>；<br>整个<code>PBAP</code>协议参见<a href=\"http://file.yizimg.com/440517/2015090120595853.pdf\">这篇文章</a></p>"},{"title":"iOS提交AppStore时描述翻译","date":"2014-08-04T12:03:45.000Z","_content":"\n提交AppStore时有很多选项,不过都是英文的.这里收集一下,以备查阅.\n\nAppleContent Descriptions | None | Infrequent/Mild\n:---|:---|:---\n苹果内容描述 | 不存在 | 频繁或强烈的\n<!--more-->\n选项 | 翻译\n:---|:---|:---\nCartoon or Fantasy Violence\t | 卡通或幻想暴力\nRealistic Violence | 现实暴力\nSexual Content or Nudity | 性爱或裸体内容\nProfanity or Crude Humor | 亵渎或低俗笑话\nAlcohol, Tobacco, or Drug Use or References | 研究或毒品相关内容\nMature/Suggestive Themes | 成人或性暗示主题\nSimulated Gambling | 模拟赌博\nHorror/Fear Themes | 恐怖/惊悚题材\nProlonged graphic or sadistic realistic violence | 持久直白或虐待狂现实暴力\nGraphic sexual content and nudity | 直白的色情和裸色内容\n\nps:以上内容转自 *唯高的博客* 中[发布iOS有用到苹果商店时选择应用分级的中文翻译](http://www.qetee.com/tutorial/ios-app-rating.html).\n\n","source":"_posts/iOS提交AppStore时描述翻译.markdown","raw":"---\ntitle: \"iOS提交AppStore时描述翻译\"\ndate: 2014-08-04 20:03:45 +0800\ntags: \n    - 翻译\n    - AppStore\ncategories:\n    - iOS\n\n---\n\n提交AppStore时有很多选项,不过都是英文的.这里收集一下,以备查阅.\n\nAppleContent Descriptions | None | Infrequent/Mild\n:---|:---|:---\n苹果内容描述 | 不存在 | 频繁或强烈的\n<!--more-->\n选项 | 翻译\n:---|:---|:---\nCartoon or Fantasy Violence\t | 卡通或幻想暴力\nRealistic Violence | 现实暴力\nSexual Content or Nudity | 性爱或裸体内容\nProfanity or Crude Humor | 亵渎或低俗笑话\nAlcohol, Tobacco, or Drug Use or References | 研究或毒品相关内容\nMature/Suggestive Themes | 成人或性暗示主题\nSimulated Gambling | 模拟赌博\nHorror/Fear Themes | 恐怖/惊悚题材\nProlonged graphic or sadistic realistic violence | 持久直白或虐待狂现实暴力\nGraphic sexual content and nudity | 直白的色情和裸色内容\n\nps:以上内容转自 *唯高的博客* 中[发布iOS有用到苹果商店时选择应用分级的中文翻译](http://www.qetee.com/tutorial/ios-app-rating.html).\n\n","slug":"iOS提交AppStore时描述翻译","published":1,"updated":"2021-08-27T13:34:42.825Z","_id":"cksu5b15g003b8c203i5dck8c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>提交AppStore时有很多选项,不过都是英文的.这里收集一下,以备查阅.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AppleContent Descriptions</th>\n<th align=\"left\">None</th>\n<th align=\"left\">Infrequent/Mild</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">苹果内容描述</td>\n<td align=\"left\">不存在</td>\n<td align=\"left\">频繁或强烈的</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n<p>选项 | 翻译<br>:—|:—|:—<br>Cartoon or Fantasy Violence     | 卡通或幻想暴力<br>Realistic Violence | 现实暴力<br>Sexual Content or Nudity | 性爱或裸体内容<br>Profanity or Crude Humor | 亵渎或低俗笑话<br>Alcohol, Tobacco, or Drug Use or References | 研究或毒品相关内容<br>Mature/Suggestive Themes | 成人或性暗示主题<br>Simulated Gambling | 模拟赌博<br>Horror/Fear Themes | 恐怖/惊悚题材<br>Prolonged graphic or sadistic realistic violence | 持久直白或虐待狂现实暴力<br>Graphic sexual content and nudity | 直白的色情和裸色内容</p>\n<p>ps:以上内容转自 <em>唯高的博客</em> 中<a href=\"http://www.qetee.com/tutorial/ios-app-rating.html\">发布iOS有用到苹果商店时选择应用分级的中文翻译</a>.</p>\n","site":{"data":{}},"excerpt":"<p>提交AppStore时有很多选项,不过都是英文的.这里收集一下,以备查阅.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">AppleContent Descriptions</th>\n<th align=\"left\">None</th>\n<th align=\"left\">Infrequent/Mild</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">苹果内容描述</td>\n<td align=\"left\">不存在</td>\n<td align=\"left\">频繁或强烈的</td>\n</tr>\n</tbody></table>","more":"<p>选项 | 翻译<br>:—|:—|:—<br>Cartoon or Fantasy Violence     | 卡通或幻想暴力<br>Realistic Violence | 现实暴力<br>Sexual Content or Nudity | 性爱或裸体内容<br>Profanity or Crude Humor | 亵渎或低俗笑话<br>Alcohol, Tobacco, or Drug Use or References | 研究或毒品相关内容<br>Mature/Suggestive Themes | 成人或性暗示主题<br>Simulated Gambling | 模拟赌博<br>Horror/Fear Themes | 恐怖/惊悚题材<br>Prolonged graphic or sadistic realistic violence | 持久直白或虐待狂现实暴力<br>Graphic sexual content and nudity | 直白的色情和裸色内容</p>\n<p>ps:以上内容转自 <em>唯高的博客</em> 中<a href=\"http://www.qetee.com/tutorial/ios-app-rating.html\">发布iOS有用到苹果商店时选择应用分级的中文翻译</a>.</p>"},{"title":"iOS汉字转拼音","date":"2014-12-12T08:58:02.000Z","_content":"汉字转拼音之前有很多人用的都是一个拼音库,`pinyin.h`和`pinyin.m`.用着还算方便吧.\n\n后来发现苹果的`framework`提供了方法.于是在这里记录下来.\n\n<!--more-->\n\n主要是用到这个方法:`CFStringTransform`.具体大家可以去头文件看看.这里就贴出代码了.\n\n\t- (NSString *)spelling\n\t{\n\t    if (self.length) {\n\t        NSMutableString *copy = [self mutableCopy];\n\t        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformMandarinLatin, NO); // 得到带音调的拼音\n\t        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformStripDiacritics, NO); // 过滤掉音调 每个汉字之间会用空格分开\n\t        [copy replaceOccurrencesOfString:@\" \" withString:@\"\" options:NSCaseInsensitiveSearch range:NSMakeRange(0, copy.length)]; // 过滤掉空格\n\t        return copy;\n\t    }\n\t    else {\n\t        return nil;\n\t    }\n\t}\n\t\n偷偷告诉大家一个神奇的事情,就是这个方法可以准确识别出`重庆`和`重量`.其他待测试.","source":"_posts/iOS汉字转拼音.markdown","raw":"---\ntitle: \"iOS汉字转拼音\"\ndate: 2014-12-12 16:58:02 +0800\ntags: \n    - 拼音\ncategories:\n    - iOS\n\n---\n汉字转拼音之前有很多人用的都是一个拼音库,`pinyin.h`和`pinyin.m`.用着还算方便吧.\n\n后来发现苹果的`framework`提供了方法.于是在这里记录下来.\n\n<!--more-->\n\n主要是用到这个方法:`CFStringTransform`.具体大家可以去头文件看看.这里就贴出代码了.\n\n\t- (NSString *)spelling\n\t{\n\t    if (self.length) {\n\t        NSMutableString *copy = [self mutableCopy];\n\t        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformMandarinLatin, NO); // 得到带音调的拼音\n\t        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformStripDiacritics, NO); // 过滤掉音调 每个汉字之间会用空格分开\n\t        [copy replaceOccurrencesOfString:@\" \" withString:@\"\" options:NSCaseInsensitiveSearch range:NSMakeRange(0, copy.length)]; // 过滤掉空格\n\t        return copy;\n\t    }\n\t    else {\n\t        return nil;\n\t    }\n\t}\n\t\n偷偷告诉大家一个神奇的事情,就是这个方法可以准确识别出`重庆`和`重量`.其他待测试.","slug":"iOS汉字转拼音","published":1,"updated":"2021-08-27T13:34:42.825Z","_id":"cksu5b15h003e8c206iph7c0p","comments":1,"layout":"post","photos":[],"link":"","content":"<p>汉字转拼音之前有很多人用的都是一个拼音库,<code>pinyin.h</code>和<code>pinyin.m</code>.用着还算方便吧.</p>\n<p>后来发现苹果的<code>framework</code>提供了方法.于是在这里记录下来.</p>\n<span id=\"more\"></span>\n\n<p>主要是用到这个方法:<code>CFStringTransform</code>.具体大家可以去头文件看看.这里就贴出代码了.</p>\n<pre><code>- (NSString *)spelling\n&#123;\n    if (self.length) &#123;\n        NSMutableString *copy = [self mutableCopy];\n        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformMandarinLatin, NO); // 得到带音调的拼音\n        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformStripDiacritics, NO); // 过滤掉音调 每个汉字之间会用空格分开\n        [copy replaceOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot; options:NSCaseInsensitiveSearch range:NSMakeRange(0, copy.length)]; // 过滤掉空格\n        return copy;\n    &#125;\n    else &#123;\n        return nil;\n    &#125;\n&#125;\n</code></pre>\n<p>偷偷告诉大家一个神奇的事情,就是这个方法可以准确识别出<code>重庆</code>和<code>重量</code>.其他待测试.</p>\n","site":{"data":{}},"excerpt":"<p>汉字转拼音之前有很多人用的都是一个拼音库,<code>pinyin.h</code>和<code>pinyin.m</code>.用着还算方便吧.</p>\n<p>后来发现苹果的<code>framework</code>提供了方法.于是在这里记录下来.</p>","more":"<p>主要是用到这个方法:<code>CFStringTransform</code>.具体大家可以去头文件看看.这里就贴出代码了.</p>\n<pre><code>- (NSString *)spelling\n&#123;\n    if (self.length) &#123;\n        NSMutableString *copy = [self mutableCopy];\n        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformMandarinLatin, NO); // 得到带音调的拼音\n        CFStringTransform((__bridge CFMutableStringRef)copy, NULL, kCFStringTransformStripDiacritics, NO); // 过滤掉音调 每个汉字之间会用空格分开\n        [copy replaceOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot; options:NSCaseInsensitiveSearch range:NSMakeRange(0, copy.length)]; // 过滤掉空格\n        return copy;\n    &#125;\n    else &#123;\n        return nil;\n    &#125;\n&#125;\n</code></pre>\n<p>偷偷告诉大家一个神奇的事情,就是这个方法可以准确识别出<code>重庆</code>和<code>重量</code>.其他待测试.</p>"},{"layout":"post","title":"iOS配置gitignore文件","date":"2014-08-04T14:25:49.000Z","_content":"\niOS开发中如果使用Git来管理源代码,很多文件是不需要上传到服务器的,这时候我们就需要配置`.gitignore`文件.具体做法是:\n\n<!--more-->\n\n```\n# Xcode\n.DS_Store\n*/build/*\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\nprofile\n*.moved-aside\nDerivedData\n.idea/\n*.hmap\n*.orig\n\n# CocoaPods\nPods\n```\n\n<!--more-->\n\n拷贝上述代码到记事本中,然后保存到你的项目根目录下,文件名为`.gitignore`.注意,不要有`.txt`等后缀.该文件是隐藏的,如果需要显示Mac隐藏文件,如下命令即可:\n\n```\ndefaults write com.apple.finder AppleShowAllFiles -bool true\n```\n\n输完单击Enter键，退出终端，重新启动Finder就可以了\n\n重启Finder：按住`option`,鼠标左击`dock`上的`Finder`图标不松,直到出现菜单后点击`重新开启`即可.\n\n\n顺便附上隐藏Mac隐藏文件命令:\n\n```\ndefaults write com.apple.finder AppleShowAllFiles -bool false\n```","source":"_posts/iOS配置gitignore文件.markdown","raw":"---\nlayout: post\ntitle: \"iOS配置gitignore文件\"\ndate: 2014-08-04 22:25:49 +0800\ntags: \n    - Git\ncategories:\n    - iOS\n---\n\niOS开发中如果使用Git来管理源代码,很多文件是不需要上传到服务器的,这时候我们就需要配置`.gitignore`文件.具体做法是:\n\n<!--more-->\n\n```\n# Xcode\n.DS_Store\n*/build/*\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\nprofile\n*.moved-aside\nDerivedData\n.idea/\n*.hmap\n*.orig\n\n# CocoaPods\nPods\n```\n\n<!--more-->\n\n拷贝上述代码到记事本中,然后保存到你的项目根目录下,文件名为`.gitignore`.注意,不要有`.txt`等后缀.该文件是隐藏的,如果需要显示Mac隐藏文件,如下命令即可:\n\n```\ndefaults write com.apple.finder AppleShowAllFiles -bool true\n```\n\n输完单击Enter键，退出终端，重新启动Finder就可以了\n\n重启Finder：按住`option`,鼠标左击`dock`上的`Finder`图标不松,直到出现菜单后点击`重新开启`即可.\n\n\n顺便附上隐藏Mac隐藏文件命令:\n\n```\ndefaults write com.apple.finder AppleShowAllFiles -bool false\n```","slug":"iOS配置gitignore文件","published":1,"updated":"2021-08-27T13:34:42.826Z","_id":"cksu5b15i003i8c203t7c73p1","comments":1,"photos":[],"link":"","content":"<p>iOS开发中如果使用Git来管理源代码,很多文件是不需要上传到服务器的,这时候我们就需要配置<code>.gitignore</code>文件.具体做法是:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Xcode</span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">*/build/*</span><br><span class=\"line\">*.pbxuser</span><br><span class=\"line\">!default.pbxuser</span><br><span class=\"line\">*.mode1v3</span><br><span class=\"line\">!default.mode1v3</span><br><span class=\"line\">*.mode2v3</span><br><span class=\"line\">!default.mode2v3</span><br><span class=\"line\">*.perspectivev3</span><br><span class=\"line\">!default.perspectivev3</span><br><span class=\"line\">xcuserdata</span><br><span class=\"line\">profile</span><br><span class=\"line\">*.moved-aside</span><br><span class=\"line\">DerivedData</span><br><span class=\"line\">.idea/</span><br><span class=\"line\">*.hmap</span><br><span class=\"line\">*.orig</span><br><span class=\"line\"></span><br><span class=\"line\"># CocoaPods</span><br><span class=\"line\">Pods</span><br></pre></td></tr></table></figure>\n\n<!--more-->\n\n<p>拷贝上述代码到记事本中,然后保存到你的项目根目录下,文件名为<code>.gitignore</code>.注意,不要有<code>.txt</code>等后缀.该文件是隐藏的,如果需要显示Mac隐藏文件,如下命令即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br></pre></td></tr></table></figure>\n\n<p>输完单击Enter键，退出终端，重新启动Finder就可以了</p>\n<p>重启Finder：按住<code>option</code>,鼠标左击<code>dock</code>上的<code>Finder</code>图标不松,直到出现菜单后点击<code>重新开启</code>即可.</p>\n<p>顺便附上隐藏Mac隐藏文件命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>iOS开发中如果使用Git来管理源代码,很多文件是不需要上传到服务器的,这时候我们就需要配置<code>.gitignore</code>文件.具体做法是:</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Xcode</span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">*/build/*</span><br><span class=\"line\">*.pbxuser</span><br><span class=\"line\">!default.pbxuser</span><br><span class=\"line\">*.mode1v3</span><br><span class=\"line\">!default.mode1v3</span><br><span class=\"line\">*.mode2v3</span><br><span class=\"line\">!default.mode2v3</span><br><span class=\"line\">*.perspectivev3</span><br><span class=\"line\">!default.perspectivev3</span><br><span class=\"line\">xcuserdata</span><br><span class=\"line\">profile</span><br><span class=\"line\">*.moved-aside</span><br><span class=\"line\">DerivedData</span><br><span class=\"line\">.idea/</span><br><span class=\"line\">*.hmap</span><br><span class=\"line\">*.orig</span><br><span class=\"line\"></span><br><span class=\"line\"># CocoaPods</span><br><span class=\"line\">Pods</span><br></pre></td></tr></table></figure>\n\n<!--more-->\n\n<p>拷贝上述代码到记事本中,然后保存到你的项目根目录下,文件名为<code>.gitignore</code>.注意,不要有<code>.txt</code>等后缀.该文件是隐藏的,如果需要显示Mac隐藏文件,如下命令即可:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br></pre></td></tr></table></figure>\n\n<p>输完单击Enter键，退出终端，重新启动Finder就可以了</p>\n<p>重启Finder：按住<code>option</code>,鼠标左击<code>dock</code>上的<code>Finder</code>图标不松,直到出现菜单后点击<code>重新开启</code>即可.</p>\n<p>顺便附上隐藏Mac隐藏文件命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure>"},{"title":"两个Bug引发的阴谋论","date":"2019-01-30T12:12:47.000Z","_content":"\n{% img /images/blog/两个Bug引发的阴谋论/cover.webp %}\n\n图片来自 泼辣有图 By Dominic\n\n\n# 0x00\n\n先说第一个事情。1月24日上午，微信出现大面积Bug。\n\n10:30开始，有网友表示，微信疑似出现Bug，从其他App分享内容给个人/微信群，均无法正常分享，此外发送图片、文档、登陆网页版微信也短暂出现故障。\n\n<!--more-->\n\n{% img /images/blog/两个Bug引发的阴谋论/image_1.webp %}\n\n微信作为第一社交软件，顿时上了热搜。就连腾讯集团公关总监张军都公开在其朋友圈表示：“微信bug正在紧急修复中，大家稍等，抱歉。”\n\n{% img /images/blog/两个Bug引发的阴谋论/image_2.webp %}\n\n此次宕机大约持续了大约20分钟，影响了公众号、支付、搜索、小程序等功能的正常使用，但据微信方面回应，相关账号信息无影响。在10:50的时候开始陆续恢复社交功能。\n\n随后张军又在其朋友圈调侃了一番：“感觉像是给攻城狮敲了一记醒神棒，哪怕快过年了也别想放松。”\n\n{% img /images/blog/两个Bug引发的阴谋论/image_3.webp %}\n\n从这个事件可以看出三点：\n\n1. 在这个离不开手机的年代，大家也渐渐离不开微信。只是大约20分钟的宕机，在网上就沸沸扬扬，微信真是稳坐社交第一把交椅。\n\n2. 微信团队对Bug的处理速度之快令人咂舌。从问题上报、分析定位、解决、测试、上线，一套流程走下来竟然只有大约20分钟。\n\n3. 此次事件是微信后端服务出了问题，可能是新上线或修改了某个服务导致的，所以客户端并不需要重新更新。\n\n# 0x01\n\n再说第二个事情。1月22日19时，大量抖音新用户反馈，无法使用微信授权方式登录、使用抖音。\n\n抖音团队也是第一时间来定位分析，不过结果并不乐观。可以确定是微信屏蔽了抖音的微信授权。后来有媒体表示，据“微信内部人士”回应：因为抖音获取微信好友信息，涉及泄漏用户隐私，所以屏蔽了抖音。对于这个不想做过多的评价。\n\n# 0x02\n\n头腾之战从未停歇。字节跳动靠今日头条起家，又因抖音大火了一把。而后又开始涉及社交领域，双方之争愈演愈烈。\n\n* 最开始，微信封杀来自抖音分享到朋友圈的视频连接；\n\n* 今年1月15日，微信屏蔽多闪的下载连接；\n\n* 今年1月19日，微信又屏蔽了字节跳动域名（bytedance.com）；\n\n* 1月22日，微信屏蔽抖音的微信登录授权；\n\n腾讯和字节跳动之战已经进入白热化。在这场战争中，我不去评判到底谁对谁错。或许在这商业竞争之中，又岂有对错之分？\n\n# 0x03\n\n事情说完之后，回头再回顾一下两件事情：\n\n1月22日，微信屏蔽抖音的微信授权；\n\n1月24日，微信被爆出史诗级Bug，社交功能宕机。\n\n这其中很是令人回味。\n\n这自然只是我的一番阴谋论，毕竟张军没有公布为什么微信会宕机，只是调侃了攻城狮一番。\n\n\n### 往期精选▼\n\n[1. Flutter初体验](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483824&idx=1&sn=7eb1136636058eef859cec833807f812&chksm=f9a84947cedfc051555c8ec9413cc16faacee32aee183dbb5c9b94c42c7cc8583177dd3b36cd&token=1073312084&lang=zh_CN#rd)\n\n[2. 为什么我觉得Flutter短期内不会流行但依然选择学习它](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=1&sn=b07e91d707efed590e2e324120a7722b&chksm=f9a84956cedfc040a5381b73c4923af25dcb199a51a95008763cf98f6568d7ef576f790ac17a&token=1073312084&lang=zh_CN#rd)\n\n[3. 说两个知识点](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=2&sn=2c01cd74ed6d6695d4477772af67f39a&chksm=f9a84956cedfc04019d5538990a0299f130dfbd09c62dc812f43f60c4b9f73036ebac72ec5ca&token=1073312084&lang=zh_CN#rd)\n\n[4. 在小程序中集成赞赏](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483780&idx=1&sn=643d282c7be6ae095106fca0651695c2&chksm=f9a84973cedfc065814ff0ad2668c49f89cd7340a72447e88116b219f12c3281643842c0a254&token=1073312084&lang=zh_CN#rd)\n\n\n\n\n\n\n\n","source":"_posts/两个Bug引发的阴谋论.md","raw":"---\ntitle: 两个Bug引发的阴谋论\ndate: 2019-01-30 20:12:47\ntags:\n\t- 疯言疯语\ncategories:\n\t- 日记\n\n---\n\n{% img /images/blog/两个Bug引发的阴谋论/cover.webp %}\n\n图片来自 泼辣有图 By Dominic\n\n\n# 0x00\n\n先说第一个事情。1月24日上午，微信出现大面积Bug。\n\n10:30开始，有网友表示，微信疑似出现Bug，从其他App分享内容给个人/微信群，均无法正常分享，此外发送图片、文档、登陆网页版微信也短暂出现故障。\n\n<!--more-->\n\n{% img /images/blog/两个Bug引发的阴谋论/image_1.webp %}\n\n微信作为第一社交软件，顿时上了热搜。就连腾讯集团公关总监张军都公开在其朋友圈表示：“微信bug正在紧急修复中，大家稍等，抱歉。”\n\n{% img /images/blog/两个Bug引发的阴谋论/image_2.webp %}\n\n此次宕机大约持续了大约20分钟，影响了公众号、支付、搜索、小程序等功能的正常使用，但据微信方面回应，相关账号信息无影响。在10:50的时候开始陆续恢复社交功能。\n\n随后张军又在其朋友圈调侃了一番：“感觉像是给攻城狮敲了一记醒神棒，哪怕快过年了也别想放松。”\n\n{% img /images/blog/两个Bug引发的阴谋论/image_3.webp %}\n\n从这个事件可以看出三点：\n\n1. 在这个离不开手机的年代，大家也渐渐离不开微信。只是大约20分钟的宕机，在网上就沸沸扬扬，微信真是稳坐社交第一把交椅。\n\n2. 微信团队对Bug的处理速度之快令人咂舌。从问题上报、分析定位、解决、测试、上线，一套流程走下来竟然只有大约20分钟。\n\n3. 此次事件是微信后端服务出了问题，可能是新上线或修改了某个服务导致的，所以客户端并不需要重新更新。\n\n# 0x01\n\n再说第二个事情。1月22日19时，大量抖音新用户反馈，无法使用微信授权方式登录、使用抖音。\n\n抖音团队也是第一时间来定位分析，不过结果并不乐观。可以确定是微信屏蔽了抖音的微信授权。后来有媒体表示，据“微信内部人士”回应：因为抖音获取微信好友信息，涉及泄漏用户隐私，所以屏蔽了抖音。对于这个不想做过多的评价。\n\n# 0x02\n\n头腾之战从未停歇。字节跳动靠今日头条起家，又因抖音大火了一把。而后又开始涉及社交领域，双方之争愈演愈烈。\n\n* 最开始，微信封杀来自抖音分享到朋友圈的视频连接；\n\n* 今年1月15日，微信屏蔽多闪的下载连接；\n\n* 今年1月19日，微信又屏蔽了字节跳动域名（bytedance.com）；\n\n* 1月22日，微信屏蔽抖音的微信登录授权；\n\n腾讯和字节跳动之战已经进入白热化。在这场战争中，我不去评判到底谁对谁错。或许在这商业竞争之中，又岂有对错之分？\n\n# 0x03\n\n事情说完之后，回头再回顾一下两件事情：\n\n1月22日，微信屏蔽抖音的微信授权；\n\n1月24日，微信被爆出史诗级Bug，社交功能宕机。\n\n这其中很是令人回味。\n\n这自然只是我的一番阴谋论，毕竟张军没有公布为什么微信会宕机，只是调侃了攻城狮一番。\n\n\n### 往期精选▼\n\n[1. Flutter初体验](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483824&idx=1&sn=7eb1136636058eef859cec833807f812&chksm=f9a84947cedfc051555c8ec9413cc16faacee32aee183dbb5c9b94c42c7cc8583177dd3b36cd&token=1073312084&lang=zh_CN#rd)\n\n[2. 为什么我觉得Flutter短期内不会流行但依然选择学习它](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=1&sn=b07e91d707efed590e2e324120a7722b&chksm=f9a84956cedfc040a5381b73c4923af25dcb199a51a95008763cf98f6568d7ef576f790ac17a&token=1073312084&lang=zh_CN#rd)\n\n[3. 说两个知识点](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=2&sn=2c01cd74ed6d6695d4477772af67f39a&chksm=f9a84956cedfc04019d5538990a0299f130dfbd09c62dc812f43f60c4b9f73036ebac72ec5ca&token=1073312084&lang=zh_CN#rd)\n\n[4. 在小程序中集成赞赏](https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483780&idx=1&sn=643d282c7be6ae095106fca0651695c2&chksm=f9a84973cedfc065814ff0ad2668c49f89cd7340a72447e88116b219f12c3281643842c0a254&token=1073312084&lang=zh_CN#rd)\n\n\n\n\n\n\n\n","slug":"两个Bug引发的阴谋论","published":1,"updated":"2021-09-05T14:31:40.331Z","_id":"cksu5b15j003l8c2073t65ahk","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/cover.webp\" class=\"\">\n\n<p>图片来自 泼辣有图 By Dominic</p>\n<h1 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h1><p>先说第一个事情。1月24日上午，微信出现大面积Bug。</p>\n<p>10:30开始，有网友表示，微信疑似出现Bug，从其他App分享内容给个人/微信群，均无法正常分享，此外发送图片、文档、登陆网页版微信也短暂出现故障。</p>\n<span id=\"more\"></span>\n\n<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/image_1.webp\" class=\"\">\n\n<p>微信作为第一社交软件，顿时上了热搜。就连腾讯集团公关总监张军都公开在其朋友圈表示：“微信bug正在紧急修复中，大家稍等，抱歉。”</p>\n<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/image_2.webp\" class=\"\">\n\n<p>此次宕机大约持续了大约20分钟，影响了公众号、支付、搜索、小程序等功能的正常使用，但据微信方面回应，相关账号信息无影响。在10:50的时候开始陆续恢复社交功能。</p>\n<p>随后张军又在其朋友圈调侃了一番：“感觉像是给攻城狮敲了一记醒神棒，哪怕快过年了也别想放松。”</p>\n<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/image_3.webp\" class=\"\">\n\n<p>从这个事件可以看出三点：</p>\n<ol>\n<li><p>在这个离不开手机的年代，大家也渐渐离不开微信。只是大约20分钟的宕机，在网上就沸沸扬扬，微信真是稳坐社交第一把交椅。</p>\n</li>\n<li><p>微信团队对Bug的处理速度之快令人咂舌。从问题上报、分析定位、解决、测试、上线，一套流程走下来竟然只有大约20分钟。</p>\n</li>\n<li><p>此次事件是微信后端服务出了问题，可能是新上线或修改了某个服务导致的，所以客户端并不需要重新更新。</p>\n</li>\n</ol>\n<h1 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h1><p>再说第二个事情。1月22日19时，大量抖音新用户反馈，无法使用微信授权方式登录、使用抖音。</p>\n<p>抖音团队也是第一时间来定位分析，不过结果并不乐观。可以确定是微信屏蔽了抖音的微信授权。后来有媒体表示，据“微信内部人士”回应：因为抖音获取微信好友信息，涉及泄漏用户隐私，所以屏蔽了抖音。对于这个不想做过多的评价。</p>\n<h1 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h1><p>头腾之战从未停歇。字节跳动靠今日头条起家，又因抖音大火了一把。而后又开始涉及社交领域，双方之争愈演愈烈。</p>\n<ul>\n<li><p>最开始，微信封杀来自抖音分享到朋友圈的视频连接；</p>\n</li>\n<li><p>今年1月15日，微信屏蔽多闪的下载连接；</p>\n</li>\n<li><p>今年1月19日，微信又屏蔽了字节跳动域名（bytedance.com）；</p>\n</li>\n<li><p>1月22日，微信屏蔽抖音的微信登录授权；</p>\n</li>\n</ul>\n<p>腾讯和字节跳动之战已经进入白热化。在这场战争中，我不去评判到底谁对谁错。或许在这商业竞争之中，又岂有对错之分？</p>\n<h1 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h1><p>事情说完之后，回头再回顾一下两件事情：</p>\n<p>1月22日，微信屏蔽抖音的微信授权；</p>\n<p>1月24日，微信被爆出史诗级Bug，社交功能宕机。</p>\n<p>这其中很是令人回味。</p>\n<p>这自然只是我的一番阴谋论，毕竟张军没有公布为什么微信会宕机，只是调侃了攻城狮一番。</p>\n<h3 id=\"往期精选▼\"><a href=\"#往期精选▼\" class=\"headerlink\" title=\"往期精选▼\"></a>往期精选▼</h3><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483824&idx=1&sn=7eb1136636058eef859cec833807f812&chksm=f9a84947cedfc051555c8ec9413cc16faacee32aee183dbb5c9b94c42c7cc8583177dd3b36cd&token=1073312084&lang=zh_CN#rd\">1. Flutter初体验</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=1&sn=b07e91d707efed590e2e324120a7722b&chksm=f9a84956cedfc040a5381b73c4923af25dcb199a51a95008763cf98f6568d7ef576f790ac17a&token=1073312084&lang=zh_CN#rd\">2. 为什么我觉得Flutter短期内不会流行但依然选择学习它</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=2&sn=2c01cd74ed6d6695d4477772af67f39a&chksm=f9a84956cedfc04019d5538990a0299f130dfbd09c62dc812f43f60c4b9f73036ebac72ec5ca&token=1073312084&lang=zh_CN#rd\">3. 说两个知识点</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483780&idx=1&sn=643d282c7be6ae095106fca0651695c2&chksm=f9a84973cedfc065814ff0ad2668c49f89cd7340a72447e88116b219f12c3281643842c0a254&token=1073312084&lang=zh_CN#rd\">4. 在小程序中集成赞赏</a></p>\n","site":{"data":{}},"excerpt":"<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/cover.webp\" class=\"\">\n\n<p>图片来自 泼辣有图 By Dominic</p>\n<h1 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h1><p>先说第一个事情。1月24日上午，微信出现大面积Bug。</p>\n<p>10:30开始，有网友表示，微信疑似出现Bug，从其他App分享内容给个人/微信群，均无法正常分享，此外发送图片、文档、登陆网页版微信也短暂出现故障。</p>","more":"<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/image_1.webp\" class=\"\">\n\n<p>微信作为第一社交软件，顿时上了热搜。就连腾讯集团公关总监张军都公开在其朋友圈表示：“微信bug正在紧急修复中，大家稍等，抱歉。”</p>\n<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/image_2.webp\" class=\"\">\n\n<p>此次宕机大约持续了大约20分钟，影响了公众号、支付、搜索、小程序等功能的正常使用，但据微信方面回应，相关账号信息无影响。在10:50的时候开始陆续恢复社交功能。</p>\n<p>随后张军又在其朋友圈调侃了一番：“感觉像是给攻城狮敲了一记醒神棒，哪怕快过年了也别想放松。”</p>\n<img src=\"/images/blog/%E4%B8%A4%E4%B8%AABug%E5%BC%95%E5%8F%91%E7%9A%84%E9%98%B4%E8%B0%8B%E8%AE%BA/image_3.webp\" class=\"\">\n\n<p>从这个事件可以看出三点：</p>\n<ol>\n<li><p>在这个离不开手机的年代，大家也渐渐离不开微信。只是大约20分钟的宕机，在网上就沸沸扬扬，微信真是稳坐社交第一把交椅。</p>\n</li>\n<li><p>微信团队对Bug的处理速度之快令人咂舌。从问题上报、分析定位、解决、测试、上线，一套流程走下来竟然只有大约20分钟。</p>\n</li>\n<li><p>此次事件是微信后端服务出了问题，可能是新上线或修改了某个服务导致的，所以客户端并不需要重新更新。</p>\n</li>\n</ol>\n<h1 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h1><p>再说第二个事情。1月22日19时，大量抖音新用户反馈，无法使用微信授权方式登录、使用抖音。</p>\n<p>抖音团队也是第一时间来定位分析，不过结果并不乐观。可以确定是微信屏蔽了抖音的微信授权。后来有媒体表示，据“微信内部人士”回应：因为抖音获取微信好友信息，涉及泄漏用户隐私，所以屏蔽了抖音。对于这个不想做过多的评价。</p>\n<h1 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h1><p>头腾之战从未停歇。字节跳动靠今日头条起家，又因抖音大火了一把。而后又开始涉及社交领域，双方之争愈演愈烈。</p>\n<ul>\n<li><p>最开始，微信封杀来自抖音分享到朋友圈的视频连接；</p>\n</li>\n<li><p>今年1月15日，微信屏蔽多闪的下载连接；</p>\n</li>\n<li><p>今年1月19日，微信又屏蔽了字节跳动域名（bytedance.com）；</p>\n</li>\n<li><p>1月22日，微信屏蔽抖音的微信登录授权；</p>\n</li>\n</ul>\n<p>腾讯和字节跳动之战已经进入白热化。在这场战争中，我不去评判到底谁对谁错。或许在这商业竞争之中，又岂有对错之分？</p>\n<h1 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h1><p>事情说完之后，回头再回顾一下两件事情：</p>\n<p>1月22日，微信屏蔽抖音的微信授权；</p>\n<p>1月24日，微信被爆出史诗级Bug，社交功能宕机。</p>\n<p>这其中很是令人回味。</p>\n<p>这自然只是我的一番阴谋论，毕竟张军没有公布为什么微信会宕机，只是调侃了攻城狮一番。</p>\n<h3 id=\"往期精选▼\"><a href=\"#往期精选▼\" class=\"headerlink\" title=\"往期精选▼\"></a>往期精选▼</h3><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483824&idx=1&sn=7eb1136636058eef859cec833807f812&chksm=f9a84947cedfc051555c8ec9413cc16faacee32aee183dbb5c9b94c42c7cc8583177dd3b36cd&token=1073312084&lang=zh_CN#rd\">1. Flutter初体验</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=1&sn=b07e91d707efed590e2e324120a7722b&chksm=f9a84956cedfc040a5381b73c4923af25dcb199a51a95008763cf98f6568d7ef576f790ac17a&token=1073312084&lang=zh_CN#rd\">2. 为什么我觉得Flutter短期内不会流行但依然选择学习它</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483809&idx=2&sn=2c01cd74ed6d6695d4477772af67f39a&chksm=f9a84956cedfc04019d5538990a0299f130dfbd09c62dc812f43f60c4b9f73036ebac72ec5ca&token=1073312084&lang=zh_CN#rd\">3. 说两个知识点</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjMzMzk3Ng==&mid=2247483780&idx=1&sn=643d282c7be6ae095106fca0651695c2&chksm=f9a84973cedfc065814ff0ad2668c49f89cd7340a72447e88116b219f12c3281643842c0a254&token=1073312084&lang=zh_CN#rd\">4. 在小程序中集成赞赏</a></p>"},{"title":"从两道面试题说起","date":"2019-01-26T05:58:34.000Z","_content":"\n# `iOS` 中是否存在野指针的情况？\n\n## 野指针\n野指针指向一个已删除的对象或未申请访问受限内存区域的指针。特别要指出的是野指针不是空指针。\n\n## `Block`\n一提到 `Block` 大家肯定都知道要说的是循环引用。在 `ARC` 中，如果两个对象相互持有对方，就会造成循环引用，导致内存无法释放。在 `Block` 中，最常用的场景则是，`self` 持有 `block` ， `block` 中又持有了 `self` 。例如下方一段代码：\n<!--more-->\n```\n@property (nonatmaic, copy) Block dataChanged;\n\n- (void)setUpModel{\n  XYModel *model = [XYModel new];\n  model.dataChanged = ^(NSString *title) {\n      self.titleLabel.text = title;                \n  };\n  self.model = model;\n}\n```\n\n上面的这段代码就会造成循环引用。那我们怎么破除呢？通常的做法都是使用 `weakSelf` 来处理，即：\n\n```\n- (void)setUpModel {\n  XYModel *model = [XYModel new];\n  __weak typeof(self) weakSelf = self;\n  model.dataChanged = ^(NSString *title) {\n      weakSelf.titleLabel.text = title;   \n  };\n  self.model = model;\n}\n```\n\n或许你还看到另外一种不是很一样的版本：\n```\n- (void)setUpModel {\n  XYModel *model = [XYModel new];\n  __weak typeof(self) weakSelf = self;\n  model.dataChanged = ^(NSString *title) {\n      __strong typeof(self) strongSelf = weakSelf;\n      strongSelf.titleLabel.text = title;   \n  };\n  self.model = model;\n}\n```\n对比一下，多了一个 `strongSelf` 。那为什么又要多加一个 `strongSelf` 呢？\n\n考虑一下下面的代码，\n```\n__weak __typeof__(self) weakSelf = self;\ndispatch_group_async(_operationsGroup, _operationsQueue, ^{\n  [weakSelf doSomething];\n  [weakSelf doSomethingElse];\n});\n```\n\n在 `doSomething` 时， `weakSelf` 不会被释放，但是在 `doSomethingElse` 时，`weakSelf` 有可能被释放。\n\n这个时候就遇到了野指针问题，回答了一开始的题目。\n\n在这里就需要用到 `strongSelf` ，使用 `__strong` 确保在 `Block` 内， `strongSelf` 不会被释放。\n\n## 小结\n* 在使用 `Block` 时，如遇到循环引用问题，可以使用 `__weak` 来破除循环引用。\n\n* 如果在 `Block` 内需要多次访问 `__weak` 变量，则需要使用 `__strong` 来保持变量不会被释放。\n\n# `SDWebImage` 中为什么要解码图片\n要说明这么问题我们需要先了解一下在 `iOS` 中，图片显示的流程。\n\n> 概括来说，从磁盘中加载一张图片，并将它显示到屏幕上，中间的主要工作流如下：\n> \n> 假设我们使用 `imageWithContentsOfFile: `方法从磁盘中加载一张图片，这个时候的图片并没有解压缩；\n> \n> 然后将生成的 `UIImage` 赋值给 `UIImageView` ；\n> \n> 接着一个隐式的 `CATransaction` 捕获到了 `UIImageView` 图层树的变化；\n> \n> 在主线程的下一个 `run loop` 到来时，`Core Animation` 提交了这个隐式的 `transaction` ，这个过程可能会对图片进行 `copy`  操作，而受图片是否字节对齐等因素的影响，这个 `copy` 操作可能会涉及以下部分或全部步骤：\n> \n> * 分配内存缓冲区用于管理文件 `IO` 和解压缩操作；\n> * 将文件数据从磁盘读到内存中；\n> * 将压缩的图片数据解码成未压缩的位图形式，这是一个非常耗时的 `CPU` 操作；\n> * 最后 `Core Animation` 使用未压缩的位图数据渲染 `UIImageView` 的图层。\n> \n> 在上面的步骤中，我们提到了图片的解压缩是一个非常耗时的 `CPU` 操作，并且它默认是在主线程中执行的。那么当需要加载的图片比较多时，就会对我们应用的响应性造成严重的影响，尤其是在快速滑动的列表上，这个问题会表现得更加突出。\n\n这里顺便提一下 `imageNamed:` 和 `imageWithContentsOfFile:` 的区别，这两个 `API` 都需要解码，并且工作流程都是一致的。不过`imageNamed:`会做缓存处理，在下一次用到相同的资源时，就会从缓存里面读取。而 `imageWithContentsOfFile:` 则不会。所以网上大多文章都会告诉你，多次使用的小图片使用 `imageNamed:` 加载，一次性使用的大图片使用 `imageWithContentsOfFile:` 加载。\n\n对于上面引用的流程中最后提到，当有大量图片滑动时就会造成主线程的卡顿，原因就是解码图片在主线程中操作的。那有什么办法避免呢？\n我在查询关于这个问题的相关资料时，发现有些博客给出了2种方案：\n\n> 1. 我们不使用`imageNamed:`加载图片，使用其他的方法，比如`imageWithContentsOfFile:`\n> \n> 2. 我们自己解码图片，可以把这个解码过程放到子线程\n\n其实第一种方式没法避免卡顿。这就引出了为什么 `SDWebImage`中需要自己解码图片。\n\n> 在我们使用 `UIImage` 的时候，创建的图片通常不会直接加载到内存，而是在渲染的时候再进行解压并加载到内存。这就会导致 `UIImage` 在渲染的时候效率上不是那么高效。为了提高效率通过 `decodedImageWithImage` 方法把图片提前解压加载到内存，这样这张新图片就不再需要重复解压了，提高了渲染效率。这是一种空间换时间的做法。\n\n\n#### 参考文章：\n1. [到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf\n](http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/) 浮生猎趣\n2. [谈谈 iOS 中图片的解压缩](http://blog.leichunfeng.com/blog/2017/02/20/talking-about-the-decompression-of-the-image-in-ios/#jtss-tsina) 雷纯锋的技术博客\n3. [SDWebImage源码解析（三）——SDWebImage图片解码/压缩模块](https://www.jianshu.com/p/dfa47380fc05) SHY圆圆圈圈圆圆\n","source":"_posts/从两道面试题说起.md","raw":"---\ntitle: 从两道面试题说起\ndate: 2019-01-26 13:58:34\ntags: \n    - iOS\n    - 面试\ncategories:\n    - iOS\n---\n\n# `iOS` 中是否存在野指针的情况？\n\n## 野指针\n野指针指向一个已删除的对象或未申请访问受限内存区域的指针。特别要指出的是野指针不是空指针。\n\n## `Block`\n一提到 `Block` 大家肯定都知道要说的是循环引用。在 `ARC` 中，如果两个对象相互持有对方，就会造成循环引用，导致内存无法释放。在 `Block` 中，最常用的场景则是，`self` 持有 `block` ， `block` 中又持有了 `self` 。例如下方一段代码：\n<!--more-->\n```\n@property (nonatmaic, copy) Block dataChanged;\n\n- (void)setUpModel{\n  XYModel *model = [XYModel new];\n  model.dataChanged = ^(NSString *title) {\n      self.titleLabel.text = title;                \n  };\n  self.model = model;\n}\n```\n\n上面的这段代码就会造成循环引用。那我们怎么破除呢？通常的做法都是使用 `weakSelf` 来处理，即：\n\n```\n- (void)setUpModel {\n  XYModel *model = [XYModel new];\n  __weak typeof(self) weakSelf = self;\n  model.dataChanged = ^(NSString *title) {\n      weakSelf.titleLabel.text = title;   \n  };\n  self.model = model;\n}\n```\n\n或许你还看到另外一种不是很一样的版本：\n```\n- (void)setUpModel {\n  XYModel *model = [XYModel new];\n  __weak typeof(self) weakSelf = self;\n  model.dataChanged = ^(NSString *title) {\n      __strong typeof(self) strongSelf = weakSelf;\n      strongSelf.titleLabel.text = title;   \n  };\n  self.model = model;\n}\n```\n对比一下，多了一个 `strongSelf` 。那为什么又要多加一个 `strongSelf` 呢？\n\n考虑一下下面的代码，\n```\n__weak __typeof__(self) weakSelf = self;\ndispatch_group_async(_operationsGroup, _operationsQueue, ^{\n  [weakSelf doSomething];\n  [weakSelf doSomethingElse];\n});\n```\n\n在 `doSomething` 时， `weakSelf` 不会被释放，但是在 `doSomethingElse` 时，`weakSelf` 有可能被释放。\n\n这个时候就遇到了野指针问题，回答了一开始的题目。\n\n在这里就需要用到 `strongSelf` ，使用 `__strong` 确保在 `Block` 内， `strongSelf` 不会被释放。\n\n## 小结\n* 在使用 `Block` 时，如遇到循环引用问题，可以使用 `__weak` 来破除循环引用。\n\n* 如果在 `Block` 内需要多次访问 `__weak` 变量，则需要使用 `__strong` 来保持变量不会被释放。\n\n# `SDWebImage` 中为什么要解码图片\n要说明这么问题我们需要先了解一下在 `iOS` 中，图片显示的流程。\n\n> 概括来说，从磁盘中加载一张图片，并将它显示到屏幕上，中间的主要工作流如下：\n> \n> 假设我们使用 `imageWithContentsOfFile: `方法从磁盘中加载一张图片，这个时候的图片并没有解压缩；\n> \n> 然后将生成的 `UIImage` 赋值给 `UIImageView` ；\n> \n> 接着一个隐式的 `CATransaction` 捕获到了 `UIImageView` 图层树的变化；\n> \n> 在主线程的下一个 `run loop` 到来时，`Core Animation` 提交了这个隐式的 `transaction` ，这个过程可能会对图片进行 `copy`  操作，而受图片是否字节对齐等因素的影响，这个 `copy` 操作可能会涉及以下部分或全部步骤：\n> \n> * 分配内存缓冲区用于管理文件 `IO` 和解压缩操作；\n> * 将文件数据从磁盘读到内存中；\n> * 将压缩的图片数据解码成未压缩的位图形式，这是一个非常耗时的 `CPU` 操作；\n> * 最后 `Core Animation` 使用未压缩的位图数据渲染 `UIImageView` 的图层。\n> \n> 在上面的步骤中，我们提到了图片的解压缩是一个非常耗时的 `CPU` 操作，并且它默认是在主线程中执行的。那么当需要加载的图片比较多时，就会对我们应用的响应性造成严重的影响，尤其是在快速滑动的列表上，这个问题会表现得更加突出。\n\n这里顺便提一下 `imageNamed:` 和 `imageWithContentsOfFile:` 的区别，这两个 `API` 都需要解码，并且工作流程都是一致的。不过`imageNamed:`会做缓存处理，在下一次用到相同的资源时，就会从缓存里面读取。而 `imageWithContentsOfFile:` 则不会。所以网上大多文章都会告诉你，多次使用的小图片使用 `imageNamed:` 加载，一次性使用的大图片使用 `imageWithContentsOfFile:` 加载。\n\n对于上面引用的流程中最后提到，当有大量图片滑动时就会造成主线程的卡顿，原因就是解码图片在主线程中操作的。那有什么办法避免呢？\n我在查询关于这个问题的相关资料时，发现有些博客给出了2种方案：\n\n> 1. 我们不使用`imageNamed:`加载图片，使用其他的方法，比如`imageWithContentsOfFile:`\n> \n> 2. 我们自己解码图片，可以把这个解码过程放到子线程\n\n其实第一种方式没法避免卡顿。这就引出了为什么 `SDWebImage`中需要自己解码图片。\n\n> 在我们使用 `UIImage` 的时候，创建的图片通常不会直接加载到内存，而是在渲染的时候再进行解压并加载到内存。这就会导致 `UIImage` 在渲染的时候效率上不是那么高效。为了提高效率通过 `decodedImageWithImage` 方法把图片提前解压加载到内存，这样这张新图片就不再需要重复解压了，提高了渲染效率。这是一种空间换时间的做法。\n\n\n#### 参考文章：\n1. [到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf\n](http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/) 浮生猎趣\n2. [谈谈 iOS 中图片的解压缩](http://blog.leichunfeng.com/blog/2017/02/20/talking-about-the-decompression-of-the-image-in-ios/#jtss-tsina) 雷纯锋的技术博客\n3. [SDWebImage源码解析（三）——SDWebImage图片解码/压缩模块](https://www.jianshu.com/p/dfa47380fc05) SHY圆圆圈圈圆圆\n","slug":"从两道面试题说起","published":1,"updated":"2021-08-27T13:34:42.826Z","_id":"cksu5b15k003p8c20gj5w66jo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"iOS-中是否存在野指针的情况？\"><a href=\"#iOS-中是否存在野指针的情况？\" class=\"headerlink\" title=\"iOS 中是否存在野指针的情况？\"></a><code>iOS</code> 中是否存在野指针的情况？</h1><h2 id=\"野指针\"><a href=\"#野指针\" class=\"headerlink\" title=\"野指针\"></a>野指针</h2><p>野指针指向一个已删除的对象或未申请访问受限内存区域的指针。特别要指出的是野指针不是空指针。</p>\n<h2 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a><code>Block</code></h2><p>一提到 <code>Block</code> 大家肯定都知道要说的是循环引用。在 <code>ARC</code> 中，如果两个对象相互持有对方，就会造成循环引用，导致内存无法释放。在 <code>Block</code> 中，最常用的场景则是，<code>self</code> 持有 <code>block</code> ， <code>block</code> 中又持有了 <code>self</code> 。例如下方一段代码：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatmaic, copy) Block dataChanged;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setUpModel&#123;</span><br><span class=\"line\">  XYModel *model = [XYModel new];</span><br><span class=\"line\">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class=\"line\">      self.titleLabel.text = title;                </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  self.model = model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的这段代码就会造成循环引用。那我们怎么破除呢？通常的做法都是使用 <code>weakSelf</code> 来处理，即：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setUpModel &#123;</span><br><span class=\"line\">  XYModel *model = [XYModel new];</span><br><span class=\"line\">  __weak typeof(self) weakSelf = self;</span><br><span class=\"line\">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class=\"line\">      weakSelf.titleLabel.text = title;   </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  self.model = model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或许你还看到另外一种不是很一样的版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setUpModel &#123;</span><br><span class=\"line\">  XYModel *model = [XYModel new];</span><br><span class=\"line\">  __weak typeof(self) weakSelf = self;</span><br><span class=\"line\">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class=\"line\">      __strong typeof(self) strongSelf = weakSelf;</span><br><span class=\"line\">      strongSelf.titleLabel.text = title;   </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  self.model = model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比一下，多了一个 <code>strongSelf</code> 。那为什么又要多加一个 <code>strongSelf</code> 呢？</p>\n<p>考虑一下下面的代码，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak __typeof__(self) weakSelf = self;</span><br><span class=\"line\">dispatch_group_async(_operationsGroup, _operationsQueue, ^&#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">  [weakSelf doSomethingElse];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>doSomething</code> 时， <code>weakSelf</code> 不会被释放，但是在 <code>doSomethingElse</code> 时，<code>weakSelf</code> 有可能被释放。</p>\n<p>这个时候就遇到了野指针问题，回答了一开始的题目。</p>\n<p>在这里就需要用到 <code>strongSelf</code> ，使用 <code>__strong</code> 确保在 <code>Block</code> 内， <code>strongSelf</code> 不会被释放。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在使用 <code>Block</code> 时，如遇到循环引用问题，可以使用 <code>__weak</code> 来破除循环引用。</p>\n</li>\n<li><p>如果在 <code>Block</code> 内需要多次访问 <code>__weak</code> 变量，则需要使用 <code>__strong</code> 来保持变量不会被释放。</p>\n</li>\n</ul>\n<h1 id=\"SDWebImage-中为什么要解码图片\"><a href=\"#SDWebImage-中为什么要解码图片\" class=\"headerlink\" title=\"SDWebImage 中为什么要解码图片\"></a><code>SDWebImage</code> 中为什么要解码图片</h1><p>要说明这么问题我们需要先了解一下在 <code>iOS</code> 中，图片显示的流程。</p>\n<blockquote>\n<p>概括来说，从磁盘中加载一张图片，并将它显示到屏幕上，中间的主要工作流如下：</p>\n<p>假设我们使用 <code>imageWithContentsOfFile: </code>方法从磁盘中加载一张图片，这个时候的图片并没有解压缩；</p>\n<p>然后将生成的 <code>UIImage</code> 赋值给 <code>UIImageView</code> ；</p>\n<p>接着一个隐式的 <code>CATransaction</code> 捕获到了 <code>UIImageView</code> 图层树的变化；</p>\n<p>在主线程的下一个 <code>run loop</code> 到来时，<code>Core Animation</code> 提交了这个隐式的 <code>transaction</code> ，这个过程可能会对图片进行 <code>copy</code>  操作，而受图片是否字节对齐等因素的影响，这个 <code>copy</code> 操作可能会涉及以下部分或全部步骤：</p>\n<ul>\n<li>分配内存缓冲区用于管理文件 <code>IO</code> 和解压缩操作；</li>\n<li>将文件数据从磁盘读到内存中；</li>\n<li>将压缩的图片数据解码成未压缩的位图形式，这是一个非常耗时的 <code>CPU</code> 操作；</li>\n<li>最后 <code>Core Animation</code> 使用未压缩的位图数据渲染 <code>UIImageView</code> 的图层。</li>\n</ul>\n<p>在上面的步骤中，我们提到了图片的解压缩是一个非常耗时的 <code>CPU</code> 操作，并且它默认是在主线程中执行的。那么当需要加载的图片比较多时，就会对我们应用的响应性造成严重的影响，尤其是在快速滑动的列表上，这个问题会表现得更加突出。</p>\n</blockquote>\n<p>这里顺便提一下 <code>imageNamed:</code> 和 <code>imageWithContentsOfFile:</code> 的区别，这两个 <code>API</code> 都需要解码，并且工作流程都是一致的。不过<code>imageNamed:</code>会做缓存处理，在下一次用到相同的资源时，就会从缓存里面读取。而 <code>imageWithContentsOfFile:</code> 则不会。所以网上大多文章都会告诉你，多次使用的小图片使用 <code>imageNamed:</code> 加载，一次性使用的大图片使用 <code>imageWithContentsOfFile:</code> 加载。</p>\n<p>对于上面引用的流程中最后提到，当有大量图片滑动时就会造成主线程的卡顿，原因就是解码图片在主线程中操作的。那有什么办法避免呢？<br>我在查询关于这个问题的相关资料时，发现有些博客给出了2种方案：</p>\n<blockquote>\n<ol>\n<li><p>我们不使用<code>imageNamed:</code>加载图片，使用其他的方法，比如<code>imageWithContentsOfFile:</code></p>\n</li>\n<li><p>我们自己解码图片，可以把这个解码过程放到子线程</p>\n</li>\n</ol>\n</blockquote>\n<p>其实第一种方式没法避免卡顿。这就引出了为什么 <code>SDWebImage</code>中需要自己解码图片。</p>\n<blockquote>\n<p>在我们使用 <code>UIImage</code> 的时候，创建的图片通常不会直接加载到内存，而是在渲染的时候再进行解压并加载到内存。这就会导致 <code>UIImage</code> 在渲染的时候效率上不是那么高效。为了提高效率通过 <code>decodedImageWithImage</code> 方法把图片提前解压加载到内存，这样这张新图片就不再需要重复解压了，提高了渲染效率。这是一种空间换时间的做法。</p>\n</blockquote>\n<h4 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h4><ol>\n<li><a href=\"http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/\">到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf\n</a> 浮生猎趣</li>\n<li><a href=\"http://blog.leichunfeng.com/blog/2017/02/20/talking-about-the-decompression-of-the-image-in-ios/#jtss-tsina\">谈谈 iOS 中图片的解压缩</a> 雷纯锋的技术博客</li>\n<li><a href=\"https://www.jianshu.com/p/dfa47380fc05\">SDWebImage源码解析（三）——SDWebImage图片解码/压缩模块</a> SHY圆圆圈圈圆圆</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"iOS-中是否存在野指针的情况？\"><a href=\"#iOS-中是否存在野指针的情况？\" class=\"headerlink\" title=\"iOS 中是否存在野指针的情况？\"></a><code>iOS</code> 中是否存在野指针的情况？</h1><h2 id=\"野指针\"><a href=\"#野指针\" class=\"headerlink\" title=\"野指针\"></a>野指针</h2><p>野指针指向一个已删除的对象或未申请访问受限内存区域的指针。特别要指出的是野指针不是空指针。</p>\n<h2 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a><code>Block</code></h2><p>一提到 <code>Block</code> 大家肯定都知道要说的是循环引用。在 <code>ARC</code> 中，如果两个对象相互持有对方，就会造成循环引用，导致内存无法释放。在 <code>Block</code> 中，最常用的场景则是，<code>self</code> 持有 <code>block</code> ， <code>block</code> 中又持有了 <code>self</code> 。例如下方一段代码：</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatmaic, copy) Block dataChanged;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setUpModel&#123;</span><br><span class=\"line\">  XYModel *model = [XYModel new];</span><br><span class=\"line\">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class=\"line\">      self.titleLabel.text = title;                </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  self.model = model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的这段代码就会造成循环引用。那我们怎么破除呢？通常的做法都是使用 <code>weakSelf</code> 来处理，即：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setUpModel &#123;</span><br><span class=\"line\">  XYModel *model = [XYModel new];</span><br><span class=\"line\">  __weak typeof(self) weakSelf = self;</span><br><span class=\"line\">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class=\"line\">      weakSelf.titleLabel.text = title;   </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  self.model = model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或许你还看到另外一种不是很一样的版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setUpModel &#123;</span><br><span class=\"line\">  XYModel *model = [XYModel new];</span><br><span class=\"line\">  __weak typeof(self) weakSelf = self;</span><br><span class=\"line\">  model.dataChanged = ^(NSString *title) &#123;</span><br><span class=\"line\">      __strong typeof(self) strongSelf = weakSelf;</span><br><span class=\"line\">      strongSelf.titleLabel.text = title;   </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  self.model = model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比一下，多了一个 <code>strongSelf</code> 。那为什么又要多加一个 <code>strongSelf</code> 呢？</p>\n<p>考虑一下下面的代码，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak __typeof__(self) weakSelf = self;</span><br><span class=\"line\">dispatch_group_async(_operationsGroup, _operationsQueue, ^&#123;</span><br><span class=\"line\">  [weakSelf doSomething];</span><br><span class=\"line\">  [weakSelf doSomethingElse];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>doSomething</code> 时， <code>weakSelf</code> 不会被释放，但是在 <code>doSomethingElse</code> 时，<code>weakSelf</code> 有可能被释放。</p>\n<p>这个时候就遇到了野指针问题，回答了一开始的题目。</p>\n<p>在这里就需要用到 <code>strongSelf</code> ，使用 <code>__strong</code> 确保在 <code>Block</code> 内， <code>strongSelf</code> 不会被释放。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>在使用 <code>Block</code> 时，如遇到循环引用问题，可以使用 <code>__weak</code> 来破除循环引用。</p>\n</li>\n<li><p>如果在 <code>Block</code> 内需要多次访问 <code>__weak</code> 变量，则需要使用 <code>__strong</code> 来保持变量不会被释放。</p>\n</li>\n</ul>\n<h1 id=\"SDWebImage-中为什么要解码图片\"><a href=\"#SDWebImage-中为什么要解码图片\" class=\"headerlink\" title=\"SDWebImage 中为什么要解码图片\"></a><code>SDWebImage</code> 中为什么要解码图片</h1><p>要说明这么问题我们需要先了解一下在 <code>iOS</code> 中，图片显示的流程。</p>\n<blockquote>\n<p>概括来说，从磁盘中加载一张图片，并将它显示到屏幕上，中间的主要工作流如下：</p>\n<p>假设我们使用 <code>imageWithContentsOfFile: </code>方法从磁盘中加载一张图片，这个时候的图片并没有解压缩；</p>\n<p>然后将生成的 <code>UIImage</code> 赋值给 <code>UIImageView</code> ；</p>\n<p>接着一个隐式的 <code>CATransaction</code> 捕获到了 <code>UIImageView</code> 图层树的变化；</p>\n<p>在主线程的下一个 <code>run loop</code> 到来时，<code>Core Animation</code> 提交了这个隐式的 <code>transaction</code> ，这个过程可能会对图片进行 <code>copy</code>  操作，而受图片是否字节对齐等因素的影响，这个 <code>copy</code> 操作可能会涉及以下部分或全部步骤：</p>\n<ul>\n<li>分配内存缓冲区用于管理文件 <code>IO</code> 和解压缩操作；</li>\n<li>将文件数据从磁盘读到内存中；</li>\n<li>将压缩的图片数据解码成未压缩的位图形式，这是一个非常耗时的 <code>CPU</code> 操作；</li>\n<li>最后 <code>Core Animation</code> 使用未压缩的位图数据渲染 <code>UIImageView</code> 的图层。</li>\n</ul>\n<p>在上面的步骤中，我们提到了图片的解压缩是一个非常耗时的 <code>CPU</code> 操作，并且它默认是在主线程中执行的。那么当需要加载的图片比较多时，就会对我们应用的响应性造成严重的影响，尤其是在快速滑动的列表上，这个问题会表现得更加突出。</p>\n</blockquote>\n<p>这里顺便提一下 <code>imageNamed:</code> 和 <code>imageWithContentsOfFile:</code> 的区别，这两个 <code>API</code> 都需要解码，并且工作流程都是一致的。不过<code>imageNamed:</code>会做缓存处理，在下一次用到相同的资源时，就会从缓存里面读取。而 <code>imageWithContentsOfFile:</code> 则不会。所以网上大多文章都会告诉你，多次使用的小图片使用 <code>imageNamed:</code> 加载，一次性使用的大图片使用 <code>imageWithContentsOfFile:</code> 加载。</p>\n<p>对于上面引用的流程中最后提到，当有大量图片滑动时就会造成主线程的卡顿，原因就是解码图片在主线程中操作的。那有什么办法避免呢？<br>我在查询关于这个问题的相关资料时，发现有些博客给出了2种方案：</p>\n<blockquote>\n<ol>\n<li><p>我们不使用<code>imageNamed:</code>加载图片，使用其他的方法，比如<code>imageWithContentsOfFile:</code></p>\n</li>\n<li><p>我们自己解码图片，可以把这个解码过程放到子线程</p>\n</li>\n</ol>\n</blockquote>\n<p>其实第一种方式没法避免卡顿。这就引出了为什么 <code>SDWebImage</code>中需要自己解码图片。</p>\n<blockquote>\n<p>在我们使用 <code>UIImage</code> 的时候，创建的图片通常不会直接加载到内存，而是在渲染的时候再进行解压并加载到内存。这就会导致 <code>UIImage</code> 在渲染的时候效率上不是那么高效。为了提高效率通过 <code>decodedImageWithImage</code> 方法把图片提前解压加载到内存，这样这张新图片就不再需要重复解压了，提高了渲染效率。这是一种空间换时间的做法。</p>\n</blockquote>\n<h4 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h4><ol>\n<li><a href=\"http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/\">到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf\n</a> 浮生猎趣</li>\n<li><a href=\"http://blog.leichunfeng.com/blog/2017/02/20/talking-about-the-decompression-of-the-image-in-ios/#jtss-tsina\">谈谈 iOS 中图片的解压缩</a> 雷纯锋的技术博客</li>\n<li><a href=\"https://www.jianshu.com/p/dfa47380fc05\">SDWebImage源码解析（三）——SDWebImage图片解码/压缩模块</a> SHY圆圆圈圈圆圆</li>\n</ol>"},{"title":"使用LeanCloud快速开发一款小程序","date":"2019-01-26T06:03:04.000Z","_content":"\n# 前言\n\n开发小程序离不开后台数据，对于独立开发者来说，既要写前端，又要写后端，工作量就会骤然增大。微信提供的云开发无疑是给独立开发者提供了很大的便利，但是由于其数据库不支持联表查询，对于某些场景就不是那么的友好了。当然，市面上有很多的`BaaS`服务提供商，大都类似，今天我们就用其中的一个`LeanCloud`来讲解一下，如何快速使用`LeanCloud`来开发一个小程序。\n由于本次重点在`LeanCloud`，所以小程序的开发内容就不是重点。\n\n<!--more-->\n\n# 现在开始\n1. 先去[https://leancloud.cn](https://leancloud.cn)官网注册一个账号，然后登录去控制台创建一个新应用。\n2. 在微信小程序后台中配置域名白名单，具体需要按照[这里](https://leancloud.cn/docs/weapp-domains.html)说明的来配置，你也可以先跳过这一步，等完全开发完毕后再来配置。可在开发者工具的 **详情** > **项目设置** 中勾选**不校验安全域名、TLS 版本以及 HTTPS 证书**。\n3. 下载你熟悉的SDK，目前支持`JS`，`WePY`，`mpvue`，下载链接在[这里](https://leancloud.cn/docs/sdk_setup-js.html#hash649053555)，后面以`JS`来说明，其他方式的`SDK`导入以及使用方法参考文档中的说明。\n4. 初始化`SDK`，在`app.js`中加入以下代码即可。`appId`和`appKey`可以在控制台中的应用找到。\n```\nconst AV = require('./utils/av-live-query-weapp-min');\n\nAV.init({\n  appId: '换成你自己的appId',\n  appKey: '换成你自己的appKey',\n});\n```\n5. 查询数据\n先需要在控制台中的应用下新建一个表，在网页中叫做`Class`。每一张表会默认创建`objectId`、`createdAt`、`updatedAt`、`ACL`四个字段，分别表示`数据索引`，`创建时间`，`更新时间`、`权限`。你可以添加你想要的字段，目前支持以下几种类型。\n![支持类型](https://img-blog.csdnimg.cn/20181224211110711.png)\n\n其中`Object`是`map`对象，`GeoPoint`是经纬度信息，`Pointer`是另外一张表的表名，做多表联合查询使用的。\n假设我们的表名是`T_TODO`，我们可以用以下代码来查询该表下面的数据。\n```\nnew AV.Query('T_TODO')\n      .descending('createdAt') // 排序\n      .limit(10) // 分页数量\n      .skip(10) // 跳过数量\n      .find()\n      .then(function(results) {\n      \t\tthat.setData({todo: results})\n      })\n      .catch(console.error);\n  }\n  ```\n  在你的`WXML`中可以这样写来做数据绑定：\n  ```\n  <!-- pages/todos/todos.wxml -->\n<block wx:for=\"{{todos}}\" wx:for-item=\"todo\" wx:key=\"objectId\">\n  <text data-id=\"{{todo.objectId}}\">\n    {{todo.content}}\n  </text>\n</block>\n```\n是不是很方便。\n\n6. 多表查询\n如果需要多多表查询，先要在一张表中新建一个`Pointer`字段，新建时会让你选择指向的表名，如下图所示：\n![演示](https://img-blog.csdnimg.cn/20181224215910353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n然后在查询是使用`include`，就会返回关联表中的所有信息了，如下所示：\n```\nnew AV.Query('T_TODO')\n      .descending('createdAt') // 排序\n      .limit(10) // 分页数量\n      .skip(10) // 跳过数量\n      .include('T_POINT_CLASS')\n      .find()\n      .then(function(results) {\n      \t\tthat.setData({todo: results})\n      })\n      .catch(console.error);\n  }\n  ```\n7. 更新对象\n小程序中对表中字段做操作后，需要同步更新到服务端，可以使用以下代码来保存对象。\n```\n  // 第一个参数是 className，第二个参数是 objectId\n  var todo = AV.Object.createWithoutData('Todo', '5745557f71cfe40068c6abe0');\n  // 修改属性\n  todo.set('content', '每周工程师会议，本周改为周三下午3点半。');\n  // 保存到云端\n  todo.save();\n  ```\n  8. 其他更多的操作请查看文档，不过你找不到小程序对应的详细开发文档，只能找到[数据存储开发指南 · JavaScript](https://leancloud.cn/docs/leanstorage_guide-js.html#hash810954180)\n  \n# 广告时间\n`三国图鉴`是我业余时间开发的查询三国杀武将技能以及官方活动的小程序，后台服务就是由`LeanCloud`提供的，请大家多多关照。如果有其他问题，你可以关注我的公众号来联系我。\n\n* 扫码体验小程序\n![三国图鉴](https://img-blog.csdnimg.cn/20181224221759234.png)\n","source":"_posts/使用LeanCloud快速开发一款小程序.md","raw":"---\ntitle: 使用LeanCloud快速开发一款小程序\ndate: 2019-01-26 14:03:04\ntags: \n    - 小程序\n    - LeanCloud\ncategories:\n    - 小程序\n---\n\n# 前言\n\n开发小程序离不开后台数据，对于独立开发者来说，既要写前端，又要写后端，工作量就会骤然增大。微信提供的云开发无疑是给独立开发者提供了很大的便利，但是由于其数据库不支持联表查询，对于某些场景就不是那么的友好了。当然，市面上有很多的`BaaS`服务提供商，大都类似，今天我们就用其中的一个`LeanCloud`来讲解一下，如何快速使用`LeanCloud`来开发一个小程序。\n由于本次重点在`LeanCloud`，所以小程序的开发内容就不是重点。\n\n<!--more-->\n\n# 现在开始\n1. 先去[https://leancloud.cn](https://leancloud.cn)官网注册一个账号，然后登录去控制台创建一个新应用。\n2. 在微信小程序后台中配置域名白名单，具体需要按照[这里](https://leancloud.cn/docs/weapp-domains.html)说明的来配置，你也可以先跳过这一步，等完全开发完毕后再来配置。可在开发者工具的 **详情** > **项目设置** 中勾选**不校验安全域名、TLS 版本以及 HTTPS 证书**。\n3. 下载你熟悉的SDK，目前支持`JS`，`WePY`，`mpvue`，下载链接在[这里](https://leancloud.cn/docs/sdk_setup-js.html#hash649053555)，后面以`JS`来说明，其他方式的`SDK`导入以及使用方法参考文档中的说明。\n4. 初始化`SDK`，在`app.js`中加入以下代码即可。`appId`和`appKey`可以在控制台中的应用找到。\n```\nconst AV = require('./utils/av-live-query-weapp-min');\n\nAV.init({\n  appId: '换成你自己的appId',\n  appKey: '换成你自己的appKey',\n});\n```\n5. 查询数据\n先需要在控制台中的应用下新建一个表，在网页中叫做`Class`。每一张表会默认创建`objectId`、`createdAt`、`updatedAt`、`ACL`四个字段，分别表示`数据索引`，`创建时间`，`更新时间`、`权限`。你可以添加你想要的字段，目前支持以下几种类型。\n![支持类型](https://img-blog.csdnimg.cn/20181224211110711.png)\n\n其中`Object`是`map`对象，`GeoPoint`是经纬度信息，`Pointer`是另外一张表的表名，做多表联合查询使用的。\n假设我们的表名是`T_TODO`，我们可以用以下代码来查询该表下面的数据。\n```\nnew AV.Query('T_TODO')\n      .descending('createdAt') // 排序\n      .limit(10) // 分页数量\n      .skip(10) // 跳过数量\n      .find()\n      .then(function(results) {\n      \t\tthat.setData({todo: results})\n      })\n      .catch(console.error);\n  }\n  ```\n  在你的`WXML`中可以这样写来做数据绑定：\n  ```\n  <!-- pages/todos/todos.wxml -->\n<block wx:for=\"{{todos}}\" wx:for-item=\"todo\" wx:key=\"objectId\">\n  <text data-id=\"{{todo.objectId}}\">\n    {{todo.content}}\n  </text>\n</block>\n```\n是不是很方便。\n\n6. 多表查询\n如果需要多多表查询，先要在一张表中新建一个`Pointer`字段，新建时会让你选择指向的表名，如下图所示：\n![演示](https://img-blog.csdnimg.cn/20181224215910353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n然后在查询是使用`include`，就会返回关联表中的所有信息了，如下所示：\n```\nnew AV.Query('T_TODO')\n      .descending('createdAt') // 排序\n      .limit(10) // 分页数量\n      .skip(10) // 跳过数量\n      .include('T_POINT_CLASS')\n      .find()\n      .then(function(results) {\n      \t\tthat.setData({todo: results})\n      })\n      .catch(console.error);\n  }\n  ```\n7. 更新对象\n小程序中对表中字段做操作后，需要同步更新到服务端，可以使用以下代码来保存对象。\n```\n  // 第一个参数是 className，第二个参数是 objectId\n  var todo = AV.Object.createWithoutData('Todo', '5745557f71cfe40068c6abe0');\n  // 修改属性\n  todo.set('content', '每周工程师会议，本周改为周三下午3点半。');\n  // 保存到云端\n  todo.save();\n  ```\n  8. 其他更多的操作请查看文档，不过你找不到小程序对应的详细开发文档，只能找到[数据存储开发指南 · JavaScript](https://leancloud.cn/docs/leanstorage_guide-js.html#hash810954180)\n  \n# 广告时间\n`三国图鉴`是我业余时间开发的查询三国杀武将技能以及官方活动的小程序，后台服务就是由`LeanCloud`提供的，请大家多多关照。如果有其他问题，你可以关注我的公众号来联系我。\n\n* 扫码体验小程序\n![三国图鉴](https://img-blog.csdnimg.cn/20181224221759234.png)\n","slug":"使用LeanCloud快速开发一款小程序","published":1,"updated":"2021-08-27T13:34:42.826Z","_id":"cksu5b15l003s8c204p6k7d0h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>开发小程序离不开后台数据，对于独立开发者来说，既要写前端，又要写后端，工作量就会骤然增大。微信提供的云开发无疑是给独立开发者提供了很大的便利，但是由于其数据库不支持联表查询，对于某些场景就不是那么的友好了。当然，市面上有很多的<code>BaaS</code>服务提供商，大都类似，今天我们就用其中的一个<code>LeanCloud</code>来讲解一下，如何快速使用<code>LeanCloud</code>来开发一个小程序。<br>由于本次重点在<code>LeanCloud</code>，所以小程序的开发内容就不是重点。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"现在开始\"><a href=\"#现在开始\" class=\"headerlink\" title=\"现在开始\"></a>现在开始</h1><ol>\n<li>先去<a href=\"https://leancloud.cn/\">https://leancloud.cn</a>官网注册一个账号，然后登录去控制台创建一个新应用。</li>\n<li>在微信小程序后台中配置域名白名单，具体需要按照<a href=\"https://leancloud.cn/docs/weapp-domains.html\">这里</a>说明的来配置，你也可以先跳过这一步，等完全开发完毕后再来配置。可在开发者工具的 <strong>详情</strong> &gt; <strong>项目设置</strong> 中勾选<strong>不校验安全域名、TLS 版本以及 HTTPS 证书</strong>。</li>\n<li>下载你熟悉的SDK，目前支持<code>JS</code>，<code>WePY</code>，<code>mpvue</code>，下载链接在<a href=\"https://leancloud.cn/docs/sdk_setup-js.html#hash649053555\">这里</a>，后面以<code>JS</code>来说明，其他方式的<code>SDK</code>导入以及使用方法参考文档中的说明。</li>\n<li>初始化<code>SDK</code>，在<code>app.js</code>中加入以下代码即可。<code>appId</code>和<code>appKey</code>可以在控制台中的应用找到。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const AV = require(&#x27;./utils/av-live-query-weapp-min&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">AV.init(&#123;</span><br><span class=\"line\">  appId: &#x27;换成你自己的appId&#x27;,</span><br><span class=\"line\">  appKey: &#x27;换成你自己的appKey&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>查询数据<br>先需要在控制台中的应用下新建一个表，在网页中叫做<code>Class</code>。每一张表会默认创建<code>objectId</code>、<code>createdAt</code>、<code>updatedAt</code>、<code>ACL</code>四个字段，分别表示<code>数据索引</code>，<code>创建时间</code>，<code>更新时间</code>、<code>权限</code>。你可以添加你想要的字段，目前支持以下几种类型。<br><img src=\"https://img-blog.csdnimg.cn/20181224211110711.png\" alt=\"支持类型\"></li>\n</ol>\n<p>其中<code>Object</code>是<code>map</code>对象，<code>GeoPoint</code>是经纬度信息，<code>Pointer</code>是另外一张表的表名，做多表联合查询使用的。<br>假设我们的表名是<code>T_TODO</code>，我们可以用以下代码来查询该表下面的数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new AV.Query(&#x27;T_TODO&#x27;)</span><br><span class=\"line\">      .descending(&#x27;createdAt&#x27;) // 排序</span><br><span class=\"line\">      .limit(10) // 分页数量</span><br><span class=\"line\">      .skip(10) // 跳过数量</span><br><span class=\"line\">      .find()</span><br><span class=\"line\">      .then(function(results) &#123;</span><br><span class=\"line\">      \t\tthat.setData(&#123;todo: results&#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(console.error);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  在你的<code>WXML</code>中可以这样写来做数据绑定：<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- pages/todos/todos.wxml --&gt;</span><br><span class=\"line\">&lt;block wx:for=&quot;&#123;&#123;todos&#125;&#125;&quot; wx:for-item=&quot;todo&quot; wx:key=&quot;objectId&quot;&gt;</span><br><span class=\"line\">  &lt;text data-id=&quot;&#123;&#123;todo.objectId&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;todo.content&#125;&#125;</span><br><span class=\"line\">  &lt;/text&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure><br>是不是很方便。</p>\n<ol start=\"6\">\n<li>多表查询<br>如果需要多多表查询，先要在一张表中新建一个<code>Pointer</code>字段，新建时会让你选择指向的表名，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20181224215910353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"演示\"><br>然后在查询是使用<code>include</code>，就会返回关联表中的所有信息了，如下所示：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new AV.Query(&#x27;T_TODO&#x27;)</span><br><span class=\"line\">      .descending(&#x27;createdAt&#x27;) // 排序</span><br><span class=\"line\">      .limit(10) // 分页数量</span><br><span class=\"line\">      .skip(10) // 跳过数量</span><br><span class=\"line\">      .include(&#x27;T_POINT_CLASS&#x27;)</span><br><span class=\"line\">      .find()</span><br><span class=\"line\">      .then(function(results) &#123;</span><br><span class=\"line\">      \t\tthat.setData(&#123;todo: results&#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(console.error);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>更新对象<br>小程序中对表中字段做操作后，需要同步更新到服务端，可以使用以下代码来保存对象。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一个参数是 className，第二个参数是 objectId</span><br><span class=\"line\">var todo = AV.Object.createWithoutData(&#x27;Todo&#x27;, &#x27;5745557f71cfe40068c6abe0&#x27;);</span><br><span class=\"line\">// 修改属性</span><br><span class=\"line\">todo.set(&#x27;content&#x27;, &#x27;每周工程师会议，本周改为周三下午3点半。&#x27;);</span><br><span class=\"line\">// 保存到云端</span><br><span class=\"line\">todo.save();</span><br></pre></td></tr></table></figure></li>\n<li>其他更多的操作请查看文档，不过你找不到小程序对应的详细开发文档，只能找到<a href=\"https://leancloud.cn/docs/leanstorage_guide-js.html#hash810954180\">数据存储开发指南 · JavaScript</a></li>\n</ol>\n<h1 id=\"广告时间\"><a href=\"#广告时间\" class=\"headerlink\" title=\"广告时间\"></a>广告时间</h1><p><code>三国图鉴</code>是我业余时间开发的查询三国杀武将技能以及官方活动的小程序，后台服务就是由<code>LeanCloud</code>提供的，请大家多多关照。如果有其他问题，你可以关注我的公众号来联系我。</p>\n<ul>\n<li>扫码体验小程序<br><img src=\"https://img-blog.csdnimg.cn/20181224221759234.png\" alt=\"三国图鉴\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>开发小程序离不开后台数据，对于独立开发者来说，既要写前端，又要写后端，工作量就会骤然增大。微信提供的云开发无疑是给独立开发者提供了很大的便利，但是由于其数据库不支持联表查询，对于某些场景就不是那么的友好了。当然，市面上有很多的<code>BaaS</code>服务提供商，大都类似，今天我们就用其中的一个<code>LeanCloud</code>来讲解一下，如何快速使用<code>LeanCloud</code>来开发一个小程序。<br>由于本次重点在<code>LeanCloud</code>，所以小程序的开发内容就不是重点。</p>","more":"<h1 id=\"现在开始\"><a href=\"#现在开始\" class=\"headerlink\" title=\"现在开始\"></a>现在开始</h1><ol>\n<li>先去<a href=\"https://leancloud.cn/\">https://leancloud.cn</a>官网注册一个账号，然后登录去控制台创建一个新应用。</li>\n<li>在微信小程序后台中配置域名白名单，具体需要按照<a href=\"https://leancloud.cn/docs/weapp-domains.html\">这里</a>说明的来配置，你也可以先跳过这一步，等完全开发完毕后再来配置。可在开发者工具的 <strong>详情</strong> &gt; <strong>项目设置</strong> 中勾选<strong>不校验安全域名、TLS 版本以及 HTTPS 证书</strong>。</li>\n<li>下载你熟悉的SDK，目前支持<code>JS</code>，<code>WePY</code>，<code>mpvue</code>，下载链接在<a href=\"https://leancloud.cn/docs/sdk_setup-js.html#hash649053555\">这里</a>，后面以<code>JS</code>来说明，其他方式的<code>SDK</code>导入以及使用方法参考文档中的说明。</li>\n<li>初始化<code>SDK</code>，在<code>app.js</code>中加入以下代码即可。<code>appId</code>和<code>appKey</code>可以在控制台中的应用找到。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const AV = require(&#x27;./utils/av-live-query-weapp-min&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">AV.init(&#123;</span><br><span class=\"line\">  appId: &#x27;换成你自己的appId&#x27;,</span><br><span class=\"line\">  appKey: &#x27;换成你自己的appKey&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>查询数据<br>先需要在控制台中的应用下新建一个表，在网页中叫做<code>Class</code>。每一张表会默认创建<code>objectId</code>、<code>createdAt</code>、<code>updatedAt</code>、<code>ACL</code>四个字段，分别表示<code>数据索引</code>，<code>创建时间</code>，<code>更新时间</code>、<code>权限</code>。你可以添加你想要的字段，目前支持以下几种类型。<br><img src=\"https://img-blog.csdnimg.cn/20181224211110711.png\" alt=\"支持类型\"></li>\n</ol>\n<p>其中<code>Object</code>是<code>map</code>对象，<code>GeoPoint</code>是经纬度信息，<code>Pointer</code>是另外一张表的表名，做多表联合查询使用的。<br>假设我们的表名是<code>T_TODO</code>，我们可以用以下代码来查询该表下面的数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new AV.Query(&#x27;T_TODO&#x27;)</span><br><span class=\"line\">      .descending(&#x27;createdAt&#x27;) // 排序</span><br><span class=\"line\">      .limit(10) // 分页数量</span><br><span class=\"line\">      .skip(10) // 跳过数量</span><br><span class=\"line\">      .find()</span><br><span class=\"line\">      .then(function(results) &#123;</span><br><span class=\"line\">      \t\tthat.setData(&#123;todo: results&#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(console.error);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  在你的<code>WXML</code>中可以这样写来做数据绑定：<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- pages/todos/todos.wxml --&gt;</span><br><span class=\"line\">&lt;block wx:for=&quot;&#123;&#123;todos&#125;&#125;&quot; wx:for-item=&quot;todo&quot; wx:key=&quot;objectId&quot;&gt;</span><br><span class=\"line\">  &lt;text data-id=&quot;&#123;&#123;todo.objectId&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;todo.content&#125;&#125;</span><br><span class=\"line\">  &lt;/text&gt;</span><br><span class=\"line\">&lt;/block&gt;</span><br></pre></td></tr></table></figure><br>是不是很方便。</p>\n<ol start=\"6\">\n<li>多表查询<br>如果需要多多表查询，先要在一张表中新建一个<code>Pointer</code>字段，新建时会让你选择指向的表名，如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20181224215910353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"演示\"><br>然后在查询是使用<code>include</code>，就会返回关联表中的所有信息了，如下所示：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new AV.Query(&#x27;T_TODO&#x27;)</span><br><span class=\"line\">      .descending(&#x27;createdAt&#x27;) // 排序</span><br><span class=\"line\">      .limit(10) // 分页数量</span><br><span class=\"line\">      .skip(10) // 跳过数量</span><br><span class=\"line\">      .include(&#x27;T_POINT_CLASS&#x27;)</span><br><span class=\"line\">      .find()</span><br><span class=\"line\">      .then(function(results) &#123;</span><br><span class=\"line\">      \t\tthat.setData(&#123;todo: results&#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(console.error);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>更新对象<br>小程序中对表中字段做操作后，需要同步更新到服务端，可以使用以下代码来保存对象。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一个参数是 className，第二个参数是 objectId</span><br><span class=\"line\">var todo = AV.Object.createWithoutData(&#x27;Todo&#x27;, &#x27;5745557f71cfe40068c6abe0&#x27;);</span><br><span class=\"line\">// 修改属性</span><br><span class=\"line\">todo.set(&#x27;content&#x27;, &#x27;每周工程师会议，本周改为周三下午3点半。&#x27;);</span><br><span class=\"line\">// 保存到云端</span><br><span class=\"line\">todo.save();</span><br></pre></td></tr></table></figure></li>\n<li>其他更多的操作请查看文档，不过你找不到小程序对应的详细开发文档，只能找到<a href=\"https://leancloud.cn/docs/leanstorage_guide-js.html#hash810954180\">数据存储开发指南 · JavaScript</a></li>\n</ol>\n<h1 id=\"广告时间\"><a href=\"#广告时间\" class=\"headerlink\" title=\"广告时间\"></a>广告时间</h1><p><code>三国图鉴</code>是我业余时间开发的查询三国杀武将技能以及官方活动的小程序，后台服务就是由<code>LeanCloud</code>提供的，请大家多多关照。如果有其他问题，你可以关注我的公众号来联系我。</p>\n<ul>\n<li>扫码体验小程序<br><img src=\"https://img-blog.csdnimg.cn/20181224221759234.png\" alt=\"三国图鉴\"></li>\n</ul>"},{"title":"公众号推荐","date":"2018-02-07T13:44:35.000Z","_content":"\n\n# 阿里技术\n\n#### 公众号介绍\n> 阿里巴巴官方技术号，关于阿里的技术创新均呈现于此。\n\n如官方介绍所说，会推送一些阿里用到的技术。也整理出一系列的 `pdf` 出来给大家。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1bbbd8bdc2?w=430&h=430&f=jpeg&s=39741)\n\n<!--more-->\n\n# 美团点评技术团队\n\n#### 公众号介绍\n> 这里是美团点评强大技术团队的对外窗口，每周腿送一线实践技术文章、技术活动、技术招聘信息。\n\n会覆盖前端、后端、算法等等，也会推送一些技术沙龙活动。该技术团队除了这个公众号另外还维护一个技术博客，[https://tech.meituan.com/](https://tech.meituan.com/)。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1cafd9a5c7?w=430&h=430&f=jpeg&s=39760)\n\n# 淘宝技术\n\n#### 公众号介绍\n> 淘宝技术官方账号。\n\n后端、前端、机器学习，总之淘宝用到的技术，都有机会在这里领略到。\n\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1d52f5ebf6?w=430&h=430&f=jpeg&s=41296)\n\n# WeMobileDev\n\n#### 公众号介绍\n> 微信移动客户端开发团队官号，分享微信在`Android`、`iOS`、`Mac`、`Winphone`、`Windows`等平台的开发经验、前沿技术，以及一些鲜为人知的小故事。\n\n因为`WCDB`关注的该公众号，介绍的皆是微信在开发过程中遇到的问题解决方案，还有开源框架介绍。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1dbf38cf88?w=430&h=430&f=jpeg&s=39414)\n\n# 移动开发前线\n\n#### 公众号介绍\n> 专注于分享移动开发前沿和一线技术。\n\n主要推送一些关于移动端和前端的一些精选文章，两端技术、RN等等。也会推送一些关于移动端的热点文章，`Kotlin`、`Swift`、小程序等等。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e27c3f0a8?w=430&h=430&f=jpeg&s=38830)\n\n# 聊聊架构\n\n#### 公众号介绍\n> 以架构之“道”为基础，呈现更多务实落地的架构内容。\n\n主要推送一些关于架构设计的文章，包括前端后端，文章质量还是蛮高的。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea133efd1e23?w=430&h=430&f=jpeg&s=39973)\n\n# 云栖社区\n\n#### 公众号介绍\n> 云栖社区是由阿里云负责运营、阿里巴巴技术协会和阿里巴巴集团各技术团队提供内容支持的开放式技术社区。\n\n有时候会和几个阿里系的公众号发同样的文章，主要还是会发一些热点知识，人工智能、区块链、服务端架构等待。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e9c536e8d?w=430&h=430&f=jpeg&s=40049)\n\n# InfoQ\n\n#### 公众号介绍\n> 有内容的技术社区媒体。\n\n在这里除了技术干货，还能学到如何定位自身。作为一个技术，你不仅需要掌握技术，还需要扩充横向知识面，为你的人生铺路。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f4de4a960?w=430&h=430&f=jpeg&s=39418)\n\n# stromzhang\n\n#### 公众号介绍\n> 一名不羁的码农，我的世界不只有 `Coding`！\n\n最后推荐的是一个个人运营的公众号，刚开始是以为 `Android` 开发者，写一下关于 `Android` 开发的文章，后来会涉及一些管理的文章。现在已经没有限制了，包括广告，总的来说质量还可以吧。\n\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f9e6e7e17?w=430&h=430&f=jpeg&s=39479)\n","source":"_posts/公众号推荐.md","raw":"---\ntitle: 公众号推荐\ndate: 2018-02-07 21:44:35\ntags: \n    - 公众号\ncategories:\n    - 日记\n---\n\n\n# 阿里技术\n\n#### 公众号介绍\n> 阿里巴巴官方技术号，关于阿里的技术创新均呈现于此。\n\n如官方介绍所说，会推送一些阿里用到的技术。也整理出一系列的 `pdf` 出来给大家。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1bbbd8bdc2?w=430&h=430&f=jpeg&s=39741)\n\n<!--more-->\n\n# 美团点评技术团队\n\n#### 公众号介绍\n> 这里是美团点评强大技术团队的对外窗口，每周腿送一线实践技术文章、技术活动、技术招聘信息。\n\n会覆盖前端、后端、算法等等，也会推送一些技术沙龙活动。该技术团队除了这个公众号另外还维护一个技术博客，[https://tech.meituan.com/](https://tech.meituan.com/)。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1cafd9a5c7?w=430&h=430&f=jpeg&s=39760)\n\n# 淘宝技术\n\n#### 公众号介绍\n> 淘宝技术官方账号。\n\n后端、前端、机器学习，总之淘宝用到的技术，都有机会在这里领略到。\n\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1d52f5ebf6?w=430&h=430&f=jpeg&s=41296)\n\n# WeMobileDev\n\n#### 公众号介绍\n> 微信移动客户端开发团队官号，分享微信在`Android`、`iOS`、`Mac`、`Winphone`、`Windows`等平台的开发经验、前沿技术，以及一些鲜为人知的小故事。\n\n因为`WCDB`关注的该公众号，介绍的皆是微信在开发过程中遇到的问题解决方案，还有开源框架介绍。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1dbf38cf88?w=430&h=430&f=jpeg&s=39414)\n\n# 移动开发前线\n\n#### 公众号介绍\n> 专注于分享移动开发前沿和一线技术。\n\n主要推送一些关于移动端和前端的一些精选文章，两端技术、RN等等。也会推送一些关于移动端的热点文章，`Kotlin`、`Swift`、小程序等等。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e27c3f0a8?w=430&h=430&f=jpeg&s=38830)\n\n# 聊聊架构\n\n#### 公众号介绍\n> 以架构之“道”为基础，呈现更多务实落地的架构内容。\n\n主要推送一些关于架构设计的文章，包括前端后端，文章质量还是蛮高的。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea133efd1e23?w=430&h=430&f=jpeg&s=39973)\n\n# 云栖社区\n\n#### 公众号介绍\n> 云栖社区是由阿里云负责运营、阿里巴巴技术协会和阿里巴巴集团各技术团队提供内容支持的开放式技术社区。\n\n有时候会和几个阿里系的公众号发同样的文章，主要还是会发一些热点知识，人工智能、区块链、服务端架构等待。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e9c536e8d?w=430&h=430&f=jpeg&s=40049)\n\n# InfoQ\n\n#### 公众号介绍\n> 有内容的技术社区媒体。\n\n在这里除了技术干货，还能学到如何定位自身。作为一个技术，你不仅需要掌握技术，还需要扩充横向知识面，为你的人生铺路。\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f4de4a960?w=430&h=430&f=jpeg&s=39418)\n\n# stromzhang\n\n#### 公众号介绍\n> 一名不羁的码农，我的世界不只有 `Coding`！\n\n最后推荐的是一个个人运营的公众号，刚开始是以为 `Android` 开发者，写一下关于 `Android` 开发的文章，后来会涉及一些管理的文章。现在已经没有限制了，包括广告，总的来说质量还可以吧。\n\n![](https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f9e6e7e17?w=430&h=430&f=jpeg&s=39479)\n","slug":"公众号推荐","published":1,"updated":"2021-09-05T14:37:12.941Z","_id":"cksu5b15m003w8c201ehs57c4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"阿里技术\"><a href=\"#阿里技术\" class=\"headerlink\" title=\"阿里技术\"></a>阿里技术</h1><h4 id=\"公众号介绍\"><a href=\"#公众号介绍\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>阿里巴巴官方技术号，关于阿里的技术创新均呈现于此。</p>\n</blockquote>\n<p>如官方介绍所说，会推送一些阿里用到的技术。也整理出一系列的 <code>pdf</code> 出来给大家。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1bbbd8bdc2?w=430&h=430&f=jpeg&s=39741\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"美团点评技术团队\"><a href=\"#美团点评技术团队\" class=\"headerlink\" title=\"美团点评技术团队\"></a>美团点评技术团队</h1><h4 id=\"公众号介绍-1\"><a href=\"#公众号介绍-1\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>这里是美团点评强大技术团队的对外窗口，每周腿送一线实践技术文章、技术活动、技术招聘信息。</p>\n</blockquote>\n<p>会覆盖前端、后端、算法等等，也会推送一些技术沙龙活动。该技术团队除了这个公众号另外还维护一个技术博客，<a href=\"https://tech.meituan.com/\">https://tech.meituan.com/</a>。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1cafd9a5c7?w=430&h=430&f=jpeg&s=39760\"></p>\n<h1 id=\"淘宝技术\"><a href=\"#淘宝技术\" class=\"headerlink\" title=\"淘宝技术\"></a>淘宝技术</h1><h4 id=\"公众号介绍-2\"><a href=\"#公众号介绍-2\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>淘宝技术官方账号。</p>\n</blockquote>\n<p>后端、前端、机器学习，总之淘宝用到的技术，都有机会在这里领略到。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1d52f5ebf6?w=430&h=430&f=jpeg&s=41296\"></p>\n<h1 id=\"WeMobileDev\"><a href=\"#WeMobileDev\" class=\"headerlink\" title=\"WeMobileDev\"></a>WeMobileDev</h1><h4 id=\"公众号介绍-3\"><a href=\"#公众号介绍-3\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>微信移动客户端开发团队官号，分享微信在<code>Android</code>、<code>iOS</code>、<code>Mac</code>、<code>Winphone</code>、<code>Windows</code>等平台的开发经验、前沿技术，以及一些鲜为人知的小故事。</p>\n</blockquote>\n<p>因为<code>WCDB</code>关注的该公众号，介绍的皆是微信在开发过程中遇到的问题解决方案，还有开源框架介绍。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1dbf38cf88?w=430&h=430&f=jpeg&s=39414\"></p>\n<h1 id=\"移动开发前线\"><a href=\"#移动开发前线\" class=\"headerlink\" title=\"移动开发前线\"></a>移动开发前线</h1><h4 id=\"公众号介绍-4\"><a href=\"#公众号介绍-4\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>专注于分享移动开发前沿和一线技术。</p>\n</blockquote>\n<p>主要推送一些关于移动端和前端的一些精选文章，两端技术、RN等等。也会推送一些关于移动端的热点文章，<code>Kotlin</code>、<code>Swift</code>、小程序等等。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e27c3f0a8?w=430&h=430&f=jpeg&s=38830\"></p>\n<h1 id=\"聊聊架构\"><a href=\"#聊聊架构\" class=\"headerlink\" title=\"聊聊架构\"></a>聊聊架构</h1><h4 id=\"公众号介绍-5\"><a href=\"#公众号介绍-5\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>以架构之“道”为基础，呈现更多务实落地的架构内容。</p>\n</blockquote>\n<p>主要推送一些关于架构设计的文章，包括前端后端，文章质量还是蛮高的。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea133efd1e23?w=430&h=430&f=jpeg&s=39973\"></p>\n<h1 id=\"云栖社区\"><a href=\"#云栖社区\" class=\"headerlink\" title=\"云栖社区\"></a>云栖社区</h1><h4 id=\"公众号介绍-6\"><a href=\"#公众号介绍-6\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>云栖社区是由阿里云负责运营、阿里巴巴技术协会和阿里巴巴集团各技术团队提供内容支持的开放式技术社区。</p>\n</blockquote>\n<p>有时候会和几个阿里系的公众号发同样的文章，主要还是会发一些热点知识，人工智能、区块链、服务端架构等待。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e9c536e8d?w=430&h=430&f=jpeg&s=40049\"></p>\n<h1 id=\"InfoQ\"><a href=\"#InfoQ\" class=\"headerlink\" title=\"InfoQ\"></a>InfoQ</h1><h4 id=\"公众号介绍-7\"><a href=\"#公众号介绍-7\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>有内容的技术社区媒体。</p>\n</blockquote>\n<p>在这里除了技术干货，还能学到如何定位自身。作为一个技术，你不仅需要掌握技术，还需要扩充横向知识面，为你的人生铺路。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f4de4a960?w=430&h=430&f=jpeg&s=39418\"></p>\n<h1 id=\"stromzhang\"><a href=\"#stromzhang\" class=\"headerlink\" title=\"stromzhang\"></a>stromzhang</h1><h4 id=\"公众号介绍-8\"><a href=\"#公众号介绍-8\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>一名不羁的码农，我的世界不只有 <code>Coding</code>！</p>\n</blockquote>\n<p>最后推荐的是一个个人运营的公众号，刚开始是以为 <code>Android</code> 开发者，写一下关于 <code>Android</code> 开发的文章，后来会涉及一些管理的文章。现在已经没有限制了，包括广告，总的来说质量还可以吧。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f9e6e7e17?w=430&h=430&f=jpeg&s=39479\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"阿里技术\"><a href=\"#阿里技术\" class=\"headerlink\" title=\"阿里技术\"></a>阿里技术</h1><h4 id=\"公众号介绍\"><a href=\"#公众号介绍\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>阿里巴巴官方技术号，关于阿里的技术创新均呈现于此。</p>\n</blockquote>\n<p>如官方介绍所说，会推送一些阿里用到的技术。也整理出一系列的 <code>pdf</code> 出来给大家。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1bbbd8bdc2?w=430&h=430&f=jpeg&s=39741\"></p>","more":"<h1 id=\"美团点评技术团队\"><a href=\"#美团点评技术团队\" class=\"headerlink\" title=\"美团点评技术团队\"></a>美团点评技术团队</h1><h4 id=\"公众号介绍-1\"><a href=\"#公众号介绍-1\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>这里是美团点评强大技术团队的对外窗口，每周腿送一线实践技术文章、技术活动、技术招聘信息。</p>\n</blockquote>\n<p>会覆盖前端、后端、算法等等，也会推送一些技术沙龙活动。该技术团队除了这个公众号另外还维护一个技术博客，<a href=\"https://tech.meituan.com/\">https://tech.meituan.com/</a>。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1cafd9a5c7?w=430&h=430&f=jpeg&s=39760\"></p>\n<h1 id=\"淘宝技术\"><a href=\"#淘宝技术\" class=\"headerlink\" title=\"淘宝技术\"></a>淘宝技术</h1><h4 id=\"公众号介绍-2\"><a href=\"#公众号介绍-2\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>淘宝技术官方账号。</p>\n</blockquote>\n<p>后端、前端、机器学习，总之淘宝用到的技术，都有机会在这里领略到。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1d52f5ebf6?w=430&h=430&f=jpeg&s=41296\"></p>\n<h1 id=\"WeMobileDev\"><a href=\"#WeMobileDev\" class=\"headerlink\" title=\"WeMobileDev\"></a>WeMobileDev</h1><h4 id=\"公众号介绍-3\"><a href=\"#公众号介绍-3\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>微信移动客户端开发团队官号，分享微信在<code>Android</code>、<code>iOS</code>、<code>Mac</code>、<code>Winphone</code>、<code>Windows</code>等平台的开发经验、前沿技术，以及一些鲜为人知的小故事。</p>\n</blockquote>\n<p>因为<code>WCDB</code>关注的该公众号，介绍的皆是微信在开发过程中遇到的问题解决方案，还有开源框架介绍。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1dbf38cf88?w=430&h=430&f=jpeg&s=39414\"></p>\n<h1 id=\"移动开发前线\"><a href=\"#移动开发前线\" class=\"headerlink\" title=\"移动开发前线\"></a>移动开发前线</h1><h4 id=\"公众号介绍-4\"><a href=\"#公众号介绍-4\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>专注于分享移动开发前沿和一线技术。</p>\n</blockquote>\n<p>主要推送一些关于移动端和前端的一些精选文章，两端技术、RN等等。也会推送一些关于移动端的热点文章，<code>Kotlin</code>、<code>Swift</code>、小程序等等。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e27c3f0a8?w=430&h=430&f=jpeg&s=38830\"></p>\n<h1 id=\"聊聊架构\"><a href=\"#聊聊架构\" class=\"headerlink\" title=\"聊聊架构\"></a>聊聊架构</h1><h4 id=\"公众号介绍-5\"><a href=\"#公众号介绍-5\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>以架构之“道”为基础，呈现更多务实落地的架构内容。</p>\n</blockquote>\n<p>主要推送一些关于架构设计的文章，包括前端后端，文章质量还是蛮高的。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea133efd1e23?w=430&h=430&f=jpeg&s=39973\"></p>\n<h1 id=\"云栖社区\"><a href=\"#云栖社区\" class=\"headerlink\" title=\"云栖社区\"></a>云栖社区</h1><h4 id=\"公众号介绍-6\"><a href=\"#公众号介绍-6\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>云栖社区是由阿里云负责运营、阿里巴巴技术协会和阿里巴巴集团各技术团队提供内容支持的开放式技术社区。</p>\n</blockquote>\n<p>有时候会和几个阿里系的公众号发同样的文章，主要还是会发一些热点知识，人工智能、区块链、服务端架构等待。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1e9c536e8d?w=430&h=430&f=jpeg&s=40049\"></p>\n<h1 id=\"InfoQ\"><a href=\"#InfoQ\" class=\"headerlink\" title=\"InfoQ\"></a>InfoQ</h1><h4 id=\"公众号介绍-7\"><a href=\"#公众号介绍-7\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>有内容的技术社区媒体。</p>\n</blockquote>\n<p>在这里除了技术干货，还能学到如何定位自身。作为一个技术，你不仅需要掌握技术，还需要扩充横向知识面，为你的人生铺路。<br><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f4de4a960?w=430&h=430&f=jpeg&s=39418\"></p>\n<h1 id=\"stromzhang\"><a href=\"#stromzhang\" class=\"headerlink\" title=\"stromzhang\"></a>stromzhang</h1><h4 id=\"公众号介绍-8\"><a href=\"#公众号介绍-8\" class=\"headerlink\" title=\"公众号介绍\"></a>公众号介绍</h4><blockquote>\n<p>一名不羁的码农，我的世界不只有 <code>Coding</code>！</p>\n</blockquote>\n<p>最后推荐的是一个个人运营的公众号，刚开始是以为 <code>Android</code> 开发者，写一下关于 <code>Android</code> 开发的文章，后来会涉及一些管理的文章。现在已经没有限制了，包括广告，总的来说质量还可以吧。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/2/7/1616ea1f9e6e7e17?w=430&h=430&f=jpeg&s=39479\"></p>"},{"title":"利用Xcode修改iPhone定位","date":"2019-01-30T12:28:52.000Z","_content":"\n{% img /images/blog/利用Xcode修改iPhone定位/cover.jpg %}\n\n图片来自 泼辣有图 By sleepyeyes\n\n> 写这个话题，自然让人想到会利用这个技术去做一些不是很明亮的事情~哈哈，这个不在我们今天的讨论之中，我只提供一些技术，如有任何后果，我不承担任何责任~\n\n<!--more-->\n\n# 0x00 准备工具\n\n* 一台装了`Xcode`的`Mac`电脑\n* 一台`iPhone`(无需越狱)\n* 一根数据线\n\n\n# 0x01 坐标选取\n\n手机的定位是利用`GPS`来获取当前位置的经纬度信息的，手机`App`最终都是根据经纬度信息来判断当前位置是否在合理的区域内。所以我们首先需要知道，合理位置的经纬度是多少。\n\n获取经纬度的工具有许多，高德、百度、谷歌都可以，这里我们以[高德](https://lbs.amap.com/console/show/picker)为例，打开网址后，利用关键字搜索到位置的经纬度如下：\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-1.png %}\n\n得到经纬度信息\n\n> 120.026208,30.279212\n\n# 0x02 编写代码\n\n1. 打开`Xcode`，新建一个工程。\n2. 新建一个`gpx`文件，内容如下，并添加到工程。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<gpx version=\"1.1\"\n    creator=\"GMapToGPX 6.4j - http://www.elsewhere.org/GMapToGPX/\"\n    xmlns=\"http://www.topografix.com/GPX/1/1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n    <wpt lat=\"30.279212\" lon=\"120.026208\">\n    </wpt>\n</gpx>\n```\n\n记得把经纬度替换为上一步从高德网页获取到的。\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-2.png %}\n\n# 0x03 配置工程\n1. 在`Xcode`项目中，选择`Edit Scheme...`，然后选择`Run->Options->Core Location`。\n\n2. 选中`Allow Location Simulation`，并在下方的`Defalut Location`中选择刚刚新建的`gps.gpx`文件，如下图。\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-3.png %}\n\n# 0x04 大功告成\n\n连接手机，运行你的程序。由于没有写任何`iOS`相关代码，所以应该是一片白屏。不要在意这个。\n\n不要停止你的程序，直接退到后台，然后打开你的高德地图，你发现你的位置就在阿里巴巴了。\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-4.png %}","source":"_posts/利用Xcode修改iPhone定位.md","raw":"---\ntitle: 利用Xcode修改iPhone定位\ndate: 2019-01-30 20:28:52\ntags:\n\t- 定位\ncategories:\n\t- iOS\n\n---\n\n{% img /images/blog/利用Xcode修改iPhone定位/cover.jpg %}\n\n图片来自 泼辣有图 By sleepyeyes\n\n> 写这个话题，自然让人想到会利用这个技术去做一些不是很明亮的事情~哈哈，这个不在我们今天的讨论之中，我只提供一些技术，如有任何后果，我不承担任何责任~\n\n<!--more-->\n\n# 0x00 准备工具\n\n* 一台装了`Xcode`的`Mac`电脑\n* 一台`iPhone`(无需越狱)\n* 一根数据线\n\n\n# 0x01 坐标选取\n\n手机的定位是利用`GPS`来获取当前位置的经纬度信息的，手机`App`最终都是根据经纬度信息来判断当前位置是否在合理的区域内。所以我们首先需要知道，合理位置的经纬度是多少。\n\n获取经纬度的工具有许多，高德、百度、谷歌都可以，这里我们以[高德](https://lbs.amap.com/console/show/picker)为例，打开网址后，利用关键字搜索到位置的经纬度如下：\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-1.png %}\n\n得到经纬度信息\n\n> 120.026208,30.279212\n\n# 0x02 编写代码\n\n1. 打开`Xcode`，新建一个工程。\n2. 新建一个`gpx`文件，内容如下，并添加到工程。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<gpx version=\"1.1\"\n    creator=\"GMapToGPX 6.4j - http://www.elsewhere.org/GMapToGPX/\"\n    xmlns=\"http://www.topografix.com/GPX/1/1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n    <wpt lat=\"30.279212\" lon=\"120.026208\">\n    </wpt>\n</gpx>\n```\n\n记得把经纬度替换为上一步从高德网页获取到的。\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-2.png %}\n\n# 0x03 配置工程\n1. 在`Xcode`项目中，选择`Edit Scheme...`，然后选择`Run->Options->Core Location`。\n\n2. 选中`Allow Location Simulation`，并在下方的`Defalut Location`中选择刚刚新建的`gps.gpx`文件，如下图。\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-3.png %}\n\n# 0x04 大功告成\n\n连接手机，运行你的程序。由于没有写任何`iOS`相关代码，所以应该是一片白屏。不要在意这个。\n\n不要停止你的程序，直接退到后台，然后打开你的高德地图，你发现你的位置就在阿里巴巴了。\n\n{% img /images/blog/利用Xcode修改iPhone定位/image-4.png %}","slug":"利用Xcode修改iPhone定位","published":1,"updated":"2021-08-27T13:34:42.827Z","_id":"cksu5b15n003z8c20dyggaur8","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/cover.jpg\" class=\"\">\n\n<p>图片来自 泼辣有图 By sleepyeyes</p>\n<blockquote>\n<p>写这个话题，自然让人想到会利用这个技术去做一些不是很明亮的事情<del>哈哈，这个不在我们今天的讨论之中，我只提供一些技术，如有任何后果，我不承担任何责任</del></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"0x00-准备工具\"><a href=\"#0x00-准备工具\" class=\"headerlink\" title=\"0x00 准备工具\"></a>0x00 准备工具</h1><ul>\n<li>一台装了<code>Xcode</code>的<code>Mac</code>电脑</li>\n<li>一台<code>iPhone</code>(无需越狱)</li>\n<li>一根数据线</li>\n</ul>\n<h1 id=\"0x01-坐标选取\"><a href=\"#0x01-坐标选取\" class=\"headerlink\" title=\"0x01 坐标选取\"></a>0x01 坐标选取</h1><p>手机的定位是利用<code>GPS</code>来获取当前位置的经纬度信息的，手机<code>App</code>最终都是根据经纬度信息来判断当前位置是否在合理的区域内。所以我们首先需要知道，合理位置的经纬度是多少。</p>\n<p>获取经纬度的工具有许多，高德、百度、谷歌都可以，这里我们以<a href=\"https://lbs.amap.com/console/show/picker\">高德</a>为例，打开网址后，利用关键字搜索到位置的经纬度如下：</p>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-1.png\" class=\"\">\n\n<p>得到经纬度信息</p>\n<blockquote>\n<p>120.026208,30.279212</p>\n</blockquote>\n<h1 id=\"0x02-编写代码\"><a href=\"#0x02-编写代码\" class=\"headerlink\" title=\"0x02 编写代码\"></a>0x02 编写代码</h1><ol>\n<li>打开<code>Xcode</code>，新建一个工程。</li>\n<li>新建一个<code>gpx</code>文件，内容如下，并添加到工程。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;gpx version=&quot;1.1&quot;</span><br><span class=\"line\">    creator=&quot;GMapToGPX 6.4j - http://www.elsewhere.org/GMapToGPX/&quot;</span><br><span class=\"line\">    xmlns=&quot;http://www.topografix.com/GPX/1/1&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;wpt lat=&quot;30.279212&quot; lon=&quot;120.026208&quot;&gt;</span><br><span class=\"line\">    &lt;/wpt&gt;</span><br><span class=\"line\">&lt;/gpx&gt;</span><br></pre></td></tr></table></figure>\n\n<p>记得把经纬度替换为上一步从高德网页获取到的。</p>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-2.png\" class=\"\">\n\n<h1 id=\"0x03-配置工程\"><a href=\"#0x03-配置工程\" class=\"headerlink\" title=\"0x03 配置工程\"></a>0x03 配置工程</h1><ol>\n<li><p>在<code>Xcode</code>项目中，选择<code>Edit Scheme...</code>，然后选择<code>Run-&gt;Options-&gt;Core Location</code>。</p>\n</li>\n<li><p>选中<code>Allow Location Simulation</code>，并在下方的<code>Defalut Location</code>中选择刚刚新建的<code>gps.gpx</code>文件，如下图。</p>\n</li>\n</ol>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-3.png\" class=\"\">\n\n<h1 id=\"0x04-大功告成\"><a href=\"#0x04-大功告成\" class=\"headerlink\" title=\"0x04 大功告成\"></a>0x04 大功告成</h1><p>连接手机，运行你的程序。由于没有写任何<code>iOS</code>相关代码，所以应该是一片白屏。不要在意这个。</p>\n<p>不要停止你的程序，直接退到后台，然后打开你的高德地图，你发现你的位置就在阿里巴巴了。</p>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-4.png\" class=\"\">","site":{"data":{}},"excerpt":"<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/cover.jpg\" class=\"\">\n\n<p>图片来自 泼辣有图 By sleepyeyes</p>\n<blockquote>\n<p>写这个话题，自然让人想到会利用这个技术去做一些不是很明亮的事情<del>哈哈，这个不在我们今天的讨论之中，我只提供一些技术，如有任何后果，我不承担任何责任</del></p>\n</blockquote>","more":"<h1 id=\"0x00-准备工具\"><a href=\"#0x00-准备工具\" class=\"headerlink\" title=\"0x00 准备工具\"></a>0x00 准备工具</h1><ul>\n<li>一台装了<code>Xcode</code>的<code>Mac</code>电脑</li>\n<li>一台<code>iPhone</code>(无需越狱)</li>\n<li>一根数据线</li>\n</ul>\n<h1 id=\"0x01-坐标选取\"><a href=\"#0x01-坐标选取\" class=\"headerlink\" title=\"0x01 坐标选取\"></a>0x01 坐标选取</h1><p>手机的定位是利用<code>GPS</code>来获取当前位置的经纬度信息的，手机<code>App</code>最终都是根据经纬度信息来判断当前位置是否在合理的区域内。所以我们首先需要知道，合理位置的经纬度是多少。</p>\n<p>获取经纬度的工具有许多，高德、百度、谷歌都可以，这里我们以<a href=\"https://lbs.amap.com/console/show/picker\">高德</a>为例，打开网址后，利用关键字搜索到位置的经纬度如下：</p>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-1.png\" class=\"\">\n\n<p>得到经纬度信息</p>\n<blockquote>\n<p>120.026208,30.279212</p>\n</blockquote>\n<h1 id=\"0x02-编写代码\"><a href=\"#0x02-编写代码\" class=\"headerlink\" title=\"0x02 编写代码\"></a>0x02 编写代码</h1><ol>\n<li>打开<code>Xcode</code>，新建一个工程。</li>\n<li>新建一个<code>gpx</code>文件，内容如下，并添加到工程。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;gpx version=&quot;1.1&quot;</span><br><span class=\"line\">    creator=&quot;GMapToGPX 6.4j - http://www.elsewhere.org/GMapToGPX/&quot;</span><br><span class=\"line\">    xmlns=&quot;http://www.topografix.com/GPX/1/1&quot;</span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">    xsi:schemaLocation=&quot;http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;wpt lat=&quot;30.279212&quot; lon=&quot;120.026208&quot;&gt;</span><br><span class=\"line\">    &lt;/wpt&gt;</span><br><span class=\"line\">&lt;/gpx&gt;</span><br></pre></td></tr></table></figure>\n\n<p>记得把经纬度替换为上一步从高德网页获取到的。</p>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-2.png\" class=\"\">\n\n<h1 id=\"0x03-配置工程\"><a href=\"#0x03-配置工程\" class=\"headerlink\" title=\"0x03 配置工程\"></a>0x03 配置工程</h1><ol>\n<li><p>在<code>Xcode</code>项目中，选择<code>Edit Scheme...</code>，然后选择<code>Run-&gt;Options-&gt;Core Location</code>。</p>\n</li>\n<li><p>选中<code>Allow Location Simulation</code>，并在下方的<code>Defalut Location</code>中选择刚刚新建的<code>gps.gpx</code>文件，如下图。</p>\n</li>\n</ol>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-3.png\" class=\"\">\n\n<h1 id=\"0x04-大功告成\"><a href=\"#0x04-大功告成\" class=\"headerlink\" title=\"0x04 大功告成\"></a>0x04 大功告成</h1><p>连接手机，运行你的程序。由于没有写任何<code>iOS</code>相关代码，所以应该是一片白屏。不要在意这个。</p>\n<p>不要停止你的程序，直接退到后台，然后打开你的高德地图，你发现你的位置就在阿里巴巴了。</p>\n<img src=\"/images/blog/%E5%88%A9%E7%94%A8Xcode%E4%BF%AE%E6%94%B9iPhone%E5%AE%9A%E4%BD%8D/image-4.png\" class=\"\">"},{"title":"博客分页和阅读更多功能","date":"2014-08-06T15:21:01.000Z","_content":"\n博客也写了几篇了,一页显示有点长,于是就着手分页功能.顺便设置一下\"继续阅读\"的功能.\n\n* 分页\n\n找到`source/index.html`文件,找到这段代码:\n\n{% img /images/blog/page_before.png %}\n\n<!--more-->\n修改为:\n\n{% img /images/blog/page_after.png %}\n\n    \n* 继续阅读\n\n打开`_config.yml`文件,找到`excerpt_link`字段,你可以修改为自己想要显示的文字,\"继续阅读\"或者\"Read More\"等.\n注意到`excerpt_separator`这个字段,内容是`<!--more-->`,这个就是告诉你在写文章的时候,在你想要显示为\"继续阅读\"的地方添加上`<!--more-->`即可.","source":"_posts/博客分页和阅读更多功能.markdown","raw":"---\ntitle: \"博客分页和阅读更多功能\"\ndate: 2014-08-06 23:21:01 +0800\ntags: \n    - 博客\ncategories:\n    - 日记\n\n---\n\n博客也写了几篇了,一页显示有点长,于是就着手分页功能.顺便设置一下\"继续阅读\"的功能.\n\n* 分页\n\n找到`source/index.html`文件,找到这段代码:\n\n{% img /images/blog/page_before.png %}\n\n<!--more-->\n修改为:\n\n{% img /images/blog/page_after.png %}\n\n    \n* 继续阅读\n\n打开`_config.yml`文件,找到`excerpt_link`字段,你可以修改为自己想要显示的文字,\"继续阅读\"或者\"Read More\"等.\n注意到`excerpt_separator`这个字段,内容是`<!--more-->`,这个就是告诉你在写文章的时候,在你想要显示为\"继续阅读\"的地方添加上`<!--more-->`即可.","slug":"博客分页和阅读更多功能","published":1,"updated":"2021-09-05T14:37:20.926Z","_id":"cksu5b15n00428c20aeftf81x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>博客也写了几篇了,一页显示有点长,于是就着手分页功能.顺便设置一下”继续阅读”的功能.</p>\n<ul>\n<li>分页</li>\n</ul>\n<p>找到<code>source/index.html</code>文件,找到这段代码:</p>\n<img src=\"/images/blog/page_before.png\" class=\"\">\n\n<span id=\"more\"></span>\n<p>修改为:</p>\n<img src=\"/images/blog/page_after.png\" class=\"\">\n\n<ul>\n<li>继续阅读</li>\n</ul>\n<p>打开<code>_config.yml</code>文件,找到<code>excerpt_link</code>字段,你可以修改为自己想要显示的文字,”继续阅读”或者”Read More”等.<br>注意到<code>excerpt_separator</code>这个字段,内容是<code>&lt;!--more--&gt;</code>,这个就是告诉你在写文章的时候,在你想要显示为”继续阅读”的地方添加上<code>&lt;!--more--&gt;</code>即可.</p>\n","site":{"data":{}},"excerpt":"<p>博客也写了几篇了,一页显示有点长,于是就着手分页功能.顺便设置一下”继续阅读”的功能.</p>\n<ul>\n<li>分页</li>\n</ul>\n<p>找到<code>source/index.html</code>文件,找到这段代码:</p>\n<img src=\"/images/blog/page_before.png\" class=\"\">","more":"<p>修改为:</p>\n<img src=\"/images/blog/page_after.png\" class=\"\">\n\n<ul>\n<li>继续阅读</li>\n</ul>\n<p>打开<code>_config.yml</code>文件,找到<code>excerpt_link</code>字段,你可以修改为自己想要显示的文字,”继续阅读”或者”Read More”等.<br>注意到<code>excerpt_separator</code>这个字段,内容是<code>&lt;!--more--&gt;</code>,这个就是告诉你在写文章的时候,在你想要显示为”继续阅读”的地方添加上<code>&lt;!--more--&gt;</code>即可.</p>"},{"title":"圆形头像","date":"2014-07-29T15:12:01.000Z","_content":"\n看过很多圆形头像的APP了.比如最近QQ又更新了,头像都变成圆形的了.\n其实在iOS实现这个很简单,几句代码即可.下面还是贴出来以便查阅.\n<!--more-->\n```\n[imageView.layer setCornerRadius:CGRectGetHeight(imageView.bounds) / 2];\nimageView.layer.masksToBounds = YES;\n// 下面两句是设置圆周的线条颜色,可以根据实际情况选择\nimageView.layer.borderWidth = 3.f;\nimageView.layer.borderColor = [[UIColor whiteColor] CGColor];\n```\n\n最后上一张图吧.\n\n{% img /images/blog/circle_head.png %}","source":"_posts/圆形头像.markdown","raw":"---\ntitle: \"圆形头像\"\ndate: 2014-07-29 23:12:01 +0800\ntags: \n    - 圆形头像\ncategories:\n    - iOS\n---\n\n看过很多圆形头像的APP了.比如最近QQ又更新了,头像都变成圆形的了.\n其实在iOS实现这个很简单,几句代码即可.下面还是贴出来以便查阅.\n<!--more-->\n```\n[imageView.layer setCornerRadius:CGRectGetHeight(imageView.bounds) / 2];\nimageView.layer.masksToBounds = YES;\n// 下面两句是设置圆周的线条颜色,可以根据实际情况选择\nimageView.layer.borderWidth = 3.f;\nimageView.layer.borderColor = [[UIColor whiteColor] CGColor];\n```\n\n最后上一张图吧.\n\n{% img /images/blog/circle_head.png %}","slug":"圆形头像","published":1,"updated":"2021-08-27T13:34:42.827Z","_id":"cksu5b15o00458c207469elnr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>看过很多圆形头像的APP了.比如最近QQ又更新了,头像都变成圆形的了.<br>其实在iOS实现这个很简单,几句代码即可.下面还是贴出来以便查阅.</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[imageView.layer setCornerRadius:CGRectGetHeight(imageView.bounds) / 2];</span><br><span class=\"line\">imageView.layer.masksToBounds = YES;</span><br><span class=\"line\">// 下面两句是设置圆周的线条颜色,可以根据实际情况选择</span><br><span class=\"line\">imageView.layer.borderWidth = 3.f;</span><br><span class=\"line\">imageView.layer.borderColor = [[UIColor whiteColor] CGColor];</span><br></pre></td></tr></table></figure>\n\n<p>最后上一张图吧.</p>\n<img src=\"/images/blog/circle_head.png\" class=\"\">","site":{"data":{}},"excerpt":"<p>看过很多圆形头像的APP了.比如最近QQ又更新了,头像都变成圆形的了.<br>其实在iOS实现这个很简单,几句代码即可.下面还是贴出来以便查阅.</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[imageView.layer setCornerRadius:CGRectGetHeight(imageView.bounds) / 2];</span><br><span class=\"line\">imageView.layer.masksToBounds = YES;</span><br><span class=\"line\">// 下面两句是设置圆周的线条颜色,可以根据实际情况选择</span><br><span class=\"line\">imageView.layer.borderWidth = 3.f;</span><br><span class=\"line\">imageView.layer.borderColor = [[UIColor whiteColor] CGColor];</span><br></pre></td></tr></table></figure>\n\n<p>最后上一张图吧.</p>\n<img src=\"/images/blog/circle_head.png\" class=\"\">"},{"title":"在小程序中集成赞赏","date":"2019-01-26T06:01:45.000Z","_content":"\n> 阅读本文大概需要3分钟。\n\n好吧，我承认我标题党了，如果你是进来找如何搭建小程序中的支付流程的，请你下车吧~\n\n这篇文章是介绍个人小程序如何集成赞赏功能的，利用微信小程序提供的支付接口必须具有公司资质才可以。或者你也可以集成有赞，不过会抽取一定的手续费。\n\n<!--more-->\n\n言归正传，让我们一步一步来集成赞赏吧，让那些喜欢你的用户也可以打赏你一下。\n\n## 生成一个赞赏码。\n打开微信，点击右上角`加号->收付款->赞赏码`，这里你可以进行一些赞赏设置，然后点击保存赞赏码。这样你就拥有了你专属的赞赏码了。\n\n## 获取一个图片地址\n* 如果你有服务器或者其他的存储空间，你可以把你的赞赏码上传到你的存储空间，然后拿到图片的`htts`地址，后面会用到。\n* 如果你没有，那么还可以利用小程序给我们提供的免费的云开发。下面先来说一下如何将图片上传到云存储中。\n    1. 打开小程序开发工具，找到云开发后点击，如果你没有开通，则会提示你开通，需要在控制台中开通，路径是：`开发->开发者设置->腾讯云`。\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104120313434.png)\n    2. 开通后再点击`云开发`，打开控制台，找到`存储管理->上传文件`,上传上一步你的专属赞赏码图片。上传完成后，就能看到文件了，将`fileid`字段复制下来，后面会用到。\n    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104124836439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n\n## 图片预览\n这一步需要根据实际情况分开来处理了，下面针对上一步说的两种形式一一讲解。\n### 1. 使用其他云存储\n拿到图片的`https`链接后，在你的小程序`wxml`添加一个`打赏`的按钮，然后给按钮添加如下点击事件：\n```\nwx.previewImage({\n     urls: ['https://xxxxx/admire-qrcode.jpg'],\n});\n```\n写到这里相信大家应该就很清楚了，不错，我们就是利用微信的图片预览功能来加载网络图片。当加载出预览大图二维码后，用户就可以长按识别二维码，弹出微信的`识别图中二维码`功能，最终跳转到微信自带的赞赏页面，是不是很赞呢~\n\n### 2. 使用云开发存储\n使用云开发存储的思路是一致的，只不过需要在代码中初始化一些云开发环境。\n* 初始化云开发\n在`app.js`中加入如下代码进行初始化：\n```\nonLaunch: function() {\n    wx.cloud.init({\n      traceUser: true\n    });\n}\n  ```\n* 添加按钮点击事件\n点击事件中传入的`url`就是第二步获取到的`fileid`。\n```\npreviewImage: function() {\n    wx.previewImage({\n        urls: ['cloud://carutil-007.6361-carutil-007/admire-qrcode.jpg'],\n    });\n  },\n  ```\n大功告成，最终效果如下图所示。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104130648991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n\n你可以扫描下方的小程序码来体验该功能，在首页最底部有个打赏按钮~\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104131248871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n\n也可以扫码赞赏~\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104130638423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)","source":"_posts/在小程序中集成赞赏.md","raw":"---\ntitle: 在小程序中集成赞赏\ndate: 2019-01-26 14:01:45\ntags:\n\t- 小程序\n\t- 赞赏\ncategories:\n    - 小程序\n---\n\n> 阅读本文大概需要3分钟。\n\n好吧，我承认我标题党了，如果你是进来找如何搭建小程序中的支付流程的，请你下车吧~\n\n这篇文章是介绍个人小程序如何集成赞赏功能的，利用微信小程序提供的支付接口必须具有公司资质才可以。或者你也可以集成有赞，不过会抽取一定的手续费。\n\n<!--more-->\n\n言归正传，让我们一步一步来集成赞赏吧，让那些喜欢你的用户也可以打赏你一下。\n\n## 生成一个赞赏码。\n打开微信，点击右上角`加号->收付款->赞赏码`，这里你可以进行一些赞赏设置，然后点击保存赞赏码。这样你就拥有了你专属的赞赏码了。\n\n## 获取一个图片地址\n* 如果你有服务器或者其他的存储空间，你可以把你的赞赏码上传到你的存储空间，然后拿到图片的`htts`地址，后面会用到。\n* 如果你没有，那么还可以利用小程序给我们提供的免费的云开发。下面先来说一下如何将图片上传到云存储中。\n    1. 打开小程序开发工具，找到云开发后点击，如果你没有开通，则会提示你开通，需要在控制台中开通，路径是：`开发->开发者设置->腾讯云`。\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104120313434.png)\n    2. 开通后再点击`云开发`，打开控制台，找到`存储管理->上传文件`,上传上一步你的专属赞赏码图片。上传完成后，就能看到文件了，将`fileid`字段复制下来，后面会用到。\n    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104124836439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n\n## 图片预览\n这一步需要根据实际情况分开来处理了，下面针对上一步说的两种形式一一讲解。\n### 1. 使用其他云存储\n拿到图片的`https`链接后，在你的小程序`wxml`添加一个`打赏`的按钮，然后给按钮添加如下点击事件：\n```\nwx.previewImage({\n     urls: ['https://xxxxx/admire-qrcode.jpg'],\n});\n```\n写到这里相信大家应该就很清楚了，不错，我们就是利用微信的图片预览功能来加载网络图片。当加载出预览大图二维码后，用户就可以长按识别二维码，弹出微信的`识别图中二维码`功能，最终跳转到微信自带的赞赏页面，是不是很赞呢~\n\n### 2. 使用云开发存储\n使用云开发存储的思路是一致的，只不过需要在代码中初始化一些云开发环境。\n* 初始化云开发\n在`app.js`中加入如下代码进行初始化：\n```\nonLaunch: function() {\n    wx.cloud.init({\n      traceUser: true\n    });\n}\n  ```\n* 添加按钮点击事件\n点击事件中传入的`url`就是第二步获取到的`fileid`。\n```\npreviewImage: function() {\n    wx.previewImage({\n        urls: ['cloud://carutil-007.6361-carutil-007/admire-qrcode.jpg'],\n    });\n  },\n  ```\n大功告成，最终效果如下图所示。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104130648991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n\n你可以扫描下方的小程序码来体验该功能，在首页最底部有个打赏按钮~\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104131248871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)\n\n也可以扫码赞赏~\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190104130638423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70)","slug":"在小程序中集成赞赏","published":1,"updated":"2021-08-27T13:34:42.827Z","_id":"cksu5b15p00498c204eu5f7wj","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>阅读本文大概需要3分钟。</p>\n</blockquote>\n<p>好吧，我承认我标题党了，如果你是进来找如何搭建小程序中的支付流程的，请你下车吧~</p>\n<p>这篇文章是介绍个人小程序如何集成赞赏功能的，利用微信小程序提供的支付接口必须具有公司资质才可以。或者你也可以集成有赞，不过会抽取一定的手续费。</p>\n<span id=\"more\"></span>\n\n<p>言归正传，让我们一步一步来集成赞赏吧，让那些喜欢你的用户也可以打赏你一下。</p>\n<h2 id=\"生成一个赞赏码。\"><a href=\"#生成一个赞赏码。\" class=\"headerlink\" title=\"生成一个赞赏码。\"></a>生成一个赞赏码。</h2><p>打开微信，点击右上角<code>加号-&gt;收付款-&gt;赞赏码</code>，这里你可以进行一些赞赏设置，然后点击保存赞赏码。这样你就拥有了你专属的赞赏码了。</p>\n<h2 id=\"获取一个图片地址\"><a href=\"#获取一个图片地址\" class=\"headerlink\" title=\"获取一个图片地址\"></a>获取一个图片地址</h2><ul>\n<li>如果你有服务器或者其他的存储空间，你可以把你的赞赏码上传到你的存储空间，然后拿到图片的<code>htts</code>地址，后面会用到。</li>\n<li>如果你没有，那么还可以利用小程序给我们提供的免费的云开发。下面先来说一下如何将图片上传到云存储中。<ol>\n<li>打开小程序开发工具，找到云开发后点击，如果你没有开通，则会提示你开通，需要在控制台中开通，路径是：<code>开发-&gt;开发者设置-&gt;腾讯云</code>。<br><img src=\"https://img-blog.csdnimg.cn/20190104120313434.png\" alt=\"在这里插入图片描述\"></li>\n<li>开通后再点击<code>云开发</code>，打开控制台，找到<code>存储管理-&gt;上传文件</code>,上传上一步你的专属赞赏码图片。上传完成后，就能看到文件了，将<code>fileid</code>字段复制下来，后面会用到。<br><img src=\"https://img-blog.csdnimg.cn/20190104124836439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"图片预览\"><a href=\"#图片预览\" class=\"headerlink\" title=\"图片预览\"></a>图片预览</h2><p>这一步需要根据实际情况分开来处理了，下面针对上一步说的两种形式一一讲解。</p>\n<h3 id=\"1-使用其他云存储\"><a href=\"#1-使用其他云存储\" class=\"headerlink\" title=\"1. 使用其他云存储\"></a>1. 使用其他云存储</h3><p>拿到图片的<code>https</code>链接后，在你的小程序<code>wxml</code>添加一个<code>打赏</code>的按钮，然后给按钮添加如下点击事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.previewImage(&#123;</span><br><span class=\"line\">     urls: [&#x27;https://xxxxx/admire-qrcode.jpg&#x27;],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>写到这里相信大家应该就很清楚了，不错，我们就是利用微信的图片预览功能来加载网络图片。当加载出预览大图二维码后，用户就可以长按识别二维码，弹出微信的<code>识别图中二维码</code>功能，最终跳转到微信自带的赞赏页面，是不是很赞呢~</p>\n<h3 id=\"2-使用云开发存储\"><a href=\"#2-使用云开发存储\" class=\"headerlink\" title=\"2. 使用云开发存储\"></a>2. 使用云开发存储</h3><p>使用云开发存储的思路是一致的，只不过需要在代码中初始化一些云开发环境。</p>\n<ul>\n<li>初始化云开发<br>在<code>app.js</code>中加入如下代码进行初始化：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLaunch: function() &#123;</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      traceUser: true</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>添加按钮点击事件<br>点击事件中传入的<code>url</code>就是第二步获取到的<code>fileid</code>。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">previewImage: function() &#123;</span><br><span class=\"line\">    wx.previewImage(&#123;</span><br><span class=\"line\">        urls: [&#x27;cloud://carutil-007.6361-carutil-007/admire-qrcode.jpg&#x27;],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n大功告成，最终效果如下图所示。<br><img src=\"https://img-blog.csdnimg.cn/20190104130648991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<p>你可以扫描下方的小程序码来体验该功能，在首页最底部有个打赏按钮~<br><img src=\"https://img-blog.csdnimg.cn/20190104131248871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>也可以扫码赞赏~<br><img src=\"https://img-blog.csdnimg.cn/20190104130638423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>阅读本文大概需要3分钟。</p>\n</blockquote>\n<p>好吧，我承认我标题党了，如果你是进来找如何搭建小程序中的支付流程的，请你下车吧~</p>\n<p>这篇文章是介绍个人小程序如何集成赞赏功能的，利用微信小程序提供的支付接口必须具有公司资质才可以。或者你也可以集成有赞，不过会抽取一定的手续费。</p>","more":"<p>言归正传，让我们一步一步来集成赞赏吧，让那些喜欢你的用户也可以打赏你一下。</p>\n<h2 id=\"生成一个赞赏码。\"><a href=\"#生成一个赞赏码。\" class=\"headerlink\" title=\"生成一个赞赏码。\"></a>生成一个赞赏码。</h2><p>打开微信，点击右上角<code>加号-&gt;收付款-&gt;赞赏码</code>，这里你可以进行一些赞赏设置，然后点击保存赞赏码。这样你就拥有了你专属的赞赏码了。</p>\n<h2 id=\"获取一个图片地址\"><a href=\"#获取一个图片地址\" class=\"headerlink\" title=\"获取一个图片地址\"></a>获取一个图片地址</h2><ul>\n<li>如果你有服务器或者其他的存储空间，你可以把你的赞赏码上传到你的存储空间，然后拿到图片的<code>htts</code>地址，后面会用到。</li>\n<li>如果你没有，那么还可以利用小程序给我们提供的免费的云开发。下面先来说一下如何将图片上传到云存储中。<ol>\n<li>打开小程序开发工具，找到云开发后点击，如果你没有开通，则会提示你开通，需要在控制台中开通，路径是：<code>开发-&gt;开发者设置-&gt;腾讯云</code>。<br><img src=\"https://img-blog.csdnimg.cn/20190104120313434.png\" alt=\"在这里插入图片描述\"></li>\n<li>开通后再点击<code>云开发</code>，打开控制台，找到<code>存储管理-&gt;上传文件</code>,上传上一步你的专属赞赏码图片。上传完成后，就能看到文件了，将<code>fileid</code>字段复制下来，后面会用到。<br><img src=\"https://img-blog.csdnimg.cn/20190104124836439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"图片预览\"><a href=\"#图片预览\" class=\"headerlink\" title=\"图片预览\"></a>图片预览</h2><p>这一步需要根据实际情况分开来处理了，下面针对上一步说的两种形式一一讲解。</p>\n<h3 id=\"1-使用其他云存储\"><a href=\"#1-使用其他云存储\" class=\"headerlink\" title=\"1. 使用其他云存储\"></a>1. 使用其他云存储</h3><p>拿到图片的<code>https</code>链接后，在你的小程序<code>wxml</code>添加一个<code>打赏</code>的按钮，然后给按钮添加如下点击事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.previewImage(&#123;</span><br><span class=\"line\">     urls: [&#x27;https://xxxxx/admire-qrcode.jpg&#x27;],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>写到这里相信大家应该就很清楚了，不错，我们就是利用微信的图片预览功能来加载网络图片。当加载出预览大图二维码后，用户就可以长按识别二维码，弹出微信的<code>识别图中二维码</code>功能，最终跳转到微信自带的赞赏页面，是不是很赞呢~</p>\n<h3 id=\"2-使用云开发存储\"><a href=\"#2-使用云开发存储\" class=\"headerlink\" title=\"2. 使用云开发存储\"></a>2. 使用云开发存储</h3><p>使用云开发存储的思路是一致的，只不过需要在代码中初始化一些云开发环境。</p>\n<ul>\n<li>初始化云开发<br>在<code>app.js</code>中加入如下代码进行初始化：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLaunch: function() &#123;</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      traceUser: true</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>添加按钮点击事件<br>点击事件中传入的<code>url</code>就是第二步获取到的<code>fileid</code>。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">previewImage: function() &#123;</span><br><span class=\"line\">    wx.previewImage(&#123;</span><br><span class=\"line\">        urls: [&#x27;cloud://carutil-007.6361-carutil-007/admire-qrcode.jpg&#x27;],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n大功告成，最终效果如下图所示。<br><img src=\"https://img-blog.csdnimg.cn/20190104130648991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<p>你可以扫描下方的小程序码来体验该功能，在首页最底部有个打赏按钮~<br><img src=\"https://img-blog.csdnimg.cn/20190104131248871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>也可以扫码赞赏~<br><img src=\"https://img-blog.csdnimg.cn/20190104130638423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pxMjgyNTAyNTMy,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>"},{"title":"安利一个颜值最高的GitHub小程序","date":"2019-09-21T12:22:33.000Z","keywords":null,"description":null,"_content":"\n{% img /images/blog/安利一个颜值最高的GitHub小程序/cover.jpg %}\n\n> 图片来自 泼辣有图\n\n<!--more-->\n\n作为一个码农，平时少不了要逛一逛`GitHub`（一个号称全球最大的同性交友网站）。\n\n作为一个代码托管网站，他早已经超出了他的职责。\n\n我们可以找到一些需要用到的开源库；\n\n我们可以看到一些组织/个人的技术分享文章；\n\n我们可以找到一些有趣的收集资料；\n\n...\n\n但是，在这个移动设备如此受欢迎的今天，`GitHub`竟然没有推出`App`，就算是码农，也不能整天都带着电脑啊。\n\n好在`GitHub`提供了`Open API`供大家使用，让程序猿们自己解决。今天就给大家安利一个`颜值最高的GitHub小程序\t———— Gitter`。\n\n该小程序已经支持以下功能：\n\n1. 实时查看`Trending`\n2. 显示用户列表\n3. 仓库和用户的搜索\n4. 仓库：详情展示、`README.md`展示、`Star/Unstar`、`Fork`、`Contributors`展示、查看仓库文件内容\n5. 开发者：`Follow/Unfollow`、显示用户的`followers/following`\n6. `Issue`：查看`issue`列表、新增`issue`、新增`issue`评论\n7. 分享仓库、开发者\n8. ...\n\n不过由于微信小程序的限制，无法做`OAuth`认证，所以想要登录自己的账户稍微有点复杂：\n\n1. 跳转获取`Token`链接：[https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)，并使用个人账户密码登录\n2. 填写一个标签，勾选自己想要授权的功能清单后并授权，就可以获得一个`Token`\n3. 复制`Token`并填写到小程序中，即可登录个人账户\n\n作者本着开源的精神，将整个项目源码同时放在了`GitHub`中，供大家学习讨论。整个项目采用 `Taro` 框架 + `Taro UI` 进行开发，小程序内数据均来自于 `GitHub Api v3`。并写了一篇文章来记录该小程序的开发过程：[Gitter - 高颜值GitHub小程序客户端诞生记](https://juejin.im/post/5c4c738ce51d4525211c129b)，真的是可玩、可学。\n\n说了这么多，赶紧放几张颜值照片上来：\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-1.png %}\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-2.png %}\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-3.png %}\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-4.png %}\n\n是不是很清爽呢？那就长按识别一下下方的小程序码赶紧使用吧。\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-5.png %}\n\n对了，还有作者`2k+`标星的`repo`：\n\n> [https://github.com/huangjianke/Gitter](https://github.com/huangjianke/Gitter)\n\n\n啊啊啊","source":"_posts/安利一个颜值最高的GitHub小程序.md","raw":"---\ntitle: 安利一个颜值最高的GitHub小程序\ndate: 2019-09-21 20:22:33\nkeywords:\ndescription:\ntags:\n\t- 小程序\ncategories:\n\t- 开源\n\n---\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/cover.jpg %}\n\n> 图片来自 泼辣有图\n\n<!--more-->\n\n作为一个码农，平时少不了要逛一逛`GitHub`（一个号称全球最大的同性交友网站）。\n\n作为一个代码托管网站，他早已经超出了他的职责。\n\n我们可以找到一些需要用到的开源库；\n\n我们可以看到一些组织/个人的技术分享文章；\n\n我们可以找到一些有趣的收集资料；\n\n...\n\n但是，在这个移动设备如此受欢迎的今天，`GitHub`竟然没有推出`App`，就算是码农，也不能整天都带着电脑啊。\n\n好在`GitHub`提供了`Open API`供大家使用，让程序猿们自己解决。今天就给大家安利一个`颜值最高的GitHub小程序\t———— Gitter`。\n\n该小程序已经支持以下功能：\n\n1. 实时查看`Trending`\n2. 显示用户列表\n3. 仓库和用户的搜索\n4. 仓库：详情展示、`README.md`展示、`Star/Unstar`、`Fork`、`Contributors`展示、查看仓库文件内容\n5. 开发者：`Follow/Unfollow`、显示用户的`followers/following`\n6. `Issue`：查看`issue`列表、新增`issue`、新增`issue`评论\n7. 分享仓库、开发者\n8. ...\n\n不过由于微信小程序的限制，无法做`OAuth`认证，所以想要登录自己的账户稍微有点复杂：\n\n1. 跳转获取`Token`链接：[https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)，并使用个人账户密码登录\n2. 填写一个标签，勾选自己想要授权的功能清单后并授权，就可以获得一个`Token`\n3. 复制`Token`并填写到小程序中，即可登录个人账户\n\n作者本着开源的精神，将整个项目源码同时放在了`GitHub`中，供大家学习讨论。整个项目采用 `Taro` 框架 + `Taro UI` 进行开发，小程序内数据均来自于 `GitHub Api v3`。并写了一篇文章来记录该小程序的开发过程：[Gitter - 高颜值GitHub小程序客户端诞生记](https://juejin.im/post/5c4c738ce51d4525211c129b)，真的是可玩、可学。\n\n说了这么多，赶紧放几张颜值照片上来：\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-1.png %}\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-2.png %}\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-3.png %}\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-4.png %}\n\n是不是很清爽呢？那就长按识别一下下方的小程序码赶紧使用吧。\n\n{% img /images/blog/安利一个颜值最高的GitHub小程序/xcx-5.png %}\n\n对了，还有作者`2k+`标星的`repo`：\n\n> [https://github.com/huangjianke/Gitter](https://github.com/huangjianke/Gitter)\n\n\n啊啊啊","slug":"安利一个颜值最高的GitHub小程序","published":1,"updated":"2021-08-27T13:34:42.827Z","_id":"cksu5b15q004c8c20arxs0s8u","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/cover.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>作为一个码农，平时少不了要逛一逛<code>GitHub</code>（一个号称全球最大的同性交友网站）。</p>\n<p>作为一个代码托管网站，他早已经超出了他的职责。</p>\n<p>我们可以找到一些需要用到的开源库；</p>\n<p>我们可以看到一些组织/个人的技术分享文章；</p>\n<p>我们可以找到一些有趣的收集资料；</p>\n<p>…</p>\n<p>但是，在这个移动设备如此受欢迎的今天，<code>GitHub</code>竟然没有推出<code>App</code>，就算是码农，也不能整天都带着电脑啊。</p>\n<p>好在<code>GitHub</code>提供了<code>Open API</code>供大家使用，让程序猿们自己解决。今天就给大家安利一个<code>颜值最高的GitHub小程序    ———— Gitter</code>。</p>\n<p>该小程序已经支持以下功能：</p>\n<ol>\n<li>实时查看<code>Trending</code></li>\n<li>显示用户列表</li>\n<li>仓库和用户的搜索</li>\n<li>仓库：详情展示、<code>README.md</code>展示、<code>Star/Unstar</code>、<code>Fork</code>、<code>Contributors</code>展示、查看仓库文件内容</li>\n<li>开发者：<code>Follow/Unfollow</code>、显示用户的<code>followers/following</code></li>\n<li><code>Issue</code>：查看<code>issue</code>列表、新增<code>issue</code>、新增<code>issue</code>评论</li>\n<li>分享仓库、开发者</li>\n<li>…</li>\n</ol>\n<p>不过由于微信小程序的限制，无法做<code>OAuth</code>认证，所以想要登录自己的账户稍微有点复杂：</p>\n<ol>\n<li>跳转获取<code>Token</code>链接：<a href=\"https://github.com/settings/tokens/new\">https://github.com/settings/tokens/new</a>，并使用个人账户密码登录</li>\n<li>填写一个标签，勾选自己想要授权的功能清单后并授权，就可以获得一个<code>Token</code></li>\n<li>复制<code>Token</code>并填写到小程序中，即可登录个人账户</li>\n</ol>\n<p>作者本着开源的精神，将整个项目源码同时放在了<code>GitHub</code>中，供大家学习讨论。整个项目采用 <code>Taro</code> 框架 + <code>Taro UI</code> 进行开发，小程序内数据均来自于 <code>GitHub Api v3</code>。并写了一篇文章来记录该小程序的开发过程：<a href=\"https://juejin.im/post/5c4c738ce51d4525211c129b\">Gitter - 高颜值GitHub小程序客户端诞生记</a>，真的是可玩、可学。</p>\n<p>说了这么多，赶紧放几张颜值照片上来：</p>\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-1.png\" class=\"\">\n\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-2.png\" class=\"\">\n\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-3.png\" class=\"\">\n\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-4.png\" class=\"\">\n\n<p>是不是很清爽呢？那就长按识别一下下方的小程序码赶紧使用吧。</p>\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-5.png\" class=\"\">\n\n<p>对了，还有作者<code>2k+</code>标星的<code>repo</code>：</p>\n<blockquote>\n<p><a href=\"https://github.com/huangjianke/Gitter\">https://github.com/huangjianke/Gitter</a></p>\n</blockquote>\n<p>啊啊啊</p>\n","site":{"data":{}},"excerpt":"<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/cover.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图</p>\n</blockquote>","more":"<p>作为一个码农，平时少不了要逛一逛<code>GitHub</code>（一个号称全球最大的同性交友网站）。</p>\n<p>作为一个代码托管网站，他早已经超出了他的职责。</p>\n<p>我们可以找到一些需要用到的开源库；</p>\n<p>我们可以看到一些组织/个人的技术分享文章；</p>\n<p>我们可以找到一些有趣的收集资料；</p>\n<p>…</p>\n<p>但是，在这个移动设备如此受欢迎的今天，<code>GitHub</code>竟然没有推出<code>App</code>，就算是码农，也不能整天都带着电脑啊。</p>\n<p>好在<code>GitHub</code>提供了<code>Open API</code>供大家使用，让程序猿们自己解决。今天就给大家安利一个<code>颜值最高的GitHub小程序    ———— Gitter</code>。</p>\n<p>该小程序已经支持以下功能：</p>\n<ol>\n<li>实时查看<code>Trending</code></li>\n<li>显示用户列表</li>\n<li>仓库和用户的搜索</li>\n<li>仓库：详情展示、<code>README.md</code>展示、<code>Star/Unstar</code>、<code>Fork</code>、<code>Contributors</code>展示、查看仓库文件内容</li>\n<li>开发者：<code>Follow/Unfollow</code>、显示用户的<code>followers/following</code></li>\n<li><code>Issue</code>：查看<code>issue</code>列表、新增<code>issue</code>、新增<code>issue</code>评论</li>\n<li>分享仓库、开发者</li>\n<li>…</li>\n</ol>\n<p>不过由于微信小程序的限制，无法做<code>OAuth</code>认证，所以想要登录自己的账户稍微有点复杂：</p>\n<ol>\n<li>跳转获取<code>Token</code>链接：<a href=\"https://github.com/settings/tokens/new\">https://github.com/settings/tokens/new</a>，并使用个人账户密码登录</li>\n<li>填写一个标签，勾选自己想要授权的功能清单后并授权，就可以获得一个<code>Token</code></li>\n<li>复制<code>Token</code>并填写到小程序中，即可登录个人账户</li>\n</ol>\n<p>作者本着开源的精神，将整个项目源码同时放在了<code>GitHub</code>中，供大家学习讨论。整个项目采用 <code>Taro</code> 框架 + <code>Taro UI</code> 进行开发，小程序内数据均来自于 <code>GitHub Api v3</code>。并写了一篇文章来记录该小程序的开发过程：<a href=\"https://juejin.im/post/5c4c738ce51d4525211c129b\">Gitter - 高颜值GitHub小程序客户端诞生记</a>，真的是可玩、可学。</p>\n<p>说了这么多，赶紧放几张颜值照片上来：</p>\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-1.png\" class=\"\">\n\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-2.png\" class=\"\">\n\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-3.png\" class=\"\">\n\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-4.png\" class=\"\">\n\n<p>是不是很清爽呢？那就长按识别一下下方的小程序码赶紧使用吧。</p>\n<img src=\"/images/blog/%E5%AE%89%E5%88%A9%E4%B8%80%E4%B8%AA%E9%A2%9C%E5%80%BC%E6%9C%80%E9%AB%98%E7%9A%84GitHub%E5%B0%8F%E7%A8%8B%E5%BA%8F/xcx-5.png\" class=\"\">\n\n<p>对了，还有作者<code>2k+</code>标星的<code>repo</code>：</p>\n<blockquote>\n<p><a href=\"https://github.com/huangjianke/Gitter\">https://github.com/huangjianke/Gitter</a></p>\n</blockquote>\n<p>啊啊啊</p>"},{"title":"安家GitHub","date":"2014-07-19T07:03:58.000Z","_content":"\n# 前言\n终于在GitHub安家博客了,看了很多博客,对`*.github.io`特感兴趣,GitHub找了一圈也没发现人家开博客服务.正好前段时间又忙,没空理会,所以搁浅了.\n正好这段时间稍闲,简单看了一下,不明觉厉.仔细研究了下,原来还是代码托管.索性我也弄一个试一下.顺便也给自己的码农生活记录一下.\n<!--more-->\n# 总结\n其实利用GitHub和Octopress搭建博客已经有很多人的博客都记录了.这里我就不重复了,还是把我参考的一些博客贴出来,也让大家少走一些弯路.\n\n首先是[码农人生](http://msching.github.io)的博客[基于Github和Octopress搭建属于自己的博客](http://msching.github.io/blog/2014/04/11/starting/),大体上都是参考他的.\n其次是[唐巧](http://blog.devtang.com/)的技术博客[象写程序一样写博客：搭建基于github的博客](http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/)和[将博客从GitHub迁移到GitCafe](http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/).\n最后是`markdown`标记的使用,本人小菜,所以借助了其他软件[Mou](http://mouapp.com/),用了一下,感觉还可以.\n\n# 尾声\n\n好了,就这么多了.愿自己坚持下去.","source":"_posts/安家GitHub.markdown","raw":"---\ntitle: \"安家GitHub\"\ndate: 2014-07-19 15:03:58 +0800\ntags: \n    - 博客\ncategories:\n    - 日记\n\n---\n\n# 前言\n终于在GitHub安家博客了,看了很多博客,对`*.github.io`特感兴趣,GitHub找了一圈也没发现人家开博客服务.正好前段时间又忙,没空理会,所以搁浅了.\n正好这段时间稍闲,简单看了一下,不明觉厉.仔细研究了下,原来还是代码托管.索性我也弄一个试一下.顺便也给自己的码农生活记录一下.\n<!--more-->\n# 总结\n其实利用GitHub和Octopress搭建博客已经有很多人的博客都记录了.这里我就不重复了,还是把我参考的一些博客贴出来,也让大家少走一些弯路.\n\n首先是[码农人生](http://msching.github.io)的博客[基于Github和Octopress搭建属于自己的博客](http://msching.github.io/blog/2014/04/11/starting/),大体上都是参考他的.\n其次是[唐巧](http://blog.devtang.com/)的技术博客[象写程序一样写博客：搭建基于github的博客](http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/)和[将博客从GitHub迁移到GitCafe](http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/).\n最后是`markdown`标记的使用,本人小菜,所以借助了其他软件[Mou](http://mouapp.com/),用了一下,感觉还可以.\n\n# 尾声\n\n好了,就这么多了.愿自己坚持下去.","slug":"安家GitHub","published":1,"updated":"2021-09-05T14:37:36.861Z","_id":"cksu5b15s004g8c20aosxgxiz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>终于在GitHub安家博客了,看了很多博客,对<code>*.github.io</code>特感兴趣,GitHub找了一圈也没发现人家开博客服务.正好前段时间又忙,没空理会,所以搁浅了.<br>正好这段时间稍闲,简单看了一下,不明觉厉.仔细研究了下,原来还是代码托管.索性我也弄一个试一下.顺便也给自己的码农生活记录一下.</p>\n<span id=\"more\"></span>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实利用GitHub和Octopress搭建博客已经有很多人的博客都记录了.这里我就不重复了,还是把我参考的一些博客贴出来,也让大家少走一些弯路.</p>\n<p>首先是<a href=\"http://msching.github.io/\">码农人生</a>的博客<a href=\"http://msching.github.io/blog/2014/04/11/starting/\">基于Github和Octopress搭建属于自己的博客</a>,大体上都是参考他的.<br>其次是<a href=\"http://blog.devtang.com/\">唐巧</a>的技术博客<a href=\"http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/\">象写程序一样写博客：搭建基于github的博客</a>和<a href=\"http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/\">将博客从GitHub迁移到GitCafe</a>.<br>最后是<code>markdown</code>标记的使用,本人小菜,所以借助了其他软件<a href=\"http://mouapp.com/\">Mou</a>,用了一下,感觉还可以.</p>\n<h1 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h1><p>好了,就这么多了.愿自己坚持下去.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>终于在GitHub安家博客了,看了很多博客,对<code>*.github.io</code>特感兴趣,GitHub找了一圈也没发现人家开博客服务.正好前段时间又忙,没空理会,所以搁浅了.<br>正好这段时间稍闲,简单看了一下,不明觉厉.仔细研究了下,原来还是代码托管.索性我也弄一个试一下.顺便也给自己的码农生活记录一下.</p>","more":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实利用GitHub和Octopress搭建博客已经有很多人的博客都记录了.这里我就不重复了,还是把我参考的一些博客贴出来,也让大家少走一些弯路.</p>\n<p>首先是<a href=\"http://msching.github.io/\">码农人生</a>的博客<a href=\"http://msching.github.io/blog/2014/04/11/starting/\">基于Github和Octopress搭建属于自己的博客</a>,大体上都是参考他的.<br>其次是<a href=\"http://blog.devtang.com/\">唐巧</a>的技术博客<a href=\"http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/\">象写程序一样写博客：搭建基于github的博客</a>和<a href=\"http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/\">将博客从GitHub迁移到GitCafe</a>.<br>最后是<code>markdown</code>标记的使用,本人小菜,所以借助了其他软件<a href=\"http://mouapp.com/\">Mou</a>,用了一下,感觉还可以.</p>\n<h1 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h1><p>好了,就这么多了.愿自己坚持下去.</p>"},{"title":"小程序利用Canvas绘制图片和竖排文字","date":"2018-05-14T13:53:44.000Z","_content":"\n# 引言\n闲暇时间抽个空写了个三国杀武将手册的小程序，中间有个需求设计的是合成武将皮肤图、竖排的武将姓名、以及小程序码，然后提供保存图片到相册，最终让用户可以分享到朋友圈或其他平台。合成图片应该按照`Canvas`的文档来做都没什么问题，主要是有个竖排文字的需求，这里和大家分享一下。\n\n<!--more-->\n\n# 广告\n宣传一下自己的小程序，有喜欢三国杀的可以关注一下，有什么问题也可以加我微信一起讨论。\n\n`扫码体验小程序`\n\n![](https://user-gold-cdn.xitu.io/2018/5/14/1635f1e3b5c1ccc4?w=258&h=258&f=jpeg&s=52521)\n\n`扫码添加好友，请备注：三国杀`\n\n![](https://user-gold-cdn.xitu.io/2018/5/14/1635f1ee2a33cc4e?w=564&h=786&f=jpeg&s=59275)\n\n# 正文\n首先放一张最终保存到相册的图片吧~\n\n![](https://user-gold-cdn.xitu.io/2018/5/14/1635f1f27875f56d?w=640&h=640&f=jpeg&s=69607)\n\n> 自我感觉良好，至少达到了我自己的预期吧~~~\n\n下面让我们一步一步来看看如何实现的吧。\n\n整个图片分为三个部分：\n\n1. 武将图片\n2. 小程序码\n3. 武将文字信息\n\n先来看一下`wxml`里面的代码，主要是放了一个`canvas`标签，控制了一下高度和宽度属性。\n\n```\n<view>\n  <canvas class='share-canvas' style=\"width:100%;height:{{canvasHeight}}px\" canvas-id=\"share_canvas\"></canvas>\n</view>\n```\n\n### 武将图片\n\n```\ndrawHeroImage: function (path) {\n    var that = this;\n    // 拿到canvas context\n    let ctx = wx.createCanvasContext('share_canvas');\n    // 为了保证图片比例以及绘制的位置，先要拿到图片的大小\n    wx.getImageInfo({\n      src: path,\n      success: function (res) {\n\t\t\t\n\t\t  // 计算图片占比信息\t\n        let maxWidth = Math.min(res.width, that.data.canvasWidth * 0.65);\n        let radio = maxWidth / res.width;\n\n        let offsetY = (that.data.canvasHeight - res.height * radio) / 2;\n        console.log('offsetY=' + offsetY);\n        that.setData({\n          imageWidth: res.width * radio,\n          imageHeight: res.height * radio,\n          offsetY: offsetY,\n        });\n        \n        // 绘制canvas背景，不属于绘制图片部分\n        ctx.setFillStyle('white')\n        ctx.fillRect(0, 0, that.data.canvasWidth, that.data.canvasHeight);\n        // 绘制武将图片，path是本地路径，不可以传网络url，如果是网络图片需要先下载\n        ctx.drawImage(path, 10, offsetY, res.width * radio, res.height * radio)\n        // 绘制小程序码\n        that.drawQrCodeImage(ctx);\n        // 绘制势力汉字：吴\n        that.drawInfluence(ctx, that.data.hero.HERO.INFLUENCE);\n        // 绘制武将姓名：陆逊\n        that.drawName(ctx, that.data.hero.HERO.NAME);\n        // 绘制武将称号：江陵侯\n        that.drawHorner(ctx, that.data.hero.HERO.HORNER);\n        // 最终调用draw函数，生成预览图\n        // 一个坑点：只能调用一次，否则后面的会覆盖前面的\n        ctx.draw();\n      }\n    });\n  }\n```\n  \n### 小程序码\n小程序码和武将图片是一个类型，无非就是需要计算绘制的位置，这里就不再展示相关代码了。\n\n### 武将文字信息\n从刚刚的代码可以看出，我分了3个部分来绘制，其实`吴`和`陆逊`应该是可以放到一起的，但是我在绘制的时候发现，空格在绘制的时候会引起异常，导致空格后面的文字无法绘制出来，所以我这里`吴`和`陆逊`中间的空白是靠位置偏移来做的。\n\n这里就展示一下如何绘制武将称号的。\n\n```\n// 绘制武将称号：江陵侯\ndrawHorner: function (ctx, text) {\n\t// 设置字号\n    ctx.setFontSize(26);\n    // 设置字体颜色\n    ctx.setFillStyle(\"#000000\");\n    // 计算绘制起点\n    let x = this.data.offsetX + 35;\n    let y = this.data.offsetY + 10;\n    console.log('drawHorner' + text);\n    console.log(x);\n    console.log(y);\n    // 绘制竖排文字，这里是个Util函数，具体实现请继续看\n    Canvas.drawTextVertical(ctx, text, x, y);\n  }\n```\n\n绘制竖排文字从网上找了个开源的代码，需要看原理的请看[这里](http://www.zhangxinxu.com/wordpress/?p=7362)\n\n当然我这里为了适用小程序做了些改动，函数原型是这样子的：\n\n```\nCanvasRenderingContext2D.prototype.letterSpacingText = function (text, x, y, letterSpacing)\n```\n\n原谅我不是很会`js`，完全不懂这是个什么语法，看了一会没弄懂，感觉像是给类添加新的属性，不管他。\n\n> 不管白猫黑猫，能抓到耗子就是好猫\n\n改造后的函数像下面的样子：\n\n`canvas.js`\n\n```\n/**\n* @author zhangxinxu(.com)\n* @licence MIT\n* @description http://www.zhangxinxu.com/wordpress/?p=7362\n*/\nfunction drawTextVertical(context, text, x, y) {\n  var arrText = text.split('');\n  var arrWidth = arrText.map(function (letter) {\n    return 26;\n    // 这里为了找到那个空格的 bug 做了许多努力，不过似乎是白费力了\n    // const metrics = context.measureText(letter);\n    // console.log(metrics);\n    // const width = metrics.width;\n    // return width;\n  });\n  \n  var align = context.textAlign;\n  var baseline = context.textBaseline;\n\n  if (align == 'left') {\n    x = x + Math.max.apply(null, arrWidth) / 2;\n  } else if (align == 'right') {\n    x = x - Math.max.apply(null, arrWidth) / 2;\n  }\n  if (baseline == 'bottom' || baseline == 'alphabetic' || baseline == 'ideographic') {\n    y = y - arrWidth[0] / 2;\n  } else if (baseline == 'top' || baseline == 'hanging') {\n    y = y + arrWidth[0] / 2;\n  }\n\n  context.textAlign = 'center';\n  context.textBaseline = 'middle';\n\n  // 开始逐字绘制\n  arrText.forEach(function (letter, index) {\n    // 确定下一个字符的纵坐标位置\n    var letterWidth = arrWidth[index];\n    // 是否需要旋转判断\n    var code = letter.charCodeAt(0);\n    if (code <= 256) {\n      context.translate(x, y);\n      // 英文字符，旋转90°\n      context.rotate(90 * Math.PI / 180);\n      context.translate(-x, -y);\n    } else if (index > 0 && text.charCodeAt(index - 1) < 256) {\n      // y修正\n      y = y + arrWidth[index - 1] / 2;\n    }\n    context.fillText(letter, x, y);\n    // 旋转坐标系还原成初始态\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    // 确定下一个字符的纵坐标位置\n    var letterWidth = arrWidth[index];\n    y = y + letterWidth;\n  });\n  // 水平垂直对齐方式还原\n  context.textAlign = align;\n  context.textBaseline = baseline;\n}\n\nmodule.exports = {\n  drawTextVertical: drawTextVertical\n}\n```\n\n### 绘制网络图片\n由于网络图片无法直接绘制，所以需要先下载到本地，然后再按住本地图片绘制的流程走一遍。\n\n\n```\ndownloadHeroImage: function () {\n    // 微信不支持非https的图片下载，这里了个替换\n    let url = this.data.hero.HERO.ICON.replace(/http/, \"https\");\n    var that = this;\n    wx.downloadFile({\n      url: url,\n      success: function (res) {\n        // 下载成功后拿到图片的路径，然后开始绘制\n        var path = res.tempFilePath;\n        that.drawHeroImage(path);\n      }, fail: function (res) {\n        console.log(res)\n      }\n    });\n  }\n```\n\n### 保存图片\n说了这么多，自然少不了最终的一步，将绘制到`canvas`的图片保存到手机相册，这里需要用户授权，你需要自己处理。\n\n用的是微信给我们提供的接口`wx.canvasToTempFilePath`。需要我们传入起点坐标`(x, y)`和画布大小`(width, height)`以及`canvasId`。\n\n\n```\nsaveShareImage: function () {\n    wx.showLoading({\n      title: '正在保存图片..',\n    });\n    let that = this;\n    wx.canvasToTempFilePath({\n      x: 0,\n      y: 0,\n      width: that.data.canvasWidth,\n      height: that.data.canvasHeight,\n      canvasId: 'share_canvas',\n      success: function (res) {\n        wx.saveImageToPhotosAlbum({\n          filePath: res.tempFilePath,\n          success(res) {\n            console.log(res);\n            wx.showToast({\n              title: '保存到相册成功',\n              duration: 1500,\n            })\n          },\n          fail(res) {\n            console.log(res)\n            wx.showToast({\n              title: '保存到相册失败',\n              icon: 'fail'\n            })\n          },\n          complete(res) {\n            console.log(res)\n          }\n        })\n      }\n    })\n  }\n```\n\n# 开源\n本着开源的精神，源码已经放在`Github`上，大家可以去上面查看具体代码。\n\n[https://github.com/HistoryZhang/SgsNoteBook](https://github.com/HistoryZhang/SgsNoteBook)\n\n如果对你有帮助的话，麻烦给个`Star`吧~\n\n点击阅读原文可以查看更好的代码格式~","source":"_posts/小程序利用Canvas绘制图片和竖排文字.md","raw":"---\ntitle: 小程序利用Canvas绘制图片和竖排文字\ndate: 2018-05-14 21:53:44\ntags: [小程序, Canvas]\ncategories: [小程序]\n---\n\n# 引言\n闲暇时间抽个空写了个三国杀武将手册的小程序，中间有个需求设计的是合成武将皮肤图、竖排的武将姓名、以及小程序码，然后提供保存图片到相册，最终让用户可以分享到朋友圈或其他平台。合成图片应该按照`Canvas`的文档来做都没什么问题，主要是有个竖排文字的需求，这里和大家分享一下。\n\n<!--more-->\n\n# 广告\n宣传一下自己的小程序，有喜欢三国杀的可以关注一下，有什么问题也可以加我微信一起讨论。\n\n`扫码体验小程序`\n\n![](https://user-gold-cdn.xitu.io/2018/5/14/1635f1e3b5c1ccc4?w=258&h=258&f=jpeg&s=52521)\n\n`扫码添加好友，请备注：三国杀`\n\n![](https://user-gold-cdn.xitu.io/2018/5/14/1635f1ee2a33cc4e?w=564&h=786&f=jpeg&s=59275)\n\n# 正文\n首先放一张最终保存到相册的图片吧~\n\n![](https://user-gold-cdn.xitu.io/2018/5/14/1635f1f27875f56d?w=640&h=640&f=jpeg&s=69607)\n\n> 自我感觉良好，至少达到了我自己的预期吧~~~\n\n下面让我们一步一步来看看如何实现的吧。\n\n整个图片分为三个部分：\n\n1. 武将图片\n2. 小程序码\n3. 武将文字信息\n\n先来看一下`wxml`里面的代码，主要是放了一个`canvas`标签，控制了一下高度和宽度属性。\n\n```\n<view>\n  <canvas class='share-canvas' style=\"width:100%;height:{{canvasHeight}}px\" canvas-id=\"share_canvas\"></canvas>\n</view>\n```\n\n### 武将图片\n\n```\ndrawHeroImage: function (path) {\n    var that = this;\n    // 拿到canvas context\n    let ctx = wx.createCanvasContext('share_canvas');\n    // 为了保证图片比例以及绘制的位置，先要拿到图片的大小\n    wx.getImageInfo({\n      src: path,\n      success: function (res) {\n\t\t\t\n\t\t  // 计算图片占比信息\t\n        let maxWidth = Math.min(res.width, that.data.canvasWidth * 0.65);\n        let radio = maxWidth / res.width;\n\n        let offsetY = (that.data.canvasHeight - res.height * radio) / 2;\n        console.log('offsetY=' + offsetY);\n        that.setData({\n          imageWidth: res.width * radio,\n          imageHeight: res.height * radio,\n          offsetY: offsetY,\n        });\n        \n        // 绘制canvas背景，不属于绘制图片部分\n        ctx.setFillStyle('white')\n        ctx.fillRect(0, 0, that.data.canvasWidth, that.data.canvasHeight);\n        // 绘制武将图片，path是本地路径，不可以传网络url，如果是网络图片需要先下载\n        ctx.drawImage(path, 10, offsetY, res.width * radio, res.height * radio)\n        // 绘制小程序码\n        that.drawQrCodeImage(ctx);\n        // 绘制势力汉字：吴\n        that.drawInfluence(ctx, that.data.hero.HERO.INFLUENCE);\n        // 绘制武将姓名：陆逊\n        that.drawName(ctx, that.data.hero.HERO.NAME);\n        // 绘制武将称号：江陵侯\n        that.drawHorner(ctx, that.data.hero.HERO.HORNER);\n        // 最终调用draw函数，生成预览图\n        // 一个坑点：只能调用一次，否则后面的会覆盖前面的\n        ctx.draw();\n      }\n    });\n  }\n```\n  \n### 小程序码\n小程序码和武将图片是一个类型，无非就是需要计算绘制的位置，这里就不再展示相关代码了。\n\n### 武将文字信息\n从刚刚的代码可以看出，我分了3个部分来绘制，其实`吴`和`陆逊`应该是可以放到一起的，但是我在绘制的时候发现，空格在绘制的时候会引起异常，导致空格后面的文字无法绘制出来，所以我这里`吴`和`陆逊`中间的空白是靠位置偏移来做的。\n\n这里就展示一下如何绘制武将称号的。\n\n```\n// 绘制武将称号：江陵侯\ndrawHorner: function (ctx, text) {\n\t// 设置字号\n    ctx.setFontSize(26);\n    // 设置字体颜色\n    ctx.setFillStyle(\"#000000\");\n    // 计算绘制起点\n    let x = this.data.offsetX + 35;\n    let y = this.data.offsetY + 10;\n    console.log('drawHorner' + text);\n    console.log(x);\n    console.log(y);\n    // 绘制竖排文字，这里是个Util函数，具体实现请继续看\n    Canvas.drawTextVertical(ctx, text, x, y);\n  }\n```\n\n绘制竖排文字从网上找了个开源的代码，需要看原理的请看[这里](http://www.zhangxinxu.com/wordpress/?p=7362)\n\n当然我这里为了适用小程序做了些改动，函数原型是这样子的：\n\n```\nCanvasRenderingContext2D.prototype.letterSpacingText = function (text, x, y, letterSpacing)\n```\n\n原谅我不是很会`js`，完全不懂这是个什么语法，看了一会没弄懂，感觉像是给类添加新的属性，不管他。\n\n> 不管白猫黑猫，能抓到耗子就是好猫\n\n改造后的函数像下面的样子：\n\n`canvas.js`\n\n```\n/**\n* @author zhangxinxu(.com)\n* @licence MIT\n* @description http://www.zhangxinxu.com/wordpress/?p=7362\n*/\nfunction drawTextVertical(context, text, x, y) {\n  var arrText = text.split('');\n  var arrWidth = arrText.map(function (letter) {\n    return 26;\n    // 这里为了找到那个空格的 bug 做了许多努力，不过似乎是白费力了\n    // const metrics = context.measureText(letter);\n    // console.log(metrics);\n    // const width = metrics.width;\n    // return width;\n  });\n  \n  var align = context.textAlign;\n  var baseline = context.textBaseline;\n\n  if (align == 'left') {\n    x = x + Math.max.apply(null, arrWidth) / 2;\n  } else if (align == 'right') {\n    x = x - Math.max.apply(null, arrWidth) / 2;\n  }\n  if (baseline == 'bottom' || baseline == 'alphabetic' || baseline == 'ideographic') {\n    y = y - arrWidth[0] / 2;\n  } else if (baseline == 'top' || baseline == 'hanging') {\n    y = y + arrWidth[0] / 2;\n  }\n\n  context.textAlign = 'center';\n  context.textBaseline = 'middle';\n\n  // 开始逐字绘制\n  arrText.forEach(function (letter, index) {\n    // 确定下一个字符的纵坐标位置\n    var letterWidth = arrWidth[index];\n    // 是否需要旋转判断\n    var code = letter.charCodeAt(0);\n    if (code <= 256) {\n      context.translate(x, y);\n      // 英文字符，旋转90°\n      context.rotate(90 * Math.PI / 180);\n      context.translate(-x, -y);\n    } else if (index > 0 && text.charCodeAt(index - 1) < 256) {\n      // y修正\n      y = y + arrWidth[index - 1] / 2;\n    }\n    context.fillText(letter, x, y);\n    // 旋转坐标系还原成初始态\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    // 确定下一个字符的纵坐标位置\n    var letterWidth = arrWidth[index];\n    y = y + letterWidth;\n  });\n  // 水平垂直对齐方式还原\n  context.textAlign = align;\n  context.textBaseline = baseline;\n}\n\nmodule.exports = {\n  drawTextVertical: drawTextVertical\n}\n```\n\n### 绘制网络图片\n由于网络图片无法直接绘制，所以需要先下载到本地，然后再按住本地图片绘制的流程走一遍。\n\n\n```\ndownloadHeroImage: function () {\n    // 微信不支持非https的图片下载，这里了个替换\n    let url = this.data.hero.HERO.ICON.replace(/http/, \"https\");\n    var that = this;\n    wx.downloadFile({\n      url: url,\n      success: function (res) {\n        // 下载成功后拿到图片的路径，然后开始绘制\n        var path = res.tempFilePath;\n        that.drawHeroImage(path);\n      }, fail: function (res) {\n        console.log(res)\n      }\n    });\n  }\n```\n\n### 保存图片\n说了这么多，自然少不了最终的一步，将绘制到`canvas`的图片保存到手机相册，这里需要用户授权，你需要自己处理。\n\n用的是微信给我们提供的接口`wx.canvasToTempFilePath`。需要我们传入起点坐标`(x, y)`和画布大小`(width, height)`以及`canvasId`。\n\n\n```\nsaveShareImage: function () {\n    wx.showLoading({\n      title: '正在保存图片..',\n    });\n    let that = this;\n    wx.canvasToTempFilePath({\n      x: 0,\n      y: 0,\n      width: that.data.canvasWidth,\n      height: that.data.canvasHeight,\n      canvasId: 'share_canvas',\n      success: function (res) {\n        wx.saveImageToPhotosAlbum({\n          filePath: res.tempFilePath,\n          success(res) {\n            console.log(res);\n            wx.showToast({\n              title: '保存到相册成功',\n              duration: 1500,\n            })\n          },\n          fail(res) {\n            console.log(res)\n            wx.showToast({\n              title: '保存到相册失败',\n              icon: 'fail'\n            })\n          },\n          complete(res) {\n            console.log(res)\n          }\n        })\n      }\n    })\n  }\n```\n\n# 开源\n本着开源的精神，源码已经放在`Github`上，大家可以去上面查看具体代码。\n\n[https://github.com/HistoryZhang/SgsNoteBook](https://github.com/HistoryZhang/SgsNoteBook)\n\n如果对你有帮助的话，麻烦给个`Star`吧~\n\n点击阅读原文可以查看更好的代码格式~","slug":"小程序利用Canvas绘制图片和竖排文字","published":1,"updated":"2021-09-05T14:37:59.649Z","_id":"cksu5b15s004k8c207vmd529b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>闲暇时间抽个空写了个三国杀武将手册的小程序，中间有个需求设计的是合成武将皮肤图、竖排的武将姓名、以及小程序码，然后提供保存图片到相册，最终让用户可以分享到朋友圈或其他平台。合成图片应该按照<code>Canvas</code>的文档来做都没什么问题，主要是有个竖排文字的需求，这里和大家分享一下。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"广告\"><a href=\"#广告\" class=\"headerlink\" title=\"广告\"></a>广告</h1><p>宣传一下自己的小程序，有喜欢三国杀的可以关注一下，有什么问题也可以加我微信一起讨论。</p>\n<p><code>扫码体验小程序</code></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635f1e3b5c1ccc4?w=258&h=258&f=jpeg&s=52521\"></p>\n<p><code>扫码添加好友，请备注：三国杀</code></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635f1ee2a33cc4e?w=564&h=786&f=jpeg&s=59275\"></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>首先放一张最终保存到相册的图片吧~</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635f1f27875f56d?w=640&h=640&f=jpeg&s=69607\"></p>\n<blockquote>\n<p>自我感觉良好，至少达到了我自己的预期吧~~~</p>\n</blockquote>\n<p>下面让我们一步一步来看看如何实现的吧。</p>\n<p>整个图片分为三个部分：</p>\n<ol>\n<li>武将图片</li>\n<li>小程序码</li>\n<li>武将文字信息</li>\n</ol>\n<p>先来看一下<code>wxml</code>里面的代码，主要是放了一个<code>canvas</code>标签，控制了一下高度和宽度属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view&gt;</span><br><span class=\"line\">  &lt;canvas class=&#x27;share-canvas&#x27; style=&quot;width:100%;height:&#123;&#123;canvasHeight&#125;&#125;px&quot; canvas-id=&quot;share_canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"武将图片\"><a href=\"#武将图片\" class=\"headerlink\" title=\"武将图片\"></a>武将图片</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawHeroImage: function (path) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 拿到canvas context</span><br><span class=\"line\">    let ctx = wx.createCanvasContext(&#x27;share_canvas&#x27;);</span><br><span class=\"line\">    // 为了保证图片比例以及绘制的位置，先要拿到图片的大小</span><br><span class=\"line\">    wx.getImageInfo(&#123;</span><br><span class=\"line\">      src: path,</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t  // 计算图片占比信息\t</span><br><span class=\"line\">        let maxWidth = Math.min(res.width, that.data.canvasWidth * 0.65);</span><br><span class=\"line\">        let radio = maxWidth / res.width;</span><br><span class=\"line\"></span><br><span class=\"line\">        let offsetY = (that.data.canvasHeight - res.height * radio) / 2;</span><br><span class=\"line\">        console.log(&#x27;offsetY=&#x27; + offsetY);</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          imageWidth: res.width * radio,</span><br><span class=\"line\">          imageHeight: res.height * radio,</span><br><span class=\"line\">          offsetY: offsetY,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 绘制canvas背景，不属于绘制图片部分</span><br><span class=\"line\">        ctx.setFillStyle(&#x27;white&#x27;)</span><br><span class=\"line\">        ctx.fillRect(0, 0, that.data.canvasWidth, that.data.canvasHeight);</span><br><span class=\"line\">        // 绘制武将图片，path是本地路径，不可以传网络url，如果是网络图片需要先下载</span><br><span class=\"line\">        ctx.drawImage(path, 10, offsetY, res.width * radio, res.height * radio)</span><br><span class=\"line\">        // 绘制小程序码</span><br><span class=\"line\">        that.drawQrCodeImage(ctx);</span><br><span class=\"line\">        // 绘制势力汉字：吴</span><br><span class=\"line\">        that.drawInfluence(ctx, that.data.hero.HERO.INFLUENCE);</span><br><span class=\"line\">        // 绘制武将姓名：陆逊</span><br><span class=\"line\">        that.drawName(ctx, that.data.hero.HERO.NAME);</span><br><span class=\"line\">        // 绘制武将称号：江陵侯</span><br><span class=\"line\">        that.drawHorner(ctx, that.data.hero.HERO.HORNER);</span><br><span class=\"line\">        // 最终调用draw函数，生成预览图</span><br><span class=\"line\">        // 一个坑点：只能调用一次，否则后面的会覆盖前面的</span><br><span class=\"line\">        ctx.draw();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小程序码\"><a href=\"#小程序码\" class=\"headerlink\" title=\"小程序码\"></a>小程序码</h3><p>小程序码和武将图片是一个类型，无非就是需要计算绘制的位置，这里就不再展示相关代码了。</p>\n<h3 id=\"武将文字信息\"><a href=\"#武将文字信息\" class=\"headerlink\" title=\"武将文字信息\"></a>武将文字信息</h3><p>从刚刚的代码可以看出，我分了3个部分来绘制，其实<code>吴</code>和<code>陆逊</code>应该是可以放到一起的，但是我在绘制的时候发现，空格在绘制的时候会引起异常，导致空格后面的文字无法绘制出来，所以我这里<code>吴</code>和<code>陆逊</code>中间的空白是靠位置偏移来做的。</p>\n<p>这里就展示一下如何绘制武将称号的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 绘制武将称号：江陵侯</span><br><span class=\"line\">drawHorner: function (ctx, text) &#123;</span><br><span class=\"line\">\t// 设置字号</span><br><span class=\"line\">    ctx.setFontSize(26);</span><br><span class=\"line\">    // 设置字体颜色</span><br><span class=\"line\">    ctx.setFillStyle(&quot;#000000&quot;);</span><br><span class=\"line\">    // 计算绘制起点</span><br><span class=\"line\">    let x = this.data.offsetX + 35;</span><br><span class=\"line\">    let y = this.data.offsetY + 10;</span><br><span class=\"line\">    console.log(&#x27;drawHorner&#x27; + text);</span><br><span class=\"line\">    console.log(x);</span><br><span class=\"line\">    console.log(y);</span><br><span class=\"line\">    // 绘制竖排文字，这里是个Util函数，具体实现请继续看</span><br><span class=\"line\">    Canvas.drawTextVertical(ctx, text, x, y);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>绘制竖排文字从网上找了个开源的代码，需要看原理的请看<a href=\"http://www.zhangxinxu.com/wordpress/?p=7362\">这里</a></p>\n<p>当然我这里为了适用小程序做了些改动，函数原型是这样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CanvasRenderingContext2D.prototype.letterSpacingText = function (text, x, y, letterSpacing)</span><br></pre></td></tr></table></figure>\n\n<p>原谅我不是很会<code>js</code>，完全不懂这是个什么语法，看了一会没弄懂，感觉像是给类添加新的属性，不管他。</p>\n<blockquote>\n<p>不管白猫黑猫，能抓到耗子就是好猫</p>\n</blockquote>\n<p>改造后的函数像下面的样子：</p>\n<p><code>canvas.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author zhangxinxu(.com)</span><br><span class=\"line\">* @licence MIT</span><br><span class=\"line\">* @description http://www.zhangxinxu.com/wordpress/?p=7362</span><br><span class=\"line\">*/</span><br><span class=\"line\">function drawTextVertical(context, text, x, y) &#123;</span><br><span class=\"line\">  var arrText = text.split(&#x27;&#x27;);</span><br><span class=\"line\">  var arrWidth = arrText.map(function (letter) &#123;</span><br><span class=\"line\">    return 26;</span><br><span class=\"line\">    // 这里为了找到那个空格的 bug 做了许多努力，不过似乎是白费力了</span><br><span class=\"line\">    // const metrics = context.measureText(letter);</span><br><span class=\"line\">    // console.log(metrics);</span><br><span class=\"line\">    // const width = metrics.width;</span><br><span class=\"line\">    // return width;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  var align = context.textAlign;</span><br><span class=\"line\">  var baseline = context.textBaseline;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (align == &#x27;left&#x27;) &#123;</span><br><span class=\"line\">    x = x + Math.max.apply(null, arrWidth) / 2;</span><br><span class=\"line\">  &#125; else if (align == &#x27;right&#x27;) &#123;</span><br><span class=\"line\">    x = x - Math.max.apply(null, arrWidth) / 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (baseline == &#x27;bottom&#x27; || baseline == &#x27;alphabetic&#x27; || baseline == &#x27;ideographic&#x27;) &#123;</span><br><span class=\"line\">    y = y - arrWidth[0] / 2;</span><br><span class=\"line\">  &#125; else if (baseline == &#x27;top&#x27; || baseline == &#x27;hanging&#x27;) &#123;</span><br><span class=\"line\">    y = y + arrWidth[0] / 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.textAlign = &#x27;center&#x27;;</span><br><span class=\"line\">  context.textBaseline = &#x27;middle&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 开始逐字绘制</span><br><span class=\"line\">  arrText.forEach(function (letter, index) &#123;</span><br><span class=\"line\">    // 确定下一个字符的纵坐标位置</span><br><span class=\"line\">    var letterWidth = arrWidth[index];</span><br><span class=\"line\">    // 是否需要旋转判断</span><br><span class=\"line\">    var code = letter.charCodeAt(0);</span><br><span class=\"line\">    if (code &lt;= 256) &#123;</span><br><span class=\"line\">      context.translate(x, y);</span><br><span class=\"line\">      // 英文字符，旋转90°</span><br><span class=\"line\">      context.rotate(90 * Math.PI / 180);</span><br><span class=\"line\">      context.translate(-x, -y);</span><br><span class=\"line\">    &#125; else if (index &gt; 0 &amp;&amp; text.charCodeAt(index - 1) &lt; 256) &#123;</span><br><span class=\"line\">      // y修正</span><br><span class=\"line\">      y = y + arrWidth[index - 1] / 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context.fillText(letter, x, y);</span><br><span class=\"line\">    // 旋转坐标系还原成初始态</span><br><span class=\"line\">    context.setTransform(1, 0, 0, 1, 0, 0);</span><br><span class=\"line\">    // 确定下一个字符的纵坐标位置</span><br><span class=\"line\">    var letterWidth = arrWidth[index];</span><br><span class=\"line\">    y = y + letterWidth;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  // 水平垂直对齐方式还原</span><br><span class=\"line\">  context.textAlign = align;</span><br><span class=\"line\">  context.textBaseline = baseline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  drawTextVertical: drawTextVertical</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绘制网络图片\"><a href=\"#绘制网络图片\" class=\"headerlink\" title=\"绘制网络图片\"></a>绘制网络图片</h3><p>由于网络图片无法直接绘制，所以需要先下载到本地，然后再按住本地图片绘制的流程走一遍。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadHeroImage: function () &#123;</span><br><span class=\"line\">    // 微信不支持非https的图片下载，这里了个替换</span><br><span class=\"line\">    let url = this.data.hero.HERO.ICON.replace(/http/, &quot;https&quot;);</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    wx.downloadFile(&#123;</span><br><span class=\"line\">      url: url,</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">        // 下载成功后拿到图片的路径，然后开始绘制</span><br><span class=\"line\">        var path = res.tempFilePath;</span><br><span class=\"line\">        that.drawHeroImage(path);</span><br><span class=\"line\">      &#125;, fail: function (res) &#123;</span><br><span class=\"line\">        console.log(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保存图片\"><a href=\"#保存图片\" class=\"headerlink\" title=\"保存图片\"></a>保存图片</h3><p>说了这么多，自然少不了最终的一步，将绘制到<code>canvas</code>的图片保存到手机相册，这里需要用户授权，你需要自己处理。</p>\n<p>用的是微信给我们提供的接口<code>wx.canvasToTempFilePath</code>。需要我们传入起点坐标<code>(x, y)</code>和画布大小<code>(width, height)</code>以及<code>canvasId</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">saveShareImage: function () &#123;</span><br><span class=\"line\">    wx.showLoading(&#123;</span><br><span class=\"line\">      title: &#x27;正在保存图片..&#x27;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    let that = this;</span><br><span class=\"line\">    wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">      x: 0,</span><br><span class=\"line\">      y: 0,</span><br><span class=\"line\">      width: that.data.canvasWidth,</span><br><span class=\"line\">      height: that.data.canvasHeight,</span><br><span class=\"line\">      canvasId: &#x27;share_canvas&#x27;,</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">        wx.saveImageToPhotosAlbum(&#123;</span><br><span class=\"line\">          filePath: res.tempFilePath,</span><br><span class=\"line\">          success(res) &#123;</span><br><span class=\"line\">            console.log(res);</span><br><span class=\"line\">            wx.showToast(&#123;</span><br><span class=\"line\">              title: &#x27;保存到相册成功&#x27;,</span><br><span class=\"line\">              duration: 1500,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          fail(res) &#123;</span><br><span class=\"line\">            console.log(res)</span><br><span class=\"line\">            wx.showToast(&#123;</span><br><span class=\"line\">              title: &#x27;保存到相册失败&#x27;,</span><br><span class=\"line\">              icon: &#x27;fail&#x27;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          complete(res) &#123;</span><br><span class=\"line\">            console.log(res)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h1><p>本着开源的精神，源码已经放在<code>Github</code>上，大家可以去上面查看具体代码。</p>\n<p><a href=\"https://github.com/HistoryZhang/SgsNoteBook\">https://github.com/HistoryZhang/SgsNoteBook</a></p>\n<p>如果对你有帮助的话，麻烦给个<code>Star</code>吧~</p>\n<p>点击阅读原文可以查看更好的代码格式~</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>闲暇时间抽个空写了个三国杀武将手册的小程序，中间有个需求设计的是合成武将皮肤图、竖排的武将姓名、以及小程序码，然后提供保存图片到相册，最终让用户可以分享到朋友圈或其他平台。合成图片应该按照<code>Canvas</code>的文档来做都没什么问题，主要是有个竖排文字的需求，这里和大家分享一下。</p>","more":"<h1 id=\"广告\"><a href=\"#广告\" class=\"headerlink\" title=\"广告\"></a>广告</h1><p>宣传一下自己的小程序，有喜欢三国杀的可以关注一下，有什么问题也可以加我微信一起讨论。</p>\n<p><code>扫码体验小程序</code></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635f1e3b5c1ccc4?w=258&h=258&f=jpeg&s=52521\"></p>\n<p><code>扫码添加好友，请备注：三国杀</code></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635f1ee2a33cc4e?w=564&h=786&f=jpeg&s=59275\"></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>首先放一张最终保存到相册的图片吧~</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635f1f27875f56d?w=640&h=640&f=jpeg&s=69607\"></p>\n<blockquote>\n<p>自我感觉良好，至少达到了我自己的预期吧~~~</p>\n</blockquote>\n<p>下面让我们一步一步来看看如何实现的吧。</p>\n<p>整个图片分为三个部分：</p>\n<ol>\n<li>武将图片</li>\n<li>小程序码</li>\n<li>武将文字信息</li>\n</ol>\n<p>先来看一下<code>wxml</code>里面的代码，主要是放了一个<code>canvas</code>标签，控制了一下高度和宽度属性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;view&gt;</span><br><span class=\"line\">  &lt;canvas class=&#x27;share-canvas&#x27; style=&quot;width:100%;height:&#123;&#123;canvasHeight&#125;&#125;px&quot; canvas-id=&quot;share_canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"武将图片\"><a href=\"#武将图片\" class=\"headerlink\" title=\"武将图片\"></a>武将图片</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawHeroImage: function (path) &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 拿到canvas context</span><br><span class=\"line\">    let ctx = wx.createCanvasContext(&#x27;share_canvas&#x27;);</span><br><span class=\"line\">    // 为了保证图片比例以及绘制的位置，先要拿到图片的大小</span><br><span class=\"line\">    wx.getImageInfo(&#123;</span><br><span class=\"line\">      src: path,</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t  // 计算图片占比信息\t</span><br><span class=\"line\">        let maxWidth = Math.min(res.width, that.data.canvasWidth * 0.65);</span><br><span class=\"line\">        let radio = maxWidth / res.width;</span><br><span class=\"line\"></span><br><span class=\"line\">        let offsetY = (that.data.canvasHeight - res.height * radio) / 2;</span><br><span class=\"line\">        console.log(&#x27;offsetY=&#x27; + offsetY);</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          imageWidth: res.width * radio,</span><br><span class=\"line\">          imageHeight: res.height * radio,</span><br><span class=\"line\">          offsetY: offsetY,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 绘制canvas背景，不属于绘制图片部分</span><br><span class=\"line\">        ctx.setFillStyle(&#x27;white&#x27;)</span><br><span class=\"line\">        ctx.fillRect(0, 0, that.data.canvasWidth, that.data.canvasHeight);</span><br><span class=\"line\">        // 绘制武将图片，path是本地路径，不可以传网络url，如果是网络图片需要先下载</span><br><span class=\"line\">        ctx.drawImage(path, 10, offsetY, res.width * radio, res.height * radio)</span><br><span class=\"line\">        // 绘制小程序码</span><br><span class=\"line\">        that.drawQrCodeImage(ctx);</span><br><span class=\"line\">        // 绘制势力汉字：吴</span><br><span class=\"line\">        that.drawInfluence(ctx, that.data.hero.HERO.INFLUENCE);</span><br><span class=\"line\">        // 绘制武将姓名：陆逊</span><br><span class=\"line\">        that.drawName(ctx, that.data.hero.HERO.NAME);</span><br><span class=\"line\">        // 绘制武将称号：江陵侯</span><br><span class=\"line\">        that.drawHorner(ctx, that.data.hero.HERO.HORNER);</span><br><span class=\"line\">        // 最终调用draw函数，生成预览图</span><br><span class=\"line\">        // 一个坑点：只能调用一次，否则后面的会覆盖前面的</span><br><span class=\"line\">        ctx.draw();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小程序码\"><a href=\"#小程序码\" class=\"headerlink\" title=\"小程序码\"></a>小程序码</h3><p>小程序码和武将图片是一个类型，无非就是需要计算绘制的位置，这里就不再展示相关代码了。</p>\n<h3 id=\"武将文字信息\"><a href=\"#武将文字信息\" class=\"headerlink\" title=\"武将文字信息\"></a>武将文字信息</h3><p>从刚刚的代码可以看出，我分了3个部分来绘制，其实<code>吴</code>和<code>陆逊</code>应该是可以放到一起的，但是我在绘制的时候发现，空格在绘制的时候会引起异常，导致空格后面的文字无法绘制出来，所以我这里<code>吴</code>和<code>陆逊</code>中间的空白是靠位置偏移来做的。</p>\n<p>这里就展示一下如何绘制武将称号的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 绘制武将称号：江陵侯</span><br><span class=\"line\">drawHorner: function (ctx, text) &#123;</span><br><span class=\"line\">\t// 设置字号</span><br><span class=\"line\">    ctx.setFontSize(26);</span><br><span class=\"line\">    // 设置字体颜色</span><br><span class=\"line\">    ctx.setFillStyle(&quot;#000000&quot;);</span><br><span class=\"line\">    // 计算绘制起点</span><br><span class=\"line\">    let x = this.data.offsetX + 35;</span><br><span class=\"line\">    let y = this.data.offsetY + 10;</span><br><span class=\"line\">    console.log(&#x27;drawHorner&#x27; + text);</span><br><span class=\"line\">    console.log(x);</span><br><span class=\"line\">    console.log(y);</span><br><span class=\"line\">    // 绘制竖排文字，这里是个Util函数，具体实现请继续看</span><br><span class=\"line\">    Canvas.drawTextVertical(ctx, text, x, y);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>绘制竖排文字从网上找了个开源的代码，需要看原理的请看<a href=\"http://www.zhangxinxu.com/wordpress/?p=7362\">这里</a></p>\n<p>当然我这里为了适用小程序做了些改动，函数原型是这样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CanvasRenderingContext2D.prototype.letterSpacingText = function (text, x, y, letterSpacing)</span><br></pre></td></tr></table></figure>\n\n<p>原谅我不是很会<code>js</code>，完全不懂这是个什么语法，看了一会没弄懂，感觉像是给类添加新的属性，不管他。</p>\n<blockquote>\n<p>不管白猫黑猫，能抓到耗子就是好猫</p>\n</blockquote>\n<p>改造后的函数像下面的样子：</p>\n<p><code>canvas.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author zhangxinxu(.com)</span><br><span class=\"line\">* @licence MIT</span><br><span class=\"line\">* @description http://www.zhangxinxu.com/wordpress/?p=7362</span><br><span class=\"line\">*/</span><br><span class=\"line\">function drawTextVertical(context, text, x, y) &#123;</span><br><span class=\"line\">  var arrText = text.split(&#x27;&#x27;);</span><br><span class=\"line\">  var arrWidth = arrText.map(function (letter) &#123;</span><br><span class=\"line\">    return 26;</span><br><span class=\"line\">    // 这里为了找到那个空格的 bug 做了许多努力，不过似乎是白费力了</span><br><span class=\"line\">    // const metrics = context.measureText(letter);</span><br><span class=\"line\">    // console.log(metrics);</span><br><span class=\"line\">    // const width = metrics.width;</span><br><span class=\"line\">    // return width;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  var align = context.textAlign;</span><br><span class=\"line\">  var baseline = context.textBaseline;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (align == &#x27;left&#x27;) &#123;</span><br><span class=\"line\">    x = x + Math.max.apply(null, arrWidth) / 2;</span><br><span class=\"line\">  &#125; else if (align == &#x27;right&#x27;) &#123;</span><br><span class=\"line\">    x = x - Math.max.apply(null, arrWidth) / 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (baseline == &#x27;bottom&#x27; || baseline == &#x27;alphabetic&#x27; || baseline == &#x27;ideographic&#x27;) &#123;</span><br><span class=\"line\">    y = y - arrWidth[0] / 2;</span><br><span class=\"line\">  &#125; else if (baseline == &#x27;top&#x27; || baseline == &#x27;hanging&#x27;) &#123;</span><br><span class=\"line\">    y = y + arrWidth[0] / 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.textAlign = &#x27;center&#x27;;</span><br><span class=\"line\">  context.textBaseline = &#x27;middle&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 开始逐字绘制</span><br><span class=\"line\">  arrText.forEach(function (letter, index) &#123;</span><br><span class=\"line\">    // 确定下一个字符的纵坐标位置</span><br><span class=\"line\">    var letterWidth = arrWidth[index];</span><br><span class=\"line\">    // 是否需要旋转判断</span><br><span class=\"line\">    var code = letter.charCodeAt(0);</span><br><span class=\"line\">    if (code &lt;= 256) &#123;</span><br><span class=\"line\">      context.translate(x, y);</span><br><span class=\"line\">      // 英文字符，旋转90°</span><br><span class=\"line\">      context.rotate(90 * Math.PI / 180);</span><br><span class=\"line\">      context.translate(-x, -y);</span><br><span class=\"line\">    &#125; else if (index &gt; 0 &amp;&amp; text.charCodeAt(index - 1) &lt; 256) &#123;</span><br><span class=\"line\">      // y修正</span><br><span class=\"line\">      y = y + arrWidth[index - 1] / 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context.fillText(letter, x, y);</span><br><span class=\"line\">    // 旋转坐标系还原成初始态</span><br><span class=\"line\">    context.setTransform(1, 0, 0, 1, 0, 0);</span><br><span class=\"line\">    // 确定下一个字符的纵坐标位置</span><br><span class=\"line\">    var letterWidth = arrWidth[index];</span><br><span class=\"line\">    y = y + letterWidth;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  // 水平垂直对齐方式还原</span><br><span class=\"line\">  context.textAlign = align;</span><br><span class=\"line\">  context.textBaseline = baseline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  drawTextVertical: drawTextVertical</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绘制网络图片\"><a href=\"#绘制网络图片\" class=\"headerlink\" title=\"绘制网络图片\"></a>绘制网络图片</h3><p>由于网络图片无法直接绘制，所以需要先下载到本地，然后再按住本地图片绘制的流程走一遍。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadHeroImage: function () &#123;</span><br><span class=\"line\">    // 微信不支持非https的图片下载，这里了个替换</span><br><span class=\"line\">    let url = this.data.hero.HERO.ICON.replace(/http/, &quot;https&quot;);</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    wx.downloadFile(&#123;</span><br><span class=\"line\">      url: url,</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">        // 下载成功后拿到图片的路径，然后开始绘制</span><br><span class=\"line\">        var path = res.tempFilePath;</span><br><span class=\"line\">        that.drawHeroImage(path);</span><br><span class=\"line\">      &#125;, fail: function (res) &#123;</span><br><span class=\"line\">        console.log(res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保存图片\"><a href=\"#保存图片\" class=\"headerlink\" title=\"保存图片\"></a>保存图片</h3><p>说了这么多，自然少不了最终的一步，将绘制到<code>canvas</code>的图片保存到手机相册，这里需要用户授权，你需要自己处理。</p>\n<p>用的是微信给我们提供的接口<code>wx.canvasToTempFilePath</code>。需要我们传入起点坐标<code>(x, y)</code>和画布大小<code>(width, height)</code>以及<code>canvasId</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">saveShareImage: function () &#123;</span><br><span class=\"line\">    wx.showLoading(&#123;</span><br><span class=\"line\">      title: &#x27;正在保存图片..&#x27;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    let that = this;</span><br><span class=\"line\">    wx.canvasToTempFilePath(&#123;</span><br><span class=\"line\">      x: 0,</span><br><span class=\"line\">      y: 0,</span><br><span class=\"line\">      width: that.data.canvasWidth,</span><br><span class=\"line\">      height: that.data.canvasHeight,</span><br><span class=\"line\">      canvasId: &#x27;share_canvas&#x27;,</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">        wx.saveImageToPhotosAlbum(&#123;</span><br><span class=\"line\">          filePath: res.tempFilePath,</span><br><span class=\"line\">          success(res) &#123;</span><br><span class=\"line\">            console.log(res);</span><br><span class=\"line\">            wx.showToast(&#123;</span><br><span class=\"line\">              title: &#x27;保存到相册成功&#x27;,</span><br><span class=\"line\">              duration: 1500,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          fail(res) &#123;</span><br><span class=\"line\">            console.log(res)</span><br><span class=\"line\">            wx.showToast(&#123;</span><br><span class=\"line\">              title: &#x27;保存到相册失败&#x27;,</span><br><span class=\"line\">              icon: &#x27;fail&#x27;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          complete(res) &#123;</span><br><span class=\"line\">            console.log(res)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h1><p>本着开源的精神，源码已经放在<code>Github</code>上，大家可以去上面查看具体代码。</p>\n<p><a href=\"https://github.com/HistoryZhang/SgsNoteBook\">https://github.com/HistoryZhang/SgsNoteBook</a></p>\n<p>如果对你有帮助的话，麻烦给个<code>Star</code>吧~</p>\n<p>点击阅读原文可以查看更好的代码格式~</p>"},{"title":"小飞鱼项目有感","date":"2017-09-27T15:36:00.000Z","_content":">小飞鱼是科大讯飞车载开发的一款智能行车助手，通过语音操作，让你在开车过程中解放双手，使你在开车过程中更加安全，体验更优。\n小飞鱼目前支持使用语音导航，打电话，听音乐、节目、电台，查询天气、股票，还支持对话闲聊，让你的旅途不再寂寞。\n\n整个项目涉及蓝牙、BLE、电话、高德导航以及媒体播放，在项目过程中遇到很多坑，后续会逐步介绍项目中遇到的问题。\n<!--more-->\n这里先在这里打个广告吧（微信文章直接长按识别二维码，或者可以点击底部阅读原文）。\n[iOS App下载地址](https://itunes.apple.com/us/app/%E5%B0%8F%E9%A3%9E%E9%B1%BC/id1207190161?mt=8)\n![iOS App下载地址](http://upload-images.jianshu.io/upload_images/606479-de8292a52cc9a2c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[设备购买地址](https://item.jd.com/16895582778.html)\n![设备购买地址](http://upload-images.jianshu.io/upload_images/606479-c26d5a8a702fb914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## [1. iOS拨打电话对话框问题解决](https://historyzhang.github.io/2017/09/28/iOS拨打电话对话框问题解决)\n","source":"_posts/小飞鱼项目有感.md","raw":"---\ntitle: 小飞鱼项目有感\ndate: 2017-09-27 23:36:00\ntags: [小飞鱼, 电话]\ncategories: 日记\n---\n>小飞鱼是科大讯飞车载开发的一款智能行车助手，通过语音操作，让你在开车过程中解放双手，使你在开车过程中更加安全，体验更优。\n小飞鱼目前支持使用语音导航，打电话，听音乐、节目、电台，查询天气、股票，还支持对话闲聊，让你的旅途不再寂寞。\n\n整个项目涉及蓝牙、BLE、电话、高德导航以及媒体播放，在项目过程中遇到很多坑，后续会逐步介绍项目中遇到的问题。\n<!--more-->\n这里先在这里打个广告吧（微信文章直接长按识别二维码，或者可以点击底部阅读原文）。\n[iOS App下载地址](https://itunes.apple.com/us/app/%E5%B0%8F%E9%A3%9E%E9%B1%BC/id1207190161?mt=8)\n![iOS App下载地址](http://upload-images.jianshu.io/upload_images/606479-de8292a52cc9a2c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[设备购买地址](https://item.jd.com/16895582778.html)\n![设备购买地址](http://upload-images.jianshu.io/upload_images/606479-c26d5a8a702fb914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## [1. iOS拨打电话对话框问题解决](https://historyzhang.github.io/2017/09/28/iOS拨打电话对话框问题解决)\n","slug":"小飞鱼项目有感","published":1,"updated":"2021-09-05T14:38:11.933Z","_id":"cksu5b15t004o8c205hsydcjw","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>小飞鱼是科大讯飞车载开发的一款智能行车助手，通过语音操作，让你在开车过程中解放双手，使你在开车过程中更加安全，体验更优。<br>小飞鱼目前支持使用语音导航，打电话，听音乐、节目、电台，查询天气、股票，还支持对话闲聊，让你的旅途不再寂寞。</p>\n</blockquote>\n<p>整个项目涉及蓝牙、BLE、电话、高德导航以及媒体播放，在项目过程中遇到很多坑，后续会逐步介绍项目中遇到的问题。</p>\n<span id=\"more\"></span>\n<p>这里先在这里打个广告吧（微信文章直接长按识别二维码，或者可以点击底部阅读原文）。<br><a href=\"https://itunes.apple.com/us/app/%E5%B0%8F%E9%A3%9E%E9%B1%BC/id1207190161?mt=8\">iOS App下载地址</a><br><img src=\"http://upload-images.jianshu.io/upload_images/606479-de8292a52cc9a2c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"iOS App下载地址\"></p>\n<p><a href=\"https://item.jd.com/16895582778.html\">设备购买地址</a><br><img src=\"http://upload-images.jianshu.io/upload_images/606479-c26d5a8a702fb914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设备购买地址\"></p>\n<h2 id=\"1-iOS拨打电话对话框问题解决\"><a href=\"#1-iOS拨打电话对话框问题解决\" class=\"headerlink\" title=\"1. iOS拨打电话对话框问题解决\"></a><a href=\"https://historyzhang.github.io/2017/09/28/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E5%AF%B9%E8%AF%9D%E6%A1%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\">1. iOS拨打电话对话框问题解决</a></h2>","site":{"data":{}},"excerpt":"<blockquote>\n<p>小飞鱼是科大讯飞车载开发的一款智能行车助手，通过语音操作，让你在开车过程中解放双手，使你在开车过程中更加安全，体验更优。<br>小飞鱼目前支持使用语音导航，打电话，听音乐、节目、电台，查询天气、股票，还支持对话闲聊，让你的旅途不再寂寞。</p>\n</blockquote>\n<p>整个项目涉及蓝牙、BLE、电话、高德导航以及媒体播放，在项目过程中遇到很多坑，后续会逐步介绍项目中遇到的问题。</p>","more":"<p>这里先在这里打个广告吧（微信文章直接长按识别二维码，或者可以点击底部阅读原文）。<br><a href=\"https://itunes.apple.com/us/app/%E5%B0%8F%E9%A3%9E%E9%B1%BC/id1207190161?mt=8\">iOS App下载地址</a><br><img src=\"http://upload-images.jianshu.io/upload_images/606479-de8292a52cc9a2c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"iOS App下载地址\"></p>\n<p><a href=\"https://item.jd.com/16895582778.html\">设备购买地址</a><br><img src=\"http://upload-images.jianshu.io/upload_images/606479-c26d5a8a702fb914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设备购买地址\"></p>\n<h2 id=\"1-iOS拨打电话对话框问题解决\"><a href=\"#1-iOS拨打电话对话框问题解决\" class=\"headerlink\" title=\"1. iOS拨打电话对话框问题解决\"></a><a href=\"https://historyzhang.github.io/2017/09/28/iOS%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E5%AF%B9%E8%AF%9D%E6%A1%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\">1. iOS拨打电话对话框问题解决</a></h2>"},{"title":"开源协议知多少","date":"2016-12-30T15:20:28.000Z","_content":"\n越来越多的公司和个人在`GitHub`上开源他的代码，这是一种精神。为那些开源的公司和个人致敬、点赞。\n当你在`GitHub`上创建一个项目的时候，就会让你选择一个`License`，像`MIT`，`BSD`，`GPL v2`等等。\n但是这么多开源协议，你真的知道怎么选择吗？当你用到一个开源库的时候，你真的看清他的开源协议吗？\n或许，目前来说，你并没有注意到这些。但是，随着国内对知识产权的越来越重视（从音乐就可窥见一斑），说不定哪一天你就会收到一封邮件。\n好吧，说了这么多，我们还是用一张图来读懂那些开源协议吧。\n<!--more-->\n乌克兰程序员 Paul Bagwell 画了一张分析图（下图为阮一峰汉化版）。\n\n图片来自文章[别以为把你的代码上传到开源中国就算是开源了！先选择一个合适的 License 吧](http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==&mid=2650069260&idx=2&sn=8822fbfddda7f81b979e41ca42ab4fdd&chksm=bedb026289ac8b7454449bc8caf6f2439df2c99603e5a916b8277c1205af32987535d269079e&mpshare=1&scene=23&srcid=1230XrysavNVmGdVJreRrs1H#rd)。\n\n![开源协议选择](http://upload-images.jianshu.io/upload_images/606479-974f8447a1b8e05a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/开源协议知多少.md","raw":"---\ntitle: 开源协议知多少\ndate: 2016-12-30 23:20:28\ncategories:\n\t- 日记\ntags: \n\t- 开源协议\n---\n\n越来越多的公司和个人在`GitHub`上开源他的代码，这是一种精神。为那些开源的公司和个人致敬、点赞。\n当你在`GitHub`上创建一个项目的时候，就会让你选择一个`License`，像`MIT`，`BSD`，`GPL v2`等等。\n但是这么多开源协议，你真的知道怎么选择吗？当你用到一个开源库的时候，你真的看清他的开源协议吗？\n或许，目前来说，你并没有注意到这些。但是，随着国内对知识产权的越来越重视（从音乐就可窥见一斑），说不定哪一天你就会收到一封邮件。\n好吧，说了这么多，我们还是用一张图来读懂那些开源协议吧。\n<!--more-->\n乌克兰程序员 Paul Bagwell 画了一张分析图（下图为阮一峰汉化版）。\n\n图片来自文章[别以为把你的代码上传到开源中国就算是开源了！先选择一个合适的 License 吧](http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==&mid=2650069260&idx=2&sn=8822fbfddda7f81b979e41ca42ab4fdd&chksm=bedb026289ac8b7454449bc8caf6f2439df2c99603e5a916b8277c1205af32987535d269079e&mpshare=1&scene=23&srcid=1230XrysavNVmGdVJreRrs1H#rd)。\n\n![开源协议选择](http://upload-images.jianshu.io/upload_images/606479-974f8447a1b8e05a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"开源协议知多少","published":1,"updated":"2021-09-05T14:38:18.005Z","_id":"cksu5b15u004r8c204cqz7b8g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>越来越多的公司和个人在<code>GitHub</code>上开源他的代码，这是一种精神。为那些开源的公司和个人致敬、点赞。<br>当你在<code>GitHub</code>上创建一个项目的时候，就会让你选择一个<code>License</code>，像<code>MIT</code>，<code>BSD</code>，<code>GPL v2</code>等等。<br>但是这么多开源协议，你真的知道怎么选择吗？当你用到一个开源库的时候，你真的看清他的开源协议吗？<br>或许，目前来说，你并没有注意到这些。但是，随着国内对知识产权的越来越重视（从音乐就可窥见一斑），说不定哪一天你就会收到一封邮件。<br>好吧，说了这么多，我们还是用一张图来读懂那些开源协议吧。</p>\n<span id=\"more\"></span>\n<p>乌克兰程序员 Paul Bagwell 画了一张分析图（下图为阮一峰汉化版）。</p>\n<p>图片来自文章<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==&mid=2650069260&idx=2&sn=8822fbfddda7f81b979e41ca42ab4fdd&chksm=bedb026289ac8b7454449bc8caf6f2439df2c99603e5a916b8277c1205af32987535d269079e&mpshare=1&scene=23&srcid=1230XrysavNVmGdVJreRrs1H#rd\">别以为把你的代码上传到开源中国就算是开源了！先选择一个合适的 License 吧</a>。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-974f8447a1b8e05a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开源协议选择\"></p>\n","site":{"data":{}},"excerpt":"<p>越来越多的公司和个人在<code>GitHub</code>上开源他的代码，这是一种精神。为那些开源的公司和个人致敬、点赞。<br>当你在<code>GitHub</code>上创建一个项目的时候，就会让你选择一个<code>License</code>，像<code>MIT</code>，<code>BSD</code>，<code>GPL v2</code>等等。<br>但是这么多开源协议，你真的知道怎么选择吗？当你用到一个开源库的时候，你真的看清他的开源协议吗？<br>或许，目前来说，你并没有注意到这些。但是，随着国内对知识产权的越来越重视（从音乐就可窥见一斑），说不定哪一天你就会收到一封邮件。<br>好吧，说了这么多，我们还是用一张图来读懂那些开源协议吧。</p>","more":"<p>乌克兰程序员 Paul Bagwell 画了一张分析图（下图为阮一峰汉化版）。</p>\n<p>图片来自文章<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==&mid=2650069260&idx=2&sn=8822fbfddda7f81b979e41ca42ab4fdd&chksm=bedb026289ac8b7454449bc8caf6f2439df2c99603e5a916b8277c1205af32987535d269079e&mpshare=1&scene=23&srcid=1230XrysavNVmGdVJreRrs1H#rd\">别以为把你的代码上传到开源中国就算是开源了！先选择一个合适的 License 吧</a>。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/606479-974f8447a1b8e05a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"开源协议选择\"></p>"},{"title":"引入三方库编译错误解决","date":"2014-07-27T06:10:28.000Z","_content":"\n# 前言\nCoding中不免要引入三方库,有时候会出现很多编译错误,在此收集一下.\n\n# 正文\n\n1.如下错误可在`Other Link Flags`添加`-licucore`解决\n<!--more--> \n\n```\nUndefined symbols for architecture i386:\n  \"_u_errorName\", referenced from:\n      _cm_rkl_NSExceptionForRegex in AGCommon\n      _cm_rkl_userInfoDictionary in AGCommon\n  \"_u_strlen\", referenced from:\n      _cm_rkl_userInfoDictionary in AGCommon\n  \"_uregex_appendReplacement\", referenced from:\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_appendTail\", referenced from:\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_clone\", referenced from:\n      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon\n  \"_uregex_close\", referenced from:\n      _cm_rkl_clearCachedRegex in AGCommon\n  \"_uregex_end\", referenced from:\n      _cm_rkl_performRegexOp in AGCommon\n      _cm_rkl_findRanges in AGCommon\n      _cm_rkl_search in AGCommon\n  \"_uregex_find\", referenced from:\n      _cm_rkl_search in AGCommon\n  \"_uregex_findNext\", referenced from:\n      _cm_rkl_search in AGCommon\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_groupCount\", referenced from:\n      _cm_rkl_getCachedRegex in AGCommon\n  \"_uregex_open\", referenced from:\n      _cm_rkl_getCachedRegex in AGCommon\n  \"_uregex_reset\", referenced from:\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_setText\", referenced from:\n      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon\n      _cm_rkl_performRegexOp in AGCommon\n      _cm_rkl_clearCachedRegexSetTo in AGCommon\n  \"_uregex_start\", referenced from:\n      _cm_rkl_performRegexOp in AGCommon\n      _cm_rkl_findRanges in AGCommon\n      _cm_rkl_search in AGCommon\n```","source":"_posts/引入三方库编译错误解决.markdown","raw":"---\ntitle: \"引入三方库编译错误解决\"\ndate: 2014-07-27 14:10:28 +0800\ntags: \n    - 编译\ncategories:\n    - iOS\n\n---\n\n# 前言\nCoding中不免要引入三方库,有时候会出现很多编译错误,在此收集一下.\n\n# 正文\n\n1.如下错误可在`Other Link Flags`添加`-licucore`解决\n<!--more--> \n\n```\nUndefined symbols for architecture i386:\n  \"_u_errorName\", referenced from:\n      _cm_rkl_NSExceptionForRegex in AGCommon\n      _cm_rkl_userInfoDictionary in AGCommon\n  \"_u_strlen\", referenced from:\n      _cm_rkl_userInfoDictionary in AGCommon\n  \"_uregex_appendReplacement\", referenced from:\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_appendTail\", referenced from:\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_clone\", referenced from:\n      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon\n  \"_uregex_close\", referenced from:\n      _cm_rkl_clearCachedRegex in AGCommon\n  \"_uregex_end\", referenced from:\n      _cm_rkl_performRegexOp in AGCommon\n      _cm_rkl_findRanges in AGCommon\n      _cm_rkl_search in AGCommon\n  \"_uregex_find\", referenced from:\n      _cm_rkl_search in AGCommon\n  \"_uregex_findNext\", referenced from:\n      _cm_rkl_search in AGCommon\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_groupCount\", referenced from:\n      _cm_rkl_getCachedRegex in AGCommon\n  \"_uregex_open\", referenced from:\n      _cm_rkl_getCachedRegex in AGCommon\n  \"_uregex_reset\", referenced from:\n      _cm_rkl_replaceAll in AGCommon\n  \"_uregex_setText\", referenced from:\n      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon\n      _cm_rkl_performRegexOp in AGCommon\n      _cm_rkl_clearCachedRegexSetTo in AGCommon\n  \"_uregex_start\", referenced from:\n      _cm_rkl_performRegexOp in AGCommon\n      _cm_rkl_findRanges in AGCommon\n      _cm_rkl_search in AGCommon\n```","slug":"引入三方库编译错误解决","published":1,"updated":"2021-08-27T13:34:42.828Z","_id":"cksu5b16d007k8c203a3a5hp7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Coding中不免要引入三方库,有时候会出现很多编译错误,在此收集一下.</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>1.如下错误可在<code>Other Link Flags</code>添加<code>-licucore</code>解决</p>\n<span id=\"more\"></span> \n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols for architecture i386:</span><br><span class=\"line\">  &quot;_u_errorName&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_NSExceptionForRegex in AGCommon</span><br><span class=\"line\">      _cm_rkl_userInfoDictionary in AGCommon</span><br><span class=\"line\">  &quot;_u_strlen&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_userInfoDictionary in AGCommon</span><br><span class=\"line\">  &quot;_uregex_appendReplacement&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_appendTail&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_clone&quot;, referenced from:</span><br><span class=\"line\">      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon</span><br><span class=\"line\">  &quot;_uregex_close&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_clearCachedRegex in AGCommon</span><br><span class=\"line\">  &quot;_uregex_end&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_performRegexOp in AGCommon</span><br><span class=\"line\">      _cm_rkl_findRanges in AGCommon</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br><span class=\"line\">  &quot;_uregex_find&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br><span class=\"line\">  &quot;_uregex_findNext&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_groupCount&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_getCachedRegex in AGCommon</span><br><span class=\"line\">  &quot;_uregex_open&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_getCachedRegex in AGCommon</span><br><span class=\"line\">  &quot;_uregex_reset&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_setText&quot;, referenced from:</span><br><span class=\"line\">      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon</span><br><span class=\"line\">      _cm_rkl_performRegexOp in AGCommon</span><br><span class=\"line\">      _cm_rkl_clearCachedRegexSetTo in AGCommon</span><br><span class=\"line\">  &quot;_uregex_start&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_performRegexOp in AGCommon</span><br><span class=\"line\">      _cm_rkl_findRanges in AGCommon</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Coding中不免要引入三方库,有时候会出现很多编译错误,在此收集一下.</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>1.如下错误可在<code>Other Link Flags</code>添加<code>-licucore</code>解决</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols for architecture i386:</span><br><span class=\"line\">  &quot;_u_errorName&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_NSExceptionForRegex in AGCommon</span><br><span class=\"line\">      _cm_rkl_userInfoDictionary in AGCommon</span><br><span class=\"line\">  &quot;_u_strlen&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_userInfoDictionary in AGCommon</span><br><span class=\"line\">  &quot;_uregex_appendReplacement&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_appendTail&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_clone&quot;, referenced from:</span><br><span class=\"line\">      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon</span><br><span class=\"line\">  &quot;_uregex_close&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_clearCachedRegex in AGCommon</span><br><span class=\"line\">  &quot;_uregex_end&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_performRegexOp in AGCommon</span><br><span class=\"line\">      _cm_rkl_findRanges in AGCommon</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br><span class=\"line\">  &quot;_uregex_find&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br><span class=\"line\">  &quot;_uregex_findNext&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_groupCount&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_getCachedRegex in AGCommon</span><br><span class=\"line\">  &quot;_uregex_open&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_getCachedRegex in AGCommon</span><br><span class=\"line\">  &quot;_uregex_reset&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_replaceAll in AGCommon</span><br><span class=\"line\">  &quot;_uregex_setText&quot;, referenced from:</span><br><span class=\"line\">      -[CMRKLBlockEnumerationHelper initWithRegex:options:string:range:error:] in AGCommon</span><br><span class=\"line\">      _cm_rkl_performRegexOp in AGCommon</span><br><span class=\"line\">      _cm_rkl_clearCachedRegexSetTo in AGCommon</span><br><span class=\"line\">  &quot;_uregex_start&quot;, referenced from:</span><br><span class=\"line\">      _cm_rkl_performRegexOp in AGCommon</span><br><span class=\"line\">      _cm_rkl_findRanges in AGCommon</span><br><span class=\"line\">      _cm_rkl_search in AGCommon</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"房贷个税一个都不能少","date":"2015-06-12T07:14:31.000Z","_content":"\n## 打个广告\n\n\n最近趁着稍闲,做了个APP,计算房贷和个税的.也不知道起个啥名字,暂时就叫 [综合计算器](https://itunes.apple.com/us/app/zong-he-ji-suan-qi-fang-dai/id995894882?l=zh&ls=1&mt=8).\n\n刚刚送上线.话说苹果审核真麻烦.又拖了我2个星期.\n\n如果有需要的话可以支持一下哦~\n<!--more-->\n当初做的时候也是处于懒得装两个APP,毕竟一个小功能,于是就有了这个综合版,顺便赚点外快.\n\n再来个二维码\n\n{% img /images/blog/calculate_app_qrcode.png %}\n\nps:\n\n1.如果你有好的命名可以发邮件给我哦~\n\n2.如果你想做安卓版也可以发邮件给我哦~\n\n3.如果你有其他想法也可以发邮件给我哦~\n\n下面是我的邮箱: [history_zq@163.com](mailto:history_zq@163.com)","source":"_posts/房贷个税一个都不能少.markdown","raw":"---\nlayout: post\ntitle: \"房贷个税一个都不能少\"\ndate: 2015-06-12 15:14:31 +0800\ncategories:\n\t- 日记\ntags: [计算器]\n\n---\n\n## 打个广告\n\n\n最近趁着稍闲,做了个APP,计算房贷和个税的.也不知道起个啥名字,暂时就叫 [综合计算器](https://itunes.apple.com/us/app/zong-he-ji-suan-qi-fang-dai/id995894882?l=zh&ls=1&mt=8).\n\n刚刚送上线.话说苹果审核真麻烦.又拖了我2个星期.\n\n如果有需要的话可以支持一下哦~\n<!--more-->\n当初做的时候也是处于懒得装两个APP,毕竟一个小功能,于是就有了这个综合版,顺便赚点外快.\n\n再来个二维码\n\n{% img /images/blog/calculate_app_qrcode.png %}\n\nps:\n\n1.如果你有好的命名可以发邮件给我哦~\n\n2.如果你想做安卓版也可以发邮件给我哦~\n\n3.如果你有其他想法也可以发邮件给我哦~\n\n下面是我的邮箱: [history_zq@163.com](mailto:history_zq@163.com)","slug":"房贷个税一个都不能少","published":1,"updated":"2021-09-05T14:38:40.532Z","_id":"cksu5b16e007l8c204l7b0se8","comments":1,"photos":[],"link":"","content":"<h2 id=\"打个广告\"><a href=\"#打个广告\" class=\"headerlink\" title=\"打个广告\"></a>打个广告</h2><p>最近趁着稍闲,做了个APP,计算房贷和个税的.也不知道起个啥名字,暂时就叫 <a href=\"https://itunes.apple.com/us/app/zong-he-ji-suan-qi-fang-dai/id995894882?l=zh&ls=1&mt=8\">综合计算器</a>.</p>\n<p>刚刚送上线.话说苹果审核真麻烦.又拖了我2个星期.</p>\n<p>如果有需要的话可以支持一下哦~</p>\n<span id=\"more\"></span>\n<p>当初做的时候也是处于懒得装两个APP,毕竟一个小功能,于是就有了这个综合版,顺便赚点外快.</p>\n<p>再来个二维码</p>\n<img src=\"/images/blog/calculate_app_qrcode.png\" class=\"\">\n\n<p>ps:</p>\n<p>1.如果你有好的命名可以发邮件给我哦~</p>\n<p>2.如果你想做安卓版也可以发邮件给我哦~</p>\n<p>3.如果你有其他想法也可以发邮件给我哦~</p>\n<p>下面是我的邮箱: <a href=\"mailto:history_zq@163.com\">history_zq@163.com</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"打个广告\"><a href=\"#打个广告\" class=\"headerlink\" title=\"打个广告\"></a>打个广告</h2><p>最近趁着稍闲,做了个APP,计算房贷和个税的.也不知道起个啥名字,暂时就叫 <a href=\"https://itunes.apple.com/us/app/zong-he-ji-suan-qi-fang-dai/id995894882?l=zh&ls=1&mt=8\">综合计算器</a>.</p>\n<p>刚刚送上线.话说苹果审核真麻烦.又拖了我2个星期.</p>\n<p>如果有需要的话可以支持一下哦~</p>","more":"<p>当初做的时候也是处于懒得装两个APP,毕竟一个小功能,于是就有了这个综合版,顺便赚点外快.</p>\n<p>再来个二维码</p>\n<img src=\"/images/blog/calculate_app_qrcode.png\" class=\"\">\n\n<p>ps:</p>\n<p>1.如果你有好的命名可以发邮件给我哦~</p>\n<p>2.如果你想做安卓版也可以发邮件给我哦~</p>\n<p>3.如果你有其他想法也可以发邮件给我哦~</p>\n<p>下面是我的邮箱: <a href=\"mailto:history_zq@163.com\">history_zq@163.com</a></p>"},{"title":"生活不止眼前的苟且还有诗和远方的田野","date":"2019-09-20T12:49:14.000Z","_content":"\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery.jpg %}\n\n> 图片来自 泼辣有图\n\n<!--more-->\n\n中华文化，源远流长。古诗词文化最早可以追溯到三千多年前的《诗经》。\n\n> 蒹葭苍苍，白露为霜。所谓伊人，在水一方。\n\n作为中华文化的瑰宝，我们应该传承下去。然而一方面，古诗词文集的庞大使之与我们有一定的距离；另一方面，在这个人人机不离手的时代，早已经将古典文集抛之脑后。\n\n为了让古诗词文化更好地适应移动互联网时代，更好的传承下去，项目作者整理了这个`repo`，让更多的人可以加入到古诗词文化的传播行列中。\n\n目前这个`repo`已经收录了唐宋两朝近`1.4万`古诗人, 接近`5.5万`首唐诗加`26万`首宋诗. 两宋时期`1564`位词人，`21050`首词，号称`最全中华古诗词数据库`。目前该项目已经有`20k+`的`star`，由此可见，热爱古诗词的人还是有很多的。\n\n项目中的古诗词数据最终是通过`JSON`格式分发，使得任何人可以更方便的使用，衍生出古诗词相关的产品，例如：古诗词网站、移动端应用、小程序等。目前通过该项目衍生的产品已经有如下：\n\n- [中文诗歌主页](https://shici.store)是一个基于浏览器的诗词网站， 包含唐诗三百首、宋词三百首等文集.\n- [animalize](https://github.com/animalize) **/** [QuanTangshi](https://github.com/animalize/QuanTangshi)  *离线全唐诗 Android*\n- [justdark](https://github.com/justdark) **/** [pytorch-poetry-gen](https://github.com/justdark/pytorch-poetry-gen)  *a char-RNN based on pytorch*\n- [Clover27](https://github.com/Clover27) **/** [ancient-Chinese-poem-generator](https://github.com/Clover27/ancient-Chinese-poem-generator)  *Ancient-Chinese-Poem-Generator*\n- [chinese-poetry](https://github.com/chinese-poetry) **/** [poetry-calendar](http://shici.store/poetry-calendar/)  *诗词周历*\n- [chenyuntc](https://github.com/chenyuntc) **/** [pytorch-book](https://github.com/chenyuntc/pytorch-book/blob/master/chapter9-神经网络写诗(CharRNN)/) *简体唐诗生成(char-RNN), 可生成藏头诗,自定义诗歌意境,前缀等*\n- [okcy1016](https://github.com/okcy1016) **/** [poetry-desktop](https://github.com/okcy1016/poetry-desktop/) *诗词桌面*\n- [huangjianke](https://github.com/huangjianke) **/** [weapp-poem](https://github.com/huangjianke/weapp-poem/) *诗词墨客 小程序版*\n\n如果你也对诗词感兴趣，也可以加入到该项目中，贡献一份自己的力量。\n\n> [https://github.com/chinese-poetry/chinese-poetry](https://github.com/chinese-poetry/chinese-poetry)\n\n如果你有一个好的产品想法，赶紧下载并使用该项目中的数据，动手实现你的产品，加入到传播诗词文化的行列中。\n\n如果你觉得自己只想赞助，那可以直接赞助给下方的二维码，留下你的联系方式，资金会直接进入`repo`作者的账户。\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/wechat.png %}\n\n最后，给大家展示一下作者整理的高频词分析图：\n\n#### 宋词高频词\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-2.png %}\n\n#### 唐诗高频词\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-3.png %}\n\n#### 宋诗高频词\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-4.png %}","source":"_posts/生活不止眼前的苟且还有诗和远方的田野.md","raw":"---\ntitle: 生活不止眼前的苟且还有诗和远方的田野\ndate: 2019-09-20 20:49:14\ntags:\n\t- 古诗\ncategories:\n\t- 开源\n\n---\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery.jpg %}\n\n> 图片来自 泼辣有图\n\n<!--more-->\n\n中华文化，源远流长。古诗词文化最早可以追溯到三千多年前的《诗经》。\n\n> 蒹葭苍苍，白露为霜。所谓伊人，在水一方。\n\n作为中华文化的瑰宝，我们应该传承下去。然而一方面，古诗词文集的庞大使之与我们有一定的距离；另一方面，在这个人人机不离手的时代，早已经将古典文集抛之脑后。\n\n为了让古诗词文化更好地适应移动互联网时代，更好的传承下去，项目作者整理了这个`repo`，让更多的人可以加入到古诗词文化的传播行列中。\n\n目前这个`repo`已经收录了唐宋两朝近`1.4万`古诗人, 接近`5.5万`首唐诗加`26万`首宋诗. 两宋时期`1564`位词人，`21050`首词，号称`最全中华古诗词数据库`。目前该项目已经有`20k+`的`star`，由此可见，热爱古诗词的人还是有很多的。\n\n项目中的古诗词数据最终是通过`JSON`格式分发，使得任何人可以更方便的使用，衍生出古诗词相关的产品，例如：古诗词网站、移动端应用、小程序等。目前通过该项目衍生的产品已经有如下：\n\n- [中文诗歌主页](https://shici.store)是一个基于浏览器的诗词网站， 包含唐诗三百首、宋词三百首等文集.\n- [animalize](https://github.com/animalize) **/** [QuanTangshi](https://github.com/animalize/QuanTangshi)  *离线全唐诗 Android*\n- [justdark](https://github.com/justdark) **/** [pytorch-poetry-gen](https://github.com/justdark/pytorch-poetry-gen)  *a char-RNN based on pytorch*\n- [Clover27](https://github.com/Clover27) **/** [ancient-Chinese-poem-generator](https://github.com/Clover27/ancient-Chinese-poem-generator)  *Ancient-Chinese-Poem-Generator*\n- [chinese-poetry](https://github.com/chinese-poetry) **/** [poetry-calendar](http://shici.store/poetry-calendar/)  *诗词周历*\n- [chenyuntc](https://github.com/chenyuntc) **/** [pytorch-book](https://github.com/chenyuntc/pytorch-book/blob/master/chapter9-神经网络写诗(CharRNN)/) *简体唐诗生成(char-RNN), 可生成藏头诗,自定义诗歌意境,前缀等*\n- [okcy1016](https://github.com/okcy1016) **/** [poetry-desktop](https://github.com/okcy1016/poetry-desktop/) *诗词桌面*\n- [huangjianke](https://github.com/huangjianke) **/** [weapp-poem](https://github.com/huangjianke/weapp-poem/) *诗词墨客 小程序版*\n\n如果你也对诗词感兴趣，也可以加入到该项目中，贡献一份自己的力量。\n\n> [https://github.com/chinese-poetry/chinese-poetry](https://github.com/chinese-poetry/chinese-poetry)\n\n如果你有一个好的产品想法，赶紧下载并使用该项目中的数据，动手实现你的产品，加入到传播诗词文化的行列中。\n\n如果你觉得自己只想赞助，那可以直接赞助给下方的二维码，留下你的联系方式，资金会直接进入`repo`作者的账户。\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/wechat.png %}\n\n最后，给大家展示一下作者整理的高频词分析图：\n\n#### 宋词高频词\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-2.png %}\n\n#### 唐诗高频词\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-3.png %}\n\n#### 宋诗高频词\n\n{% img /images/blog/生活不止眼前的苟且还有诗和远方的田野/potery-4.png %}","slug":"生活不止眼前的苟且还有诗和远方的田野","published":1,"updated":"2021-08-27T13:34:42.828Z","_id":"cksu5b16f007n8c2038nm5js1","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>中华文化，源远流长。古诗词文化最早可以追溯到三千多年前的《诗经》。</p>\n<blockquote>\n<p>蒹葭苍苍，白露为霜。所谓伊人，在水一方。</p>\n</blockquote>\n<p>作为中华文化的瑰宝，我们应该传承下去。然而一方面，古诗词文集的庞大使之与我们有一定的距离；另一方面，在这个人人机不离手的时代，早已经将古典文集抛之脑后。</p>\n<p>为了让古诗词文化更好地适应移动互联网时代，更好的传承下去，项目作者整理了这个<code>repo</code>，让更多的人可以加入到古诗词文化的传播行列中。</p>\n<p>目前这个<code>repo</code>已经收录了唐宋两朝近<code>1.4万</code>古诗人, 接近<code>5.5万</code>首唐诗加<code>26万</code>首宋诗. 两宋时期<code>1564</code>位词人，<code>21050</code>首词，号称<code>最全中华古诗词数据库</code>。目前该项目已经有<code>20k+</code>的<code>star</code>，由此可见，热爱古诗词的人还是有很多的。</p>\n<p>项目中的古诗词数据最终是通过<code>JSON</code>格式分发，使得任何人可以更方便的使用，衍生出古诗词相关的产品，例如：古诗词网站、移动端应用、小程序等。目前通过该项目衍生的产品已经有如下：</p>\n<ul>\n<li><a href=\"https://shici.store/\">中文诗歌主页</a>是一个基于浏览器的诗词网站， 包含唐诗三百首、宋词三百首等文集.</li>\n<li><a href=\"https://github.com/animalize\">animalize</a> <strong>/</strong> <a href=\"https://github.com/animalize/QuanTangshi\">QuanTangshi</a>  <em>离线全唐诗 Android</em></li>\n<li><a href=\"https://github.com/justdark\">justdark</a> <strong>/</strong> <a href=\"https://github.com/justdark/pytorch-poetry-gen\">pytorch-poetry-gen</a>  <em>a char-RNN based on pytorch</em></li>\n<li><a href=\"https://github.com/Clover27\">Clover27</a> <strong>/</strong> <a href=\"https://github.com/Clover27/ancient-Chinese-poem-generator\">ancient-Chinese-poem-generator</a>  <em>Ancient-Chinese-Poem-Generator</em></li>\n<li><a href=\"https://github.com/chinese-poetry\">chinese-poetry</a> <strong>/</strong> <a href=\"http://shici.store/poetry-calendar/\">poetry-calendar</a>  <em>诗词周历</em></li>\n<li><a href=\"https://github.com/chenyuntc\">chenyuntc</a> <strong>/</strong> <a href=\"https://github.com/chenyuntc/pytorch-book/blob/master/chapter9-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%86%99%E8%AF%97(CharRNN)/\">pytorch-book</a> <em>简体唐诗生成(char-RNN), 可生成藏头诗,自定义诗歌意境,前缀等</em></li>\n<li><a href=\"https://github.com/okcy1016\">okcy1016</a> <strong>/</strong> <a href=\"https://github.com/okcy1016/poetry-desktop/\">poetry-desktop</a> <em>诗词桌面</em></li>\n<li><a href=\"https://github.com/huangjianke\">huangjianke</a> <strong>/</strong> <a href=\"https://github.com/huangjianke/weapp-poem/\">weapp-poem</a> <em>诗词墨客 小程序版</em></li>\n</ul>\n<p>如果你也对诗词感兴趣，也可以加入到该项目中，贡献一份自己的力量。</p>\n<blockquote>\n<p><a href=\"https://github.com/chinese-poetry/chinese-poetry\">https://github.com/chinese-poetry/chinese-poetry</a></p>\n</blockquote>\n<p>如果你有一个好的产品想法，赶紧下载并使用该项目中的数据，动手实现你的产品，加入到传播诗词文化的行列中。</p>\n<p>如果你觉得自己只想赞助，那可以直接赞助给下方的二维码，留下你的联系方式，资金会直接进入<code>repo</code>作者的账户。</p>\n<img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/wechat.png\" class=\"\">\n\n<p>最后，给大家展示一下作者整理的高频词分析图：</p>\n<h4 id=\"宋词高频词\"><a href=\"#宋词高频词\" class=\"headerlink\" title=\"宋词高频词\"></a>宋词高频词</h4><img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery-2.png\" class=\"\">\n\n<h4 id=\"唐诗高频词\"><a href=\"#唐诗高频词\" class=\"headerlink\" title=\"唐诗高频词\"></a>唐诗高频词</h4><img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery-3.png\" class=\"\">\n\n<h4 id=\"宋诗高频词\"><a href=\"#宋诗高频词\" class=\"headerlink\" title=\"宋诗高频词\"></a>宋诗高频词</h4><img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery-4.png\" class=\"\">","site":{"data":{}},"excerpt":"<img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery.jpg\" class=\"\">\n\n<blockquote>\n<p>图片来自 泼辣有图</p>\n</blockquote>","more":"<p>中华文化，源远流长。古诗词文化最早可以追溯到三千多年前的《诗经》。</p>\n<blockquote>\n<p>蒹葭苍苍，白露为霜。所谓伊人，在水一方。</p>\n</blockquote>\n<p>作为中华文化的瑰宝，我们应该传承下去。然而一方面，古诗词文集的庞大使之与我们有一定的距离；另一方面，在这个人人机不离手的时代，早已经将古典文集抛之脑后。</p>\n<p>为了让古诗词文化更好地适应移动互联网时代，更好的传承下去，项目作者整理了这个<code>repo</code>，让更多的人可以加入到古诗词文化的传播行列中。</p>\n<p>目前这个<code>repo</code>已经收录了唐宋两朝近<code>1.4万</code>古诗人, 接近<code>5.5万</code>首唐诗加<code>26万</code>首宋诗. 两宋时期<code>1564</code>位词人，<code>21050</code>首词，号称<code>最全中华古诗词数据库</code>。目前该项目已经有<code>20k+</code>的<code>star</code>，由此可见，热爱古诗词的人还是有很多的。</p>\n<p>项目中的古诗词数据最终是通过<code>JSON</code>格式分发，使得任何人可以更方便的使用，衍生出古诗词相关的产品，例如：古诗词网站、移动端应用、小程序等。目前通过该项目衍生的产品已经有如下：</p>\n<ul>\n<li><a href=\"https://shici.store/\">中文诗歌主页</a>是一个基于浏览器的诗词网站， 包含唐诗三百首、宋词三百首等文集.</li>\n<li><a href=\"https://github.com/animalize\">animalize</a> <strong>/</strong> <a href=\"https://github.com/animalize/QuanTangshi\">QuanTangshi</a>  <em>离线全唐诗 Android</em></li>\n<li><a href=\"https://github.com/justdark\">justdark</a> <strong>/</strong> <a href=\"https://github.com/justdark/pytorch-poetry-gen\">pytorch-poetry-gen</a>  <em>a char-RNN based on pytorch</em></li>\n<li><a href=\"https://github.com/Clover27\">Clover27</a> <strong>/</strong> <a href=\"https://github.com/Clover27/ancient-Chinese-poem-generator\">ancient-Chinese-poem-generator</a>  <em>Ancient-Chinese-Poem-Generator</em></li>\n<li><a href=\"https://github.com/chinese-poetry\">chinese-poetry</a> <strong>/</strong> <a href=\"http://shici.store/poetry-calendar/\">poetry-calendar</a>  <em>诗词周历</em></li>\n<li><a href=\"https://github.com/chenyuntc\">chenyuntc</a> <strong>/</strong> <a href=\"https://github.com/chenyuntc/pytorch-book/blob/master/chapter9-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%86%99%E8%AF%97(CharRNN)/\">pytorch-book</a> <em>简体唐诗生成(char-RNN), 可生成藏头诗,自定义诗歌意境,前缀等</em></li>\n<li><a href=\"https://github.com/okcy1016\">okcy1016</a> <strong>/</strong> <a href=\"https://github.com/okcy1016/poetry-desktop/\">poetry-desktop</a> <em>诗词桌面</em></li>\n<li><a href=\"https://github.com/huangjianke\">huangjianke</a> <strong>/</strong> <a href=\"https://github.com/huangjianke/weapp-poem/\">weapp-poem</a> <em>诗词墨客 小程序版</em></li>\n</ul>\n<p>如果你也对诗词感兴趣，也可以加入到该项目中，贡献一份自己的力量。</p>\n<blockquote>\n<p><a href=\"https://github.com/chinese-poetry/chinese-poetry\">https://github.com/chinese-poetry/chinese-poetry</a></p>\n</blockquote>\n<p>如果你有一个好的产品想法，赶紧下载并使用该项目中的数据，动手实现你的产品，加入到传播诗词文化的行列中。</p>\n<p>如果你觉得自己只想赞助，那可以直接赞助给下方的二维码，留下你的联系方式，资金会直接进入<code>repo</code>作者的账户。</p>\n<img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/wechat.png\" class=\"\">\n\n<p>最后，给大家展示一下作者整理的高频词分析图：</p>\n<h4 id=\"宋词高频词\"><a href=\"#宋词高频词\" class=\"headerlink\" title=\"宋词高频词\"></a>宋词高频词</h4><img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery-2.png\" class=\"\">\n\n<h4 id=\"唐诗高频词\"><a href=\"#唐诗高频词\" class=\"headerlink\" title=\"唐诗高频词\"></a>唐诗高频词</h4><img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery-3.png\" class=\"\">\n\n<h4 id=\"宋诗高频词\"><a href=\"#宋诗高频词\" class=\"headerlink\" title=\"宋诗高频词\"></a>宋诗高频词</h4><img src=\"/images/blog/%E7%94%9F%E6%B4%BB%E4%B8%8D%E6%AD%A2%E7%9C%BC%E5%89%8D%E7%9A%84%E8%8B%9F%E4%B8%94%E8%BF%98%E6%9C%89%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9%E7%9A%84%E7%94%B0%E9%87%8E/potery-4.png\" class=\"\">"},{"title":"Tinker集成踩坑指北","date":"2021-08-24T10:06:56.000Z","_content":"\n## 错误一\n> com.tencent.tinker.android.dex.DexException: Unexpected magic: [100, 101, 120, 10, 48, 51, 56, 0] \n\n这个错误坑了好久，查了官方各种`issue`，试了`N`种方法，都不行。\n如果你也一直找不到原因，试一下修改`minSdkVersion<=20`。\n\n以下是相关配置供参考：\n```\ndependencies {\n        classpath 'com.android.tools.build:gradle:3.4.0'\n        classpath \"com.tencent.bugly:tinker-support:1.1.5\"\n    }\n```\n\n<!--more-->\n\n## 错误二\n> 补丁文件缺失必需字段：Created-Time、Created-By、YaPatchType、VersionName、VersionCode、From、To，请检查补丁文件后重试！\n\n注意，需要上传的`patch`包是`outputs->patch->release->patch_signed_7zip.apk`。 如果你传的是`outputs->tinkerPatch`目录下的就会报这个错。\n\n如果你没有生成`patch`包，检查你使用的打包脚本，应该是`gradle`中的`tinker-support->buildTinkerPatchRelease`脚本。用了`tinker->buildTinkerPatchRelease`就不会生成`patch`目录。","source":"_posts/Tinker集成踩坑指北.md","raw":"---\ntitle: Tinker集成踩坑指北\ndate: 2021-08-24 18:06:56\ncategories: \n  - Android\ntags:\n  - Tinker\n---\n\n## 错误一\n> com.tencent.tinker.android.dex.DexException: Unexpected magic: [100, 101, 120, 10, 48, 51, 56, 0] \n\n这个错误坑了好久，查了官方各种`issue`，试了`N`种方法，都不行。\n如果你也一直找不到原因，试一下修改`minSdkVersion<=20`。\n\n以下是相关配置供参考：\n```\ndependencies {\n        classpath 'com.android.tools.build:gradle:3.4.0'\n        classpath \"com.tencent.bugly:tinker-support:1.1.5\"\n    }\n```\n\n<!--more-->\n\n## 错误二\n> 补丁文件缺失必需字段：Created-Time、Created-By、YaPatchType、VersionName、VersionCode、From、To，请检查补丁文件后重试！\n\n注意，需要上传的`patch`包是`outputs->patch->release->patch_signed_7zip.apk`。 如果你传的是`outputs->tinkerPatch`目录下的就会报这个错。\n\n如果你没有生成`patch`包，检查你使用的打包脚本，应该是`gradle`中的`tinker-support->buildTinkerPatchRelease`脚本。用了`tinker->buildTinkerPatchRelease`就不会生成`patch`目录。","slug":"Tinker集成踩坑指北","published":1,"updated":"2021-08-28T13:06:01.979Z","_id":"cksu6ytia000050204fvm3y2h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"错误一\"><a href=\"#错误一\" class=\"headerlink\" title=\"错误一\"></a>错误一</h2><blockquote>\n<p>com.tencent.tinker.android.dex.DexException: Unexpected magic: [100, 101, 120, 10, 48, 51, 56, 0] </p>\n</blockquote>\n<p>这个错误坑了好久，查了官方各种<code>issue</code>，试了<code>N</code>种方法，都不行。<br>如果你也一直找不到原因，试一下修改<code>minSdkVersion&lt;=20</code>。</p>\n<p>以下是相关配置供参考：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">        classpath &#x27;com.android.tools.build:gradle:3.4.0&#x27;</span><br><span class=\"line\">        classpath &quot;com.tencent.bugly:tinker-support:1.1.5&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"错误二\"><a href=\"#错误二\" class=\"headerlink\" title=\"错误二\"></a>错误二</h2><blockquote>\n<p>补丁文件缺失必需字段：Created-Time、Created-By、YaPatchType、VersionName、VersionCode、From、To，请检查补丁文件后重试！</p>\n</blockquote>\n<p>注意，需要上传的<code>patch</code>包是<code>outputs-&gt;patch-&gt;release-&gt;patch_signed_7zip.apk</code>。 如果你传的是<code>outputs-&gt;tinkerPatch</code>目录下的就会报这个错。</p>\n<p>如果你没有生成<code>patch</code>包，检查你使用的打包脚本，应该是<code>gradle</code>中的<code>tinker-support-&gt;buildTinkerPatchRelease</code>脚本。用了<code>tinker-&gt;buildTinkerPatchRelease</code>就不会生成<code>patch</code>目录。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"错误一\"><a href=\"#错误一\" class=\"headerlink\" title=\"错误一\"></a>错误一</h2><blockquote>\n<p>com.tencent.tinker.android.dex.DexException: Unexpected magic: [100, 101, 120, 10, 48, 51, 56, 0] </p>\n</blockquote>\n<p>这个错误坑了好久，查了官方各种<code>issue</code>，试了<code>N</code>种方法，都不行。<br>如果你也一直找不到原因，试一下修改<code>minSdkVersion&lt;=20</code>。</p>\n<p>以下是相关配置供参考：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">        classpath &#x27;com.android.tools.build:gradle:3.4.0&#x27;</span><br><span class=\"line\">        classpath &quot;com.tencent.bugly:tinker-support:1.1.5&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"错误二\"><a href=\"#错误二\" class=\"headerlink\" title=\"错误二\"></a>错误二</h2><blockquote>\n<p>补丁文件缺失必需字段：Created-Time、Created-By、YaPatchType、VersionName、VersionCode、From、To，请检查补丁文件后重试！</p>\n</blockquote>\n<p>注意，需要上传的<code>patch</code>包是<code>outputs-&gt;patch-&gt;release-&gt;patch_signed_7zip.apk</code>。 如果你传的是<code>outputs-&gt;tinkerPatch</code>目录下的就会报这个错。</p>\n<p>如果你没有生成<code>patch</code>包，检查你使用的打包脚本，应该是<code>gradle</code>中的<code>tinker-support-&gt;buildTinkerPatchRelease</code>脚本。用了<code>tinker-&gt;buildTinkerPatchRelease</code>就不会生成<code>patch</code>目录。</p>"},{"title":"一次解决依赖库冲突的历程","date":"2021-08-26T10:15:44.000Z","_content":"\n早起可以看到不一样的风景，很美的朝霞\n\n{% img /images/blog/猿创日记/210826/朝霞.jpg %}\n\n<p align=\"right\">盗图自朋友圈 @Sarah</p>\n\n最近在一次`gradle`同步后，突然编译报错，看一下错误原因，是引用库冲突了，截取信息如下。\n\n```\n> 1 exception was raised by workers:\n  java.lang.RuntimeException: Duplicate class net.lingala.zip4j.core.HeaderReader found in modules classes.jar (com.tsing.croods.components:croods-cmpt-zip:1.3.8) and zip4j-1.3.2.jar (net.lingala.zip4j:zip4j:1.3.2)\n```\n从上面的信息可以看出来，是引用`net.lingala.zip4j:zip4j`冲突了。\n\n针对这种情况我们可以在`gradle`中`implementation`时使用`exclude`关键词来排除`net.lingala.zip4j:zip4j` ，但是第一步需要知道到底是哪个库引用到这个库了。\n\n项目中引用的库很多，不可能人工一个一个去排查，好在`gradle`有为我们提供了这样的指令来查看依赖库。\n\n<!--more-->\n\n以下指令就是来查找项目中哪些库有依赖到`net.lingala.zip4j:zip4j`。\n```\n ./gradlew :app:dependencyInsight --configuration debugCompileClasspath --dependency net.lingala.zip4j:zip4j\n ```\n 输入指令回车后就会得到以下信息：\n \n```\nnet.lingala.zip4j:zip4j:1.3.2\n   variant \"compile\" [\n      org.gradle.status                                            = release (not requested)\n      org.gradle.usage                                             = java-api\n      org.gradle.category                                          = library (not requested)\n\n      Requested attributes not found in the selected variant:\n         com.android.build.api.attributes.BuildTypeAttr               = debug\n         com.android.build.gradle.internal.dependency.AndroidTypeAttr = Aar\n   ]\n   Selection reasons:\n      - By constraint : debugRuntimeClasspath uses version 1.3.2\n\nnet.lingala.zip4j:zip4j:{strictly 1.3.2} -> 1.3.2\n\\--- debugCompileClasspath\n\nnet.lingala.zip4j:zip4j:1.3.2\n\\--- com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT:20210825.112636-153\n     \\--- debugCompileClasspath\n```\n从上面的信息就很直观的发现是`com.tsing.syncdata:syncdata`这个库有依赖`net.lingala.zip4j:zip4j`。那我们就可以使用`exclude`关键词了。具体如下：\n\n```\nimplementation('com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT', {\n    exclude group: 'net.lingala.zip4j', module: 'zip4j'\n})\n```\n\n> PS：\n> * 如果你想查看所有的依赖树，则需要使用`dependencies`指令：\n`./gradlew :app:dependencies --configuration debugCompileClasspath`\n> * 指令前的`:app`是你的`module`名\n> * `configuration` 参数用于指定 `variant`，例如你还可以传入 `releaseCompileClasspath`","source":"_posts/一次解决依赖库冲突的历程.md","raw":"---\ntitle: 一次解决依赖库冲突的历程\ndate: 2021-08-26 18:15:44\ncategories:\n    - Android\ntags: [冲突]\n---\n\n早起可以看到不一样的风景，很美的朝霞\n\n{% img /images/blog/猿创日记/210826/朝霞.jpg %}\n\n<p align=\"right\">盗图自朋友圈 @Sarah</p>\n\n最近在一次`gradle`同步后，突然编译报错，看一下错误原因，是引用库冲突了，截取信息如下。\n\n```\n> 1 exception was raised by workers:\n  java.lang.RuntimeException: Duplicate class net.lingala.zip4j.core.HeaderReader found in modules classes.jar (com.tsing.croods.components:croods-cmpt-zip:1.3.8) and zip4j-1.3.2.jar (net.lingala.zip4j:zip4j:1.3.2)\n```\n从上面的信息可以看出来，是引用`net.lingala.zip4j:zip4j`冲突了。\n\n针对这种情况我们可以在`gradle`中`implementation`时使用`exclude`关键词来排除`net.lingala.zip4j:zip4j` ，但是第一步需要知道到底是哪个库引用到这个库了。\n\n项目中引用的库很多，不可能人工一个一个去排查，好在`gradle`有为我们提供了这样的指令来查看依赖库。\n\n<!--more-->\n\n以下指令就是来查找项目中哪些库有依赖到`net.lingala.zip4j:zip4j`。\n```\n ./gradlew :app:dependencyInsight --configuration debugCompileClasspath --dependency net.lingala.zip4j:zip4j\n ```\n 输入指令回车后就会得到以下信息：\n \n```\nnet.lingala.zip4j:zip4j:1.3.2\n   variant \"compile\" [\n      org.gradle.status                                            = release (not requested)\n      org.gradle.usage                                             = java-api\n      org.gradle.category                                          = library (not requested)\n\n      Requested attributes not found in the selected variant:\n         com.android.build.api.attributes.BuildTypeAttr               = debug\n         com.android.build.gradle.internal.dependency.AndroidTypeAttr = Aar\n   ]\n   Selection reasons:\n      - By constraint : debugRuntimeClasspath uses version 1.3.2\n\nnet.lingala.zip4j:zip4j:{strictly 1.3.2} -> 1.3.2\n\\--- debugCompileClasspath\n\nnet.lingala.zip4j:zip4j:1.3.2\n\\--- com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT:20210825.112636-153\n     \\--- debugCompileClasspath\n```\n从上面的信息就很直观的发现是`com.tsing.syncdata:syncdata`这个库有依赖`net.lingala.zip4j:zip4j`。那我们就可以使用`exclude`关键词了。具体如下：\n\n```\nimplementation('com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT', {\n    exclude group: 'net.lingala.zip4j', module: 'zip4j'\n})\n```\n\n> PS：\n> * 如果你想查看所有的依赖树，则需要使用`dependencies`指令：\n`./gradlew :app:dependencies --configuration debugCompileClasspath`\n> * 指令前的`:app`是你的`module`名\n> * `configuration` 参数用于指定 `variant`，例如你还可以传入 `releaseCompileClasspath`","slug":"一次解决依赖库冲突的历程","published":1,"updated":"2021-09-05T14:36:47.648Z","_id":"cksu7bit000025820emp99xoz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>早起可以看到不一样的风景，很美的朝霞</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210826/%E6%9C%9D%E9%9C%9E.jpg\" class=\"\">\n\n<p align=\"right\">盗图自朋友圈 @Sarah</p>\n\n<p>最近在一次<code>gradle</code>同步后，突然编译报错，看一下错误原因，是引用库冲突了，截取信息如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 1 exception was raised by workers:</span><br><span class=\"line\">  java.lang.RuntimeException: Duplicate class net.lingala.zip4j.core.HeaderReader found in modules classes.jar (com.tsing.croods.components:croods-cmpt-zip:1.3.8) and zip4j-1.3.2.jar (net.lingala.zip4j:zip4j:1.3.2)</span><br></pre></td></tr></table></figure>\n<p>从上面的信息可以看出来，是引用<code>net.lingala.zip4j:zip4j</code>冲突了。</p>\n<p>针对这种情况我们可以在<code>gradle</code>中<code>implementation</code>时使用<code>exclude</code>关键词来排除<code>net.lingala.zip4j:zip4j</code> ，但是第一步需要知道到底是哪个库引用到这个库了。</p>\n<p>项目中引用的库很多，不可能人工一个一个去排查，好在<code>gradle</code>有为我们提供了这样的指令来查看依赖库。</p>\n<span id=\"more\"></span>\n\n<p>以下指令就是来查找项目中哪些库有依赖到<code>net.lingala.zip4j:zip4j</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew :app:dependencyInsight --configuration debugCompileClasspath --dependency net.lingala.zip4j:zip4j</span><br></pre></td></tr></table></figure>\n<p> 输入指令回车后就会得到以下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.lingala.zip4j:zip4j:1.3.2</span><br><span class=\"line\">   variant &quot;compile&quot; [</span><br><span class=\"line\">      org.gradle.status                                            = release (not requested)</span><br><span class=\"line\">      org.gradle.usage                                             = java-api</span><br><span class=\"line\">      org.gradle.category                                          = library (not requested)</span><br><span class=\"line\"></span><br><span class=\"line\">      Requested attributes not found in the selected variant:</span><br><span class=\"line\">         com.android.build.api.attributes.BuildTypeAttr               = debug</span><br><span class=\"line\">         com.android.build.gradle.internal.dependency.AndroidTypeAttr = Aar</span><br><span class=\"line\">   ]</span><br><span class=\"line\">   Selection reasons:</span><br><span class=\"line\">      - By constraint : debugRuntimeClasspath uses version 1.3.2</span><br><span class=\"line\"></span><br><span class=\"line\">net.lingala.zip4j:zip4j:&#123;strictly 1.3.2&#125; -&gt; 1.3.2</span><br><span class=\"line\">\\--- debugCompileClasspath</span><br><span class=\"line\"></span><br><span class=\"line\">net.lingala.zip4j:zip4j:1.3.2</span><br><span class=\"line\">\\--- com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT:20210825.112636-153</span><br><span class=\"line\">     \\--- debugCompileClasspath</span><br></pre></td></tr></table></figure>\n<p>从上面的信息就很直观的发现是<code>com.tsing.syncdata:syncdata</code>这个库有依赖<code>net.lingala.zip4j:zip4j</code>。那我们就可以使用<code>exclude</code>关键词了。具体如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(&#x27;com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT&#x27;, &#123;</span><br><span class=\"line\">    exclude group: &#x27;net.lingala.zip4j&#x27;, module: &#x27;zip4j&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：</p>\n<ul>\n<li>如果你想查看所有的依赖树，则需要使用<code>dependencies</code>指令：<br><code>./gradlew :app:dependencies --configuration debugCompileClasspath</code></li>\n<li>指令前的<code>:app</code>是你的<code>module</code>名</li>\n<li><code>configuration</code> 参数用于指定 <code>variant</code>，例如你还可以传入 <code>releaseCompileClasspath</code></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>早起可以看到不一样的风景，很美的朝霞</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210826/%E6%9C%9D%E9%9C%9E.jpg\" class=\"\">\n\n<p align=\"right\">盗图自朋友圈 @Sarah</p>\n\n<p>最近在一次<code>gradle</code>同步后，突然编译报错，看一下错误原因，是引用库冲突了，截取信息如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 1 exception was raised by workers:</span><br><span class=\"line\">  java.lang.RuntimeException: Duplicate class net.lingala.zip4j.core.HeaderReader found in modules classes.jar (com.tsing.croods.components:croods-cmpt-zip:1.3.8) and zip4j-1.3.2.jar (net.lingala.zip4j:zip4j:1.3.2)</span><br></pre></td></tr></table></figure>\n<p>从上面的信息可以看出来，是引用<code>net.lingala.zip4j:zip4j</code>冲突了。</p>\n<p>针对这种情况我们可以在<code>gradle</code>中<code>implementation</code>时使用<code>exclude</code>关键词来排除<code>net.lingala.zip4j:zip4j</code> ，但是第一步需要知道到底是哪个库引用到这个库了。</p>\n<p>项目中引用的库很多，不可能人工一个一个去排查，好在<code>gradle</code>有为我们提供了这样的指令来查看依赖库。</p>","more":"<p>以下指令就是来查找项目中哪些库有依赖到<code>net.lingala.zip4j:zip4j</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gradlew :app:dependencyInsight --configuration debugCompileClasspath --dependency net.lingala.zip4j:zip4j</span><br></pre></td></tr></table></figure>\n<p> 输入指令回车后就会得到以下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.lingala.zip4j:zip4j:1.3.2</span><br><span class=\"line\">   variant &quot;compile&quot; [</span><br><span class=\"line\">      org.gradle.status                                            = release (not requested)</span><br><span class=\"line\">      org.gradle.usage                                             = java-api</span><br><span class=\"line\">      org.gradle.category                                          = library (not requested)</span><br><span class=\"line\"></span><br><span class=\"line\">      Requested attributes not found in the selected variant:</span><br><span class=\"line\">         com.android.build.api.attributes.BuildTypeAttr               = debug</span><br><span class=\"line\">         com.android.build.gradle.internal.dependency.AndroidTypeAttr = Aar</span><br><span class=\"line\">   ]</span><br><span class=\"line\">   Selection reasons:</span><br><span class=\"line\">      - By constraint : debugRuntimeClasspath uses version 1.3.2</span><br><span class=\"line\"></span><br><span class=\"line\">net.lingala.zip4j:zip4j:&#123;strictly 1.3.2&#125; -&gt; 1.3.2</span><br><span class=\"line\">\\--- debugCompileClasspath</span><br><span class=\"line\"></span><br><span class=\"line\">net.lingala.zip4j:zip4j:1.3.2</span><br><span class=\"line\">\\--- com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT:20210825.112636-153</span><br><span class=\"line\">     \\--- debugCompileClasspath</span><br></pre></td></tr></table></figure>\n<p>从上面的信息就很直观的发现是<code>com.tsing.syncdata:syncdata</code>这个库有依赖<code>net.lingala.zip4j:zip4j</code>。那我们就可以使用<code>exclude</code>关键词了。具体如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(&#x27;com.tsing.syncdata:syncdata:1.0.1.1-SNAPSHOT&#x27;, &#123;</span><br><span class=\"line\">    exclude group: &#x27;net.lingala.zip4j&#x27;, module: &#x27;zip4j&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：</p>\n<ul>\n<li>如果你想查看所有的依赖树，则需要使用<code>dependencies</code>指令：<br><code>./gradlew :app:dependencies --configuration debugCompileClasspath</code></li>\n<li>指令前的<code>:app</code>是你的<code>module</code>名</li>\n<li><code>configuration</code> 参数用于指定 <code>variant</code>，例如你还可以传入 <code>releaseCompileClasspath</code></li>\n</ul>\n</blockquote>"},{"title":"支付宝里的钱要取出来吗","date":"2021-08-28T14:04:13.000Z","_content":"\n{% img /images/blog/猿创日记/210828/花.jpg %}\n<p align=\"right\">盗图自朋友圈@workcalm</p>\n\n## 理性吃瓜\n\n娱乐圈这几个月可谓是一瓜接一瓜，自从吴某某被曝出来后，就没有消停过。\n\n央媒评吴某某：“做艺先做人，做人先做德”。艺人是有一堆的粉丝，甚至有一些心智尚未成熟的青少年，他们的一举一动都将传递给粉丝。前几天沸沸扬扬的赵丽颖王一博事件，今天双方工作室也被约谈。正确引导粉丝行为，是艺人的社会责任。日趋严重的“伪娘文化”也遭痛批，“伪娘文化”应该说是外来文化的糟粕。\n\n国家已经开始整顿这个满是疮痍的行业以及扭曲的饭圈文化了，而不是仅仅口头说说了。\n\n<!--more-->\n\n### 广电总局发文限制已入外籍艺人在大陆发展\n\n“赚着中国人的钱，砸着中国人的锅”，这样的人不在少数。如今广总终于发文整治，也可谓是大快人心，民心所向。毕竟理性的爱国民众还是多数。\n\n### 清理劣迹艺人节目及内容\n\n那个“小燕子”这下真的一去不复返了，全网除名、下架，连百科都没放过。而她只是广总说的劣迹艺人中的一员，霍某、吴某某、郑某、范某某皆在其列。\n\n是该提高一下人民群众的精神文化需求了。\n\n### 阿里系上热搜\n\n另一个有意思的是，昨天阿里系突然冲上热搜，前十中竟然有五条是关于阿里系的。热搜榜第一竟然是”支付宝里的钱要取出来吗“，吓得我赶紧去支付宝看了一下，幸好余额为零，看来我多虑了。\n\n{% img /images/blog/猿创日记/210828/热搜.png %}\n\n同阿里以及娱乐圈密不可分的高某某也没能逃过一劫。\n\n> ***都某某功不可没。***\n\n## 《我的1919》和《东京审判》\n\n剧荒的小伙伴可以去看一下这两部电影，很压抑。明明都是作为战胜国，却举步维艰。\n\n《我的1919》讲述的是中国外交才子顾维钧作为中国代表团一员参加“巴黎和会”（分赃大会，与“和”根本不沾边）的经历。最终北洋政府外交失败，德国在山东的权益全部移交给日本。\n\n《东京审判》介绍了以梅汝璈为首的中国法官在大国利益主导的势力挤压下，奋力突围，终于将以东条英机为首的七个战犯送上绞刑架的历程。\n\n> ***好在第二部的结局稍慰人心。***\n","source":"_posts/支付宝里的钱要取出来吗.md","raw":"---\ntitle: 支付宝里的钱要取出来吗\ndate: 2021-08-28 22:04:13\ntags: ['日记', '吃瓜']\ncategories: 日记\n---\n\n{% img /images/blog/猿创日记/210828/花.jpg %}\n<p align=\"right\">盗图自朋友圈@workcalm</p>\n\n## 理性吃瓜\n\n娱乐圈这几个月可谓是一瓜接一瓜，自从吴某某被曝出来后，就没有消停过。\n\n央媒评吴某某：“做艺先做人，做人先做德”。艺人是有一堆的粉丝，甚至有一些心智尚未成熟的青少年，他们的一举一动都将传递给粉丝。前几天沸沸扬扬的赵丽颖王一博事件，今天双方工作室也被约谈。正确引导粉丝行为，是艺人的社会责任。日趋严重的“伪娘文化”也遭痛批，“伪娘文化”应该说是外来文化的糟粕。\n\n国家已经开始整顿这个满是疮痍的行业以及扭曲的饭圈文化了，而不是仅仅口头说说了。\n\n<!--more-->\n\n### 广电总局发文限制已入外籍艺人在大陆发展\n\n“赚着中国人的钱，砸着中国人的锅”，这样的人不在少数。如今广总终于发文整治，也可谓是大快人心，民心所向。毕竟理性的爱国民众还是多数。\n\n### 清理劣迹艺人节目及内容\n\n那个“小燕子”这下真的一去不复返了，全网除名、下架，连百科都没放过。而她只是广总说的劣迹艺人中的一员，霍某、吴某某、郑某、范某某皆在其列。\n\n是该提高一下人民群众的精神文化需求了。\n\n### 阿里系上热搜\n\n另一个有意思的是，昨天阿里系突然冲上热搜，前十中竟然有五条是关于阿里系的。热搜榜第一竟然是”支付宝里的钱要取出来吗“，吓得我赶紧去支付宝看了一下，幸好余额为零，看来我多虑了。\n\n{% img /images/blog/猿创日记/210828/热搜.png %}\n\n同阿里以及娱乐圈密不可分的高某某也没能逃过一劫。\n\n> ***都某某功不可没。***\n\n## 《我的1919》和《东京审判》\n\n剧荒的小伙伴可以去看一下这两部电影，很压抑。明明都是作为战胜国，却举步维艰。\n\n《我的1919》讲述的是中国外交才子顾维钧作为中国代表团一员参加“巴黎和会”（分赃大会，与“和”根本不沾边）的经历。最终北洋政府外交失败，德国在山东的权益全部移交给日本。\n\n《东京审判》介绍了以梅汝璈为首的中国法官在大国利益主导的势力挤压下，奋力突围，终于将以东条英机为首的七个战犯送上绞刑架的历程。\n\n> ***好在第二部的结局稍慰人心。***\n","slug":"支付宝里的钱要取出来吗","published":1,"updated":"2021-08-31T01:25:49.230Z","_id":"cksvv513i000bqg925bv782pj","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210828/%E8%8A%B1.jpg\" class=\"\">\n<p align=\"right\">盗图自朋友圈@workcalm</p>\n\n<h2 id=\"理性吃瓜\"><a href=\"#理性吃瓜\" class=\"headerlink\" title=\"理性吃瓜\"></a>理性吃瓜</h2><p>娱乐圈这几个月可谓是一瓜接一瓜，自从吴某某被曝出来后，就没有消停过。</p>\n<p>央媒评吴某某：“做艺先做人，做人先做德”。艺人是有一堆的粉丝，甚至有一些心智尚未成熟的青少年，他们的一举一动都将传递给粉丝。前几天沸沸扬扬的赵丽颖王一博事件，今天双方工作室也被约谈。正确引导粉丝行为，是艺人的社会责任。日趋严重的“伪娘文化”也遭痛批，“伪娘文化”应该说是外来文化的糟粕。</p>\n<p>国家已经开始整顿这个满是疮痍的行业以及扭曲的饭圈文化了，而不是仅仅口头说说了。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"广电总局发文限制已入外籍艺人在大陆发展\"><a href=\"#广电总局发文限制已入外籍艺人在大陆发展\" class=\"headerlink\" title=\"广电总局发文限制已入外籍艺人在大陆发展\"></a>广电总局发文限制已入外籍艺人在大陆发展</h3><p>“赚着中国人的钱，砸着中国人的锅”，这样的人不在少数。如今广总终于发文整治，也可谓是大快人心，民心所向。毕竟理性的爱国民众还是多数。</p>\n<h3 id=\"清理劣迹艺人节目及内容\"><a href=\"#清理劣迹艺人节目及内容\" class=\"headerlink\" title=\"清理劣迹艺人节目及内容\"></a>清理劣迹艺人节目及内容</h3><p>那个“小燕子”这下真的一去不复返了，全网除名、下架，连百科都没放过。而她只是广总说的劣迹艺人中的一员，霍某、吴某某、郑某、范某某皆在其列。</p>\n<p>是该提高一下人民群众的精神文化需求了。</p>\n<h3 id=\"阿里系上热搜\"><a href=\"#阿里系上热搜\" class=\"headerlink\" title=\"阿里系上热搜\"></a>阿里系上热搜</h3><p>另一个有意思的是，昨天阿里系突然冲上热搜，前十中竟然有五条是关于阿里系的。热搜榜第一竟然是”支付宝里的钱要取出来吗“，吓得我赶紧去支付宝看了一下，幸好余额为零，看来我多虑了。</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210828/%E7%83%AD%E6%90%9C.png\" class=\"\">\n\n<p>同阿里以及娱乐圈密不可分的高某某也没能逃过一劫。</p>\n<blockquote>\n<p><em><strong>都某某功不可没。</strong></em></p>\n</blockquote>\n<h2 id=\"《我的1919》和《东京审判》\"><a href=\"#《我的1919》和《东京审判》\" class=\"headerlink\" title=\"《我的1919》和《东京审判》\"></a>《我的1919》和《东京审判》</h2><p>剧荒的小伙伴可以去看一下这两部电影，很压抑。明明都是作为战胜国，却举步维艰。</p>\n<p>《我的1919》讲述的是中国外交才子顾维钧作为中国代表团一员参加“巴黎和会”（分赃大会，与“和”根本不沾边）的经历。最终北洋政府外交失败，德国在山东的权益全部移交给日本。</p>\n<p>《东京审判》介绍了以梅汝璈为首的中国法官在大国利益主导的势力挤压下，奋力突围，终于将以东条英机为首的七个战犯送上绞刑架的历程。</p>\n<blockquote>\n<p><em><strong>好在第二部的结局稍慰人心。</strong></em></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210828/%E8%8A%B1.jpg\" class=\"\">\n<p align=\"right\">盗图自朋友圈@workcalm</p>\n\n<h2 id=\"理性吃瓜\"><a href=\"#理性吃瓜\" class=\"headerlink\" title=\"理性吃瓜\"></a>理性吃瓜</h2><p>娱乐圈这几个月可谓是一瓜接一瓜，自从吴某某被曝出来后，就没有消停过。</p>\n<p>央媒评吴某某：“做艺先做人，做人先做德”。艺人是有一堆的粉丝，甚至有一些心智尚未成熟的青少年，他们的一举一动都将传递给粉丝。前几天沸沸扬扬的赵丽颖王一博事件，今天双方工作室也被约谈。正确引导粉丝行为，是艺人的社会责任。日趋严重的“伪娘文化”也遭痛批，“伪娘文化”应该说是外来文化的糟粕。</p>\n<p>国家已经开始整顿这个满是疮痍的行业以及扭曲的饭圈文化了，而不是仅仅口头说说了。</p>","more":"<h3 id=\"广电总局发文限制已入外籍艺人在大陆发展\"><a href=\"#广电总局发文限制已入外籍艺人在大陆发展\" class=\"headerlink\" title=\"广电总局发文限制已入外籍艺人在大陆发展\"></a>广电总局发文限制已入外籍艺人在大陆发展</h3><p>“赚着中国人的钱，砸着中国人的锅”，这样的人不在少数。如今广总终于发文整治，也可谓是大快人心，民心所向。毕竟理性的爱国民众还是多数。</p>\n<h3 id=\"清理劣迹艺人节目及内容\"><a href=\"#清理劣迹艺人节目及内容\" class=\"headerlink\" title=\"清理劣迹艺人节目及内容\"></a>清理劣迹艺人节目及内容</h3><p>那个“小燕子”这下真的一去不复返了，全网除名、下架，连百科都没放过。而她只是广总说的劣迹艺人中的一员，霍某、吴某某、郑某、范某某皆在其列。</p>\n<p>是该提高一下人民群众的精神文化需求了。</p>\n<h3 id=\"阿里系上热搜\"><a href=\"#阿里系上热搜\" class=\"headerlink\" title=\"阿里系上热搜\"></a>阿里系上热搜</h3><p>另一个有意思的是，昨天阿里系突然冲上热搜，前十中竟然有五条是关于阿里系的。热搜榜第一竟然是”支付宝里的钱要取出来吗“，吓得我赶紧去支付宝看了一下，幸好余额为零，看来我多虑了。</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210828/%E7%83%AD%E6%90%9C.png\" class=\"\">\n\n<p>同阿里以及娱乐圈密不可分的高某某也没能逃过一劫。</p>\n<blockquote>\n<p><em><strong>都某某功不可没。</strong></em></p>\n</blockquote>\n<h2 id=\"《我的1919》和《东京审判》\"><a href=\"#《我的1919》和《东京审判》\" class=\"headerlink\" title=\"《我的1919》和《东京审判》\"></a>《我的1919》和《东京审判》</h2><p>剧荒的小伙伴可以去看一下这两部电影，很压抑。明明都是作为战胜国，却举步维艰。</p>\n<p>《我的1919》讲述的是中国外交才子顾维钧作为中国代表团一员参加“巴黎和会”（分赃大会，与“和”根本不沾边）的经历。最终北洋政府外交失败，德国在山东的权益全部移交给日本。</p>\n<p>《东京审判》介绍了以梅汝璈为首的中国法官在大国利益主导的势力挤压下，奋力突围，终于将以东条英机为首的七个战犯送上绞刑架的历程。</p>\n<blockquote>\n<p><em><strong>好在第二部的结局稍慰人心。</strong></em></p>\n</blockquote>"},{"title":"杭州共同富裕新示范","date":"2021-08-22T10:09:26.000Z","_content":"\n## 吃瓜\n\n杭州市委书记的事情还在发酵，微信群、抖音都在疯传各种消息。\n\n从抖音评论看，最多的是震惊，因为前一天还在出席会议。从侧面也可以看见这次打虎之前的保密性做的很好。\n\n第一天看到新闻的时候，阿里巴巴也从脑海里一闪而过，毕竟也在杭州。\n\n接下来的几天互联网真的开始充斥着各种消息，就在刚刚还看到一篇公众号文章，最后提到了一句蚂蚁金服。\n\n接着很快就收到了同花顺的推送消息，蚂蚁金服发布了声明。相信国家会证明所有人的清白。\n\n<!--more-->\n\n{% img /images/blog/猿创日记/210822/蚂蚁金服.jpg %}\n\n然而，这一切又和我有什么关系呢？静静的吃瓜~\n\n## 蜘蛛纸牌\n周末抽空又将 `蜘蛛纸牌 for macOS` `Release` 了一个版本，新增了些许功能：\n\n> 1. 优化了游戏背景图\n> 2. 新增快捷方式开始牌局，你可以使用⌘+1/2/3分别开始新的一局初级/中级/高级\n> 3. 新增版本更新检测\n\n自己在测试的时候发现，4色的好难，后来想想，很有可能原本就是无解的牌局。\n\n所以准备收集一下解局成功的牌局上传到服务器，然后新增以可解牌局开始游戏。\n\n点击[这里](https://github.com/KelvinQQ/SpiderCard)可以去`GitHub`下载最新版本。","source":"_posts/杭州共同富裕新示范.md","raw":"---\ntitle: 杭州共同富裕新示范\ndate: 2021-08-22 18:09:26\ntags: ['日记', '吃瓜']\ncategories: 日记\n---\n\n## 吃瓜\n\n杭州市委书记的事情还在发酵，微信群、抖音都在疯传各种消息。\n\n从抖音评论看，最多的是震惊，因为前一天还在出席会议。从侧面也可以看见这次打虎之前的保密性做的很好。\n\n第一天看到新闻的时候，阿里巴巴也从脑海里一闪而过，毕竟也在杭州。\n\n接下来的几天互联网真的开始充斥着各种消息，就在刚刚还看到一篇公众号文章，最后提到了一句蚂蚁金服。\n\n接着很快就收到了同花顺的推送消息，蚂蚁金服发布了声明。相信国家会证明所有人的清白。\n\n<!--more-->\n\n{% img /images/blog/猿创日记/210822/蚂蚁金服.jpg %}\n\n然而，这一切又和我有什么关系呢？静静的吃瓜~\n\n## 蜘蛛纸牌\n周末抽空又将 `蜘蛛纸牌 for macOS` `Release` 了一个版本，新增了些许功能：\n\n> 1. 优化了游戏背景图\n> 2. 新增快捷方式开始牌局，你可以使用⌘+1/2/3分别开始新的一局初级/中级/高级\n> 3. 新增版本更新检测\n\n自己在测试的时候发现，4色的好难，后来想想，很有可能原本就是无解的牌局。\n\n所以准备收集一下解局成功的牌局上传到服务器，然后新增以可解牌局开始游戏。\n\n点击[这里](https://github.com/KelvinQQ/SpiderCard)可以去`GitHub`下载最新版本。","slug":"杭州共同富裕新示范","published":1,"updated":"2021-08-31T01:25:49.231Z","_id":"cksvv6qo7000fqg92ctjn6jxz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"吃瓜\"><a href=\"#吃瓜\" class=\"headerlink\" title=\"吃瓜\"></a>吃瓜</h2><p>杭州市委书记的事情还在发酵，微信群、抖音都在疯传各种消息。</p>\n<p>从抖音评论看，最多的是震惊，因为前一天还在出席会议。从侧面也可以看见这次打虎之前的保密性做的很好。</p>\n<p>第一天看到新闻的时候，阿里巴巴也从脑海里一闪而过，毕竟也在杭州。</p>\n<p>接下来的几天互联网真的开始充斥着各种消息，就在刚刚还看到一篇公众号文章，最后提到了一句蚂蚁金服。</p>\n<p>接着很快就收到了同花顺的推送消息，蚂蚁金服发布了声明。相信国家会证明所有人的清白。</p>\n<span id=\"more\"></span>\n\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210822/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D.jpg\" class=\"\">\n\n<p>然而，这一切又和我有什么关系呢？静静的吃瓜~</p>\n<h2 id=\"蜘蛛纸牌\"><a href=\"#蜘蛛纸牌\" class=\"headerlink\" title=\"蜘蛛纸牌\"></a>蜘蛛纸牌</h2><p>周末抽空又将 <code>蜘蛛纸牌 for macOS</code> <code>Release</code> 了一个版本，新增了些许功能：</p>\n<blockquote>\n<ol>\n<li>优化了游戏背景图</li>\n<li>新增快捷方式开始牌局，你可以使用⌘+1/2/3分别开始新的一局初级/中级/高级</li>\n<li>新增版本更新检测</li>\n</ol>\n</blockquote>\n<p>自己在测试的时候发现，4色的好难，后来想想，很有可能原本就是无解的牌局。</p>\n<p>所以准备收集一下解局成功的牌局上传到服务器，然后新增以可解牌局开始游戏。</p>\n<p>点击<a href=\"https://github.com/KelvinQQ/SpiderCard\">这里</a>可以去<code>GitHub</code>下载最新版本。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"吃瓜\"><a href=\"#吃瓜\" class=\"headerlink\" title=\"吃瓜\"></a>吃瓜</h2><p>杭州市委书记的事情还在发酵，微信群、抖音都在疯传各种消息。</p>\n<p>从抖音评论看，最多的是震惊，因为前一天还在出席会议。从侧面也可以看见这次打虎之前的保密性做的很好。</p>\n<p>第一天看到新闻的时候，阿里巴巴也从脑海里一闪而过，毕竟也在杭州。</p>\n<p>接下来的几天互联网真的开始充斥着各种消息，就在刚刚还看到一篇公众号文章，最后提到了一句蚂蚁金服。</p>\n<p>接着很快就收到了同花顺的推送消息，蚂蚁金服发布了声明。相信国家会证明所有人的清白。</p>","more":"<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210822/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D.jpg\" class=\"\">\n\n<p>然而，这一切又和我有什么关系呢？静静的吃瓜~</p>\n<h2 id=\"蜘蛛纸牌\"><a href=\"#蜘蛛纸牌\" class=\"headerlink\" title=\"蜘蛛纸牌\"></a>蜘蛛纸牌</h2><p>周末抽空又将 <code>蜘蛛纸牌 for macOS</code> <code>Release</code> 了一个版本，新增了些许功能：</p>\n<blockquote>\n<ol>\n<li>优化了游戏背景图</li>\n<li>新增快捷方式开始牌局，你可以使用⌘+1/2/3分别开始新的一局初级/中级/高级</li>\n<li>新增版本更新检测</li>\n</ol>\n</blockquote>\n<p>自己在测试的时候发现，4色的好难，后来想想，很有可能原本就是无解的牌局。</p>\n<p>所以准备收集一下解局成功的牌局上传到服务器，然后新增以可解牌局开始游戏。</p>\n<p>点击<a href=\"https://github.com/KelvinQQ/SpiderCard\">这里</a>可以去<code>GitHub</code>下载最新版本。</p>"},{"title":"一次上线翻车让我总结出以下几点血的教训","date":"2021-08-31T01:21:07.000Z","_content":"\n\n从17点准备上线，直到1点最终上线成功，整整耗费8个小时。通过这次上线翻车，总结了以下几点血的教训。\n\n## 基础设施差\n导致上线失败的有两点，但是真的是很基础的东西。\n\n### 环境配置混乱\n客户端在做渠道环境配置时混乱，基础网络能力采用了一个动态域名配置项，某一个业务模块又采用了另一个动态域名配置项。在研发过程中始终使用测试环境域名，没有按照配置项来去正确引用域名。等到版本发布后才发现引用域名错误，慌慌张张修改配置，战战兢兢回想是否还存在其他配置项。\n\n这个低级错误完全可以避免：\n\n<!--more-->\n\n> 1. 项目最开始就需要定义好环境配置，避免后期研发还需要自己去随意定义环境配置。\n> 2. 研发实现过程中不要随意留尾巴，按照项目中公共配置去新增逻辑\n> 3. 合理组织 `code review`，及时发现低级错误。\n\n### 后台环境准备不足\n\n我认为的后台环境至少需要准备4个：\n> 1. 开发：用于后台研发开发时使用\n> 2. 测试：用于客户端开发时使用\n> 3. 准上线：用户客户端测试时使用\n> 4. 线上：用户线上用户使用\n\n而项目中仅仅只有2个环境，开发和线上。在上线之前，测试仅仅在开发环境上验证过，这样很难测试充分，尤其是一些数据导致的错误。而准上线环境最重要的一点就是，尽量保证和线上环境数据一致。\n\n## 测试验证验证不足\n\n刚刚提到，测试在上线前竟然只在开发环境验证，这就是严重的验证不充分。\n\n另一点，测试之前一直使用 `debug` 版本测试，从未使用 `release` 版本测试。众所周知，`debug` 和 `release` 有着很大的区别，甚至有些测试称 `debug` 包为 `野包（手动狗头）`。翻车是迟早的事情（我竟然有点幸灾乐祸）。\n\n## 上线工作准备不充分\n\n18点的时候，竟然还在重新申请一个第三方库的 `appId` 去临时替换，当时我就预感要翻车。果然还是没能逃过一劫，来来回回弄了个把小时，还是回退到之前测试稳定的 `appId`。\n\n开始验证的时候发现，资源下载太慢，`5G` 的资源，下载需要个把小时，项目和产品开始疯狂吐槽，一致决定资源暂时不上线。又是一通研发修改、测试验证。\n\n嗯，这很敏捷。\n\n{% img /images/blog/猿创日记/210831/蓝天白云.jpeg %}\n\n<p align=\"right\">盗图自朋友圈 @Q694263030</p>","source":"_posts/一次上线翻车让我总结出以下几点血的教训.md","raw":"---\ntitle: 一次上线翻车让我总结出以下几点血的教训\ndate: 2021-08-31 09:21:07\ntags: [上线]\ncategories: [日记]\n---\n\n\n从17点准备上线，直到1点最终上线成功，整整耗费8个小时。通过这次上线翻车，总结了以下几点血的教训。\n\n## 基础设施差\n导致上线失败的有两点，但是真的是很基础的东西。\n\n### 环境配置混乱\n客户端在做渠道环境配置时混乱，基础网络能力采用了一个动态域名配置项，某一个业务模块又采用了另一个动态域名配置项。在研发过程中始终使用测试环境域名，没有按照配置项来去正确引用域名。等到版本发布后才发现引用域名错误，慌慌张张修改配置，战战兢兢回想是否还存在其他配置项。\n\n这个低级错误完全可以避免：\n\n<!--more-->\n\n> 1. 项目最开始就需要定义好环境配置，避免后期研发还需要自己去随意定义环境配置。\n> 2. 研发实现过程中不要随意留尾巴，按照项目中公共配置去新增逻辑\n> 3. 合理组织 `code review`，及时发现低级错误。\n\n### 后台环境准备不足\n\n我认为的后台环境至少需要准备4个：\n> 1. 开发：用于后台研发开发时使用\n> 2. 测试：用于客户端开发时使用\n> 3. 准上线：用户客户端测试时使用\n> 4. 线上：用户线上用户使用\n\n而项目中仅仅只有2个环境，开发和线上。在上线之前，测试仅仅在开发环境上验证过，这样很难测试充分，尤其是一些数据导致的错误。而准上线环境最重要的一点就是，尽量保证和线上环境数据一致。\n\n## 测试验证验证不足\n\n刚刚提到，测试在上线前竟然只在开发环境验证，这就是严重的验证不充分。\n\n另一点，测试之前一直使用 `debug` 版本测试，从未使用 `release` 版本测试。众所周知，`debug` 和 `release` 有着很大的区别，甚至有些测试称 `debug` 包为 `野包（手动狗头）`。翻车是迟早的事情（我竟然有点幸灾乐祸）。\n\n## 上线工作准备不充分\n\n18点的时候，竟然还在重新申请一个第三方库的 `appId` 去临时替换，当时我就预感要翻车。果然还是没能逃过一劫，来来回回弄了个把小时，还是回退到之前测试稳定的 `appId`。\n\n开始验证的时候发现，资源下载太慢，`5G` 的资源，下载需要个把小时，项目和产品开始疯狂吐槽，一致决定资源暂时不上线。又是一通研发修改、测试验证。\n\n嗯，这很敏捷。\n\n{% img /images/blog/猿创日记/210831/蓝天白云.jpeg %}\n\n<p align=\"right\">盗图自朋友圈 @Q694263030</p>","slug":"一次上线翻车让我总结出以下几点血的教训","published":1,"updated":"2021-09-05T14:36:27.416Z","_id":"cksze3iaw00005j921vp1g066","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从17点准备上线，直到1点最终上线成功，整整耗费8个小时。通过这次上线翻车，总结了以下几点血的教训。</p>\n<h2 id=\"基础设施差\"><a href=\"#基础设施差\" class=\"headerlink\" title=\"基础设施差\"></a>基础设施差</h2><p>导致上线失败的有两点，但是真的是很基础的东西。</p>\n<h3 id=\"环境配置混乱\"><a href=\"#环境配置混乱\" class=\"headerlink\" title=\"环境配置混乱\"></a>环境配置混乱</h3><p>客户端在做渠道环境配置时混乱，基础网络能力采用了一个动态域名配置项，某一个业务模块又采用了另一个动态域名配置项。在研发过程中始终使用测试环境域名，没有按照配置项来去正确引用域名。等到版本发布后才发现引用域名错误，慌慌张张修改配置，战战兢兢回想是否还存在其他配置项。</p>\n<p>这个低级错误完全可以避免：</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<ol>\n<li>项目最开始就需要定义好环境配置，避免后期研发还需要自己去随意定义环境配置。</li>\n<li>研发实现过程中不要随意留尾巴，按照项目中公共配置去新增逻辑</li>\n<li>合理组织 <code>code review</code>，及时发现低级错误。</li>\n</ol>\n</blockquote>\n<h3 id=\"后台环境准备不足\"><a href=\"#后台环境准备不足\" class=\"headerlink\" title=\"后台环境准备不足\"></a>后台环境准备不足</h3><p>我认为的后台环境至少需要准备4个：</p>\n<blockquote>\n<ol>\n<li>开发：用于后台研发开发时使用</li>\n<li>测试：用于客户端开发时使用</li>\n<li>准上线：用户客户端测试时使用</li>\n<li>线上：用户线上用户使用</li>\n</ol>\n</blockquote>\n<p>而项目中仅仅只有2个环境，开发和线上。在上线之前，测试仅仅在开发环境上验证过，这样很难测试充分，尤其是一些数据导致的错误。而准上线环境最重要的一点就是，尽量保证和线上环境数据一致。</p>\n<h2 id=\"测试验证验证不足\"><a href=\"#测试验证验证不足\" class=\"headerlink\" title=\"测试验证验证不足\"></a>测试验证验证不足</h2><p>刚刚提到，测试在上线前竟然只在开发环境验证，这就是严重的验证不充分。</p>\n<p>另一点，测试之前一直使用 <code>debug</code> 版本测试，从未使用 <code>release</code> 版本测试。众所周知，<code>debug</code> 和 <code>release</code> 有着很大的区别，甚至有些测试称 <code>debug</code> 包为 <code>野包（手动狗头）</code>。翻车是迟早的事情（我竟然有点幸灾乐祸）。</p>\n<h2 id=\"上线工作准备不充分\"><a href=\"#上线工作准备不充分\" class=\"headerlink\" title=\"上线工作准备不充分\"></a>上线工作准备不充分</h2><p>18点的时候，竟然还在重新申请一个第三方库的 <code>appId</code> 去临时替换，当时我就预感要翻车。果然还是没能逃过一劫，来来回回弄了个把小时，还是回退到之前测试稳定的 <code>appId</code>。</p>\n<p>开始验证的时候发现，资源下载太慢，<code>5G</code> 的资源，下载需要个把小时，项目和产品开始疯狂吐槽，一致决定资源暂时不上线。又是一通研发修改、测试验证。</p>\n<p>嗯，这很敏捷。</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210831/%E8%93%9D%E5%A4%A9%E7%99%BD%E4%BA%91.jpeg\" class=\"\">\n\n<p align=\"right\">盗图自朋友圈 @Q694263030</p>","site":{"data":{}},"excerpt":"<p>从17点准备上线，直到1点最终上线成功，整整耗费8个小时。通过这次上线翻车，总结了以下几点血的教训。</p>\n<h2 id=\"基础设施差\"><a href=\"#基础设施差\" class=\"headerlink\" title=\"基础设施差\"></a>基础设施差</h2><p>导致上线失败的有两点，但是真的是很基础的东西。</p>\n<h3 id=\"环境配置混乱\"><a href=\"#环境配置混乱\" class=\"headerlink\" title=\"环境配置混乱\"></a>环境配置混乱</h3><p>客户端在做渠道环境配置时混乱，基础网络能力采用了一个动态域名配置项，某一个业务模块又采用了另一个动态域名配置项。在研发过程中始终使用测试环境域名，没有按照配置项来去正确引用域名。等到版本发布后才发现引用域名错误，慌慌张张修改配置，战战兢兢回想是否还存在其他配置项。</p>\n<p>这个低级错误完全可以避免：</p>","more":"<blockquote>\n<ol>\n<li>项目最开始就需要定义好环境配置，避免后期研发还需要自己去随意定义环境配置。</li>\n<li>研发实现过程中不要随意留尾巴，按照项目中公共配置去新增逻辑</li>\n<li>合理组织 <code>code review</code>，及时发现低级错误。</li>\n</ol>\n</blockquote>\n<h3 id=\"后台环境准备不足\"><a href=\"#后台环境准备不足\" class=\"headerlink\" title=\"后台环境准备不足\"></a>后台环境准备不足</h3><p>我认为的后台环境至少需要准备4个：</p>\n<blockquote>\n<ol>\n<li>开发：用于后台研发开发时使用</li>\n<li>测试：用于客户端开发时使用</li>\n<li>准上线：用户客户端测试时使用</li>\n<li>线上：用户线上用户使用</li>\n</ol>\n</blockquote>\n<p>而项目中仅仅只有2个环境，开发和线上。在上线之前，测试仅仅在开发环境上验证过，这样很难测试充分，尤其是一些数据导致的错误。而准上线环境最重要的一点就是，尽量保证和线上环境数据一致。</p>\n<h2 id=\"测试验证验证不足\"><a href=\"#测试验证验证不足\" class=\"headerlink\" title=\"测试验证验证不足\"></a>测试验证验证不足</h2><p>刚刚提到，测试在上线前竟然只在开发环境验证，这就是严重的验证不充分。</p>\n<p>另一点，测试之前一直使用 <code>debug</code> 版本测试，从未使用 <code>release</code> 版本测试。众所周知，<code>debug</code> 和 <code>release</code> 有着很大的区别，甚至有些测试称 <code>debug</code> 包为 <code>野包（手动狗头）</code>。翻车是迟早的事情（我竟然有点幸灾乐祸）。</p>\n<h2 id=\"上线工作准备不充分\"><a href=\"#上线工作准备不充分\" class=\"headerlink\" title=\"上线工作准备不充分\"></a>上线工作准备不充分</h2><p>18点的时候，竟然还在重新申请一个第三方库的 <code>appId</code> 去临时替换，当时我就预感要翻车。果然还是没能逃过一劫，来来回回弄了个把小时，还是回退到之前测试稳定的 <code>appId</code>。</p>\n<p>开始验证的时候发现，资源下载太慢，<code>5G</code> 的资源，下载需要个把小时，项目和产品开始疯狂吐槽，一致决定资源暂时不上线。又是一通研发修改、测试验证。</p>\n<p>嗯，这很敏捷。</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210831/%E8%93%9D%E5%A4%A9%E7%99%BD%E4%BA%91.jpeg\" class=\"\">\n\n<p align=\"right\">盗图自朋友圈 @Q694263030</p>"},{"title":"聊个最近体检的事情（一）","date":"2021-09-05T14:27:07.000Z","_content":"\n最近公司组织了年度体检，鉴于过去几年都在安医二附院体检的，又可以携带家属，所以今年还是选择了安医二附院。\n\n早早的过去排队，接受一年一度的大考，毕竟上了年纪，心中还是很忐忑。\n\n其他的项目要么就是很基础的，例如血压身高，口腔眼科，一般不会有什么大问题，或者有没有自己心里应该也有数；要么就是当场出不来结果的，例如血常规，肝功能等等。\n\n彩超可以当场知道结果，并且周围的同事体检大多数也都会在这里翻车。例如：脂肪肝。\n\n等到自己的号，进去，开始。\n\n<!--more-->\n\n“脂肪肝”，医生随口说道，应该是见怪不怪吧。\n\n“脾大，13mm”。一脸懵逼，因为过去几年都没有检查出这个问题，也没听过有同事讨论过这个。\n\n“左肾囊肿”。\n\n听到这里，心都凉了一截。好在早就买了大病医疗险，不过就是一直没配置重疾险（太贵了）。心中一直默念，别再有啥其他的了，回头我复查都得好几天。\n\n下床排队的时候，立马掏出手机开始百度。先看看“脾大”是个什么鬼。百度虽然没能告诉我导致“脾大”的病因，却让我了解到，“脾大”最严重是切除脾。鬼鬼，幸好我接受过九年义务教育，心理素质尚可。\n\n更恐怖的是百度的关联搜索词，我先是点了一下“脾大有什么危害”，随手翻几页，我想我还是上图吧。\n\n{% img /images/blog/猿创日记/210905/百度搜索.jpeg %}\n\n\n难怪最近抖音总是刷到，医生最怕的几种病患。默默的关上了浏览器，换到知乎，那个内容全靠编的平台。总之一句话，病因多种多样，找到病因才能对症下药。看样子跑不了去门诊复查了。\n\n“脂肪肝”就不用查了，大家都很熟了。我是18年体检有轻度脂肪肝，19年和20年体检都没有了。今年应该是伙食太好，又缺少运动。所以还是启动跑步计划吧。\n\n“肾囊肿”，感觉应该是个小问题，没当一回事，简单搜了一下，似乎印证了我的猜想。一般“13mm”可以不用管，超过“40mm”就要注意了。\n\n回家和媳妇报备了一下，准备抽空约个号去看一下“脾大”。说到“左肾囊肿”，媳妇若有所思，好像之前有同事就是这个病，后来突然很严重，还在住院治疗，心中咯噔一下，不会这么巧中招吧。翻一下聊天记录，一模一样。本来准备下周再去复查的，乖乖立马挂号，还是怕死。\n\n鉴于二附院的一些情况，换了个离家近的安医一附院高新分院。先是去泌尿科看“左肾囊肿”，忐忐忑忑。医生说，“你这个太小了，一般小于40mm并且没有尿血、长期腰痛的情况，我们都不需要针对处理，很多人都有这个囊肿，是个良性的。一般定期复查，比如一年一查，不出现快速变大就不用管。反而你要去看看这个脾大是什么情况”。两级反转？\n\n我想我还是三个月半年查一次吧。\n\n转手挂个普外科的号，漫长的等待是煎熬的，毕竟心里总是想着：“会不会要切除？脾大能活多久？”\n\n“你在哪家医院体检的？我们复查一下，有些医院体检结果可能不对。”\n\n“安医二附院。”\n\n“我们还是复查一下吧。”\n\n“你过来做彩超是什么问题？”\n\n“体检报告说：脾大。”\n\n“你这脾一点也不大啊，你在哪家医院体检的？”\n\n我还能说什么呢。随口还是问了句：“我的脂肪肝是轻度还是中度？”\n\n“还好。”\n\n心略微放了下来，毕竟一周没有吃肉了。\n\n回来后暗自庆幸的同时也在想，为什么仅仅隔了一周，“脾大”的症状就消失了呢？不会是我坚持跑步一周就有这样的奇效吗？媳妇从旁指点说：“下周再挂个省立的号看一下。”我觉得是个好主意。\n\n此次体检事件让我明白：\n\n>1. 百度在搜索1+1=2的问题上还是很靠谱的。\n>2. 跑步可能对“脾大”有一定的疗效。\n>3. 九年义务教育还是很有作用的。\n>4. 凡事不要慌，先发个文章。\n\n{% img /images/blog/猿创日记/210905/文章配图.jpeg %}\n\n静待我的后续文章。","source":"_posts/聊个最近体检的事情（一）.md","raw":"---\ntitle: 聊个最近体检的事情（一）\ndate: 2021-09-05 22:27:07\ntags: ['体检']\ncategories: 日记\n---\n\n最近公司组织了年度体检，鉴于过去几年都在安医二附院体检的，又可以携带家属，所以今年还是选择了安医二附院。\n\n早早的过去排队，接受一年一度的大考，毕竟上了年纪，心中还是很忐忑。\n\n其他的项目要么就是很基础的，例如血压身高，口腔眼科，一般不会有什么大问题，或者有没有自己心里应该也有数；要么就是当场出不来结果的，例如血常规，肝功能等等。\n\n彩超可以当场知道结果，并且周围的同事体检大多数也都会在这里翻车。例如：脂肪肝。\n\n等到自己的号，进去，开始。\n\n<!--more-->\n\n“脂肪肝”，医生随口说道，应该是见怪不怪吧。\n\n“脾大，13mm”。一脸懵逼，因为过去几年都没有检查出这个问题，也没听过有同事讨论过这个。\n\n“左肾囊肿”。\n\n听到这里，心都凉了一截。好在早就买了大病医疗险，不过就是一直没配置重疾险（太贵了）。心中一直默念，别再有啥其他的了，回头我复查都得好几天。\n\n下床排队的时候，立马掏出手机开始百度。先看看“脾大”是个什么鬼。百度虽然没能告诉我导致“脾大”的病因，却让我了解到，“脾大”最严重是切除脾。鬼鬼，幸好我接受过九年义务教育，心理素质尚可。\n\n更恐怖的是百度的关联搜索词，我先是点了一下“脾大有什么危害”，随手翻几页，我想我还是上图吧。\n\n{% img /images/blog/猿创日记/210905/百度搜索.jpeg %}\n\n\n难怪最近抖音总是刷到，医生最怕的几种病患。默默的关上了浏览器，换到知乎，那个内容全靠编的平台。总之一句话，病因多种多样，找到病因才能对症下药。看样子跑不了去门诊复查了。\n\n“脂肪肝”就不用查了，大家都很熟了。我是18年体检有轻度脂肪肝，19年和20年体检都没有了。今年应该是伙食太好，又缺少运动。所以还是启动跑步计划吧。\n\n“肾囊肿”，感觉应该是个小问题，没当一回事，简单搜了一下，似乎印证了我的猜想。一般“13mm”可以不用管，超过“40mm”就要注意了。\n\n回家和媳妇报备了一下，准备抽空约个号去看一下“脾大”。说到“左肾囊肿”，媳妇若有所思，好像之前有同事就是这个病，后来突然很严重，还在住院治疗，心中咯噔一下，不会这么巧中招吧。翻一下聊天记录，一模一样。本来准备下周再去复查的，乖乖立马挂号，还是怕死。\n\n鉴于二附院的一些情况，换了个离家近的安医一附院高新分院。先是去泌尿科看“左肾囊肿”，忐忐忑忑。医生说，“你这个太小了，一般小于40mm并且没有尿血、长期腰痛的情况，我们都不需要针对处理，很多人都有这个囊肿，是个良性的。一般定期复查，比如一年一查，不出现快速变大就不用管。反而你要去看看这个脾大是什么情况”。两级反转？\n\n我想我还是三个月半年查一次吧。\n\n转手挂个普外科的号，漫长的等待是煎熬的，毕竟心里总是想着：“会不会要切除？脾大能活多久？”\n\n“你在哪家医院体检的？我们复查一下，有些医院体检结果可能不对。”\n\n“安医二附院。”\n\n“我们还是复查一下吧。”\n\n“你过来做彩超是什么问题？”\n\n“体检报告说：脾大。”\n\n“你这脾一点也不大啊，你在哪家医院体检的？”\n\n我还能说什么呢。随口还是问了句：“我的脂肪肝是轻度还是中度？”\n\n“还好。”\n\n心略微放了下来，毕竟一周没有吃肉了。\n\n回来后暗自庆幸的同时也在想，为什么仅仅隔了一周，“脾大”的症状就消失了呢？不会是我坚持跑步一周就有这样的奇效吗？媳妇从旁指点说：“下周再挂个省立的号看一下。”我觉得是个好主意。\n\n此次体检事件让我明白：\n\n>1. 百度在搜索1+1=2的问题上还是很靠谱的。\n>2. 跑步可能对“脾大”有一定的疗效。\n>3. 九年义务教育还是很有作用的。\n>4. 凡事不要慌，先发个文章。\n\n{% img /images/blog/猿创日记/210905/文章配图.jpeg %}\n\n静待我的后续文章。","slug":"聊个最近体检的事情（一）","published":1,"updated":"2021-09-05T14:41:31.950Z","_id":"ckt7bm2wt000ehv929kdn78gi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近公司组织了年度体检，鉴于过去几年都在安医二附院体检的，又可以携带家属，所以今年还是选择了安医二附院。</p>\n<p>早早的过去排队，接受一年一度的大考，毕竟上了年纪，心中还是很忐忑。</p>\n<p>其他的项目要么就是很基础的，例如血压身高，口腔眼科，一般不会有什么大问题，或者有没有自己心里应该也有数；要么就是当场出不来结果的，例如血常规，肝功能等等。</p>\n<p>彩超可以当场知道结果，并且周围的同事体检大多数也都会在这里翻车。例如：脂肪肝。</p>\n<p>等到自己的号，进去，开始。</p>\n<span id=\"more\"></span>\n\n<p>“脂肪肝”，医生随口说道，应该是见怪不怪吧。</p>\n<p>“脾大，13mm”。一脸懵逼，因为过去几年都没有检查出这个问题，也没听过有同事讨论过这个。</p>\n<p>“左肾囊肿”。</p>\n<p>听到这里，心都凉了一截。好在早就买了大病医疗险，不过就是一直没配置重疾险（太贵了）。心中一直默念，别再有啥其他的了，回头我复查都得好几天。</p>\n<p>下床排队的时候，立马掏出手机开始百度。先看看“脾大”是个什么鬼。百度虽然没能告诉我导致“脾大”的病因，却让我了解到，“脾大”最严重是切除脾。鬼鬼，幸好我接受过九年义务教育，心理素质尚可。</p>\n<p>更恐怖的是百度的关联搜索词，我先是点了一下“脾大有什么危害”，随手翻几页，我想我还是上图吧。</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210905/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2.jpeg\" class=\"\">\n\n\n<p>难怪最近抖音总是刷到，医生最怕的几种病患。默默的关上了浏览器，换到知乎，那个内容全靠编的平台。总之一句话，病因多种多样，找到病因才能对症下药。看样子跑不了去门诊复查了。</p>\n<p>“脂肪肝”就不用查了，大家都很熟了。我是18年体检有轻度脂肪肝，19年和20年体检都没有了。今年应该是伙食太好，又缺少运动。所以还是启动跑步计划吧。</p>\n<p>“肾囊肿”，感觉应该是个小问题，没当一回事，简单搜了一下，似乎印证了我的猜想。一般“13mm”可以不用管，超过“40mm”就要注意了。</p>\n<p>回家和媳妇报备了一下，准备抽空约个号去看一下“脾大”。说到“左肾囊肿”，媳妇若有所思，好像之前有同事就是这个病，后来突然很严重，还在住院治疗，心中咯噔一下，不会这么巧中招吧。翻一下聊天记录，一模一样。本来准备下周再去复查的，乖乖立马挂号，还是怕死。</p>\n<p>鉴于二附院的一些情况，换了个离家近的安医一附院高新分院。先是去泌尿科看“左肾囊肿”，忐忐忑忑。医生说，“你这个太小了，一般小于40mm并且没有尿血、长期腰痛的情况，我们都不需要针对处理，很多人都有这个囊肿，是个良性的。一般定期复查，比如一年一查，不出现快速变大就不用管。反而你要去看看这个脾大是什么情况”。两级反转？</p>\n<p>我想我还是三个月半年查一次吧。</p>\n<p>转手挂个普外科的号，漫长的等待是煎熬的，毕竟心里总是想着：“会不会要切除？脾大能活多久？”</p>\n<p>“你在哪家医院体检的？我们复查一下，有些医院体检结果可能不对。”</p>\n<p>“安医二附院。”</p>\n<p>“我们还是复查一下吧。”</p>\n<p>“你过来做彩超是什么问题？”</p>\n<p>“体检报告说：脾大。”</p>\n<p>“你这脾一点也不大啊，你在哪家医院体检的？”</p>\n<p>我还能说什么呢。随口还是问了句：“我的脂肪肝是轻度还是中度？”</p>\n<p>“还好。”</p>\n<p>心略微放了下来，毕竟一周没有吃肉了。</p>\n<p>回来后暗自庆幸的同时也在想，为什么仅仅隔了一周，“脾大”的症状就消失了呢？不会是我坚持跑步一周就有这样的奇效吗？媳妇从旁指点说：“下周再挂个省立的号看一下。”我觉得是个好主意。</p>\n<p>此次体检事件让我明白：</p>\n<blockquote>\n<ol>\n<li>百度在搜索1+1=2的问题上还是很靠谱的。</li>\n<li>跑步可能对“脾大”有一定的疗效。</li>\n<li>九年义务教育还是很有作用的。</li>\n<li>凡事不要慌，先发个文章。</li>\n</ol>\n</blockquote>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210905/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE.jpeg\" class=\"\">\n\n<p>静待我的后续文章。</p>\n","site":{"data":{}},"excerpt":"<p>最近公司组织了年度体检，鉴于过去几年都在安医二附院体检的，又可以携带家属，所以今年还是选择了安医二附院。</p>\n<p>早早的过去排队，接受一年一度的大考，毕竟上了年纪，心中还是很忐忑。</p>\n<p>其他的项目要么就是很基础的，例如血压身高，口腔眼科，一般不会有什么大问题，或者有没有自己心里应该也有数；要么就是当场出不来结果的，例如血常规，肝功能等等。</p>\n<p>彩超可以当场知道结果，并且周围的同事体检大多数也都会在这里翻车。例如：脂肪肝。</p>\n<p>等到自己的号，进去，开始。</p>","more":"<p>“脂肪肝”，医生随口说道，应该是见怪不怪吧。</p>\n<p>“脾大，13mm”。一脸懵逼，因为过去几年都没有检查出这个问题，也没听过有同事讨论过这个。</p>\n<p>“左肾囊肿”。</p>\n<p>听到这里，心都凉了一截。好在早就买了大病医疗险，不过就是一直没配置重疾险（太贵了）。心中一直默念，别再有啥其他的了，回头我复查都得好几天。</p>\n<p>下床排队的时候，立马掏出手机开始百度。先看看“脾大”是个什么鬼。百度虽然没能告诉我导致“脾大”的病因，却让我了解到，“脾大”最严重是切除脾。鬼鬼，幸好我接受过九年义务教育，心理素质尚可。</p>\n<p>更恐怖的是百度的关联搜索词，我先是点了一下“脾大有什么危害”，随手翻几页，我想我还是上图吧。</p>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210905/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2.jpeg\" class=\"\">\n\n\n<p>难怪最近抖音总是刷到，医生最怕的几种病患。默默的关上了浏览器，换到知乎，那个内容全靠编的平台。总之一句话，病因多种多样，找到病因才能对症下药。看样子跑不了去门诊复查了。</p>\n<p>“脂肪肝”就不用查了，大家都很熟了。我是18年体检有轻度脂肪肝，19年和20年体检都没有了。今年应该是伙食太好，又缺少运动。所以还是启动跑步计划吧。</p>\n<p>“肾囊肿”，感觉应该是个小问题，没当一回事，简单搜了一下，似乎印证了我的猜想。一般“13mm”可以不用管，超过“40mm”就要注意了。</p>\n<p>回家和媳妇报备了一下，准备抽空约个号去看一下“脾大”。说到“左肾囊肿”，媳妇若有所思，好像之前有同事就是这个病，后来突然很严重，还在住院治疗，心中咯噔一下，不会这么巧中招吧。翻一下聊天记录，一模一样。本来准备下周再去复查的，乖乖立马挂号，还是怕死。</p>\n<p>鉴于二附院的一些情况，换了个离家近的安医一附院高新分院。先是去泌尿科看“左肾囊肿”，忐忐忑忑。医生说，“你这个太小了，一般小于40mm并且没有尿血、长期腰痛的情况，我们都不需要针对处理，很多人都有这个囊肿，是个良性的。一般定期复查，比如一年一查，不出现快速变大就不用管。反而你要去看看这个脾大是什么情况”。两级反转？</p>\n<p>我想我还是三个月半年查一次吧。</p>\n<p>转手挂个普外科的号，漫长的等待是煎熬的，毕竟心里总是想着：“会不会要切除？脾大能活多久？”</p>\n<p>“你在哪家医院体检的？我们复查一下，有些医院体检结果可能不对。”</p>\n<p>“安医二附院。”</p>\n<p>“我们还是复查一下吧。”</p>\n<p>“你过来做彩超是什么问题？”</p>\n<p>“体检报告说：脾大。”</p>\n<p>“你这脾一点也不大啊，你在哪家医院体检的？”</p>\n<p>我还能说什么呢。随口还是问了句：“我的脂肪肝是轻度还是中度？”</p>\n<p>“还好。”</p>\n<p>心略微放了下来，毕竟一周没有吃肉了。</p>\n<p>回来后暗自庆幸的同时也在想，为什么仅仅隔了一周，“脾大”的症状就消失了呢？不会是我坚持跑步一周就有这样的奇效吗？媳妇从旁指点说：“下周再挂个省立的号看一下。”我觉得是个好主意。</p>\n<p>此次体检事件让我明白：</p>\n<blockquote>\n<ol>\n<li>百度在搜索1+1=2的问题上还是很靠谱的。</li>\n<li>跑步可能对“脾大”有一定的疗效。</li>\n<li>九年义务教育还是很有作用的。</li>\n<li>凡事不要慌，先发个文章。</li>\n</ol>\n</blockquote>\n<img src=\"/images/blog/%E7%8C%BF%E5%88%9B%E6%97%A5%E8%AE%B0/210905/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE.jpeg\" class=\"\">\n\n<p>静待我的后续文章。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cksu5b14500018c20act8h0qy","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b14g000g8c20bqpzgw7m"},{"post_id":"cksu5b14800038c20a1r2hjsn","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b14k000l8c204zr56zpe"},{"post_id":"cksu5b14b00078c20415g4e2m","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b14l000q8c207d3t8tq8"},{"post_id":"cksu5b14c00088c209sfhg6ce","category_id":"cksu5b14j000k8c2014y6hjk5","_id":"cksu5b14o000x8c20gnltc34g"},{"post_id":"cksu5b14c00098c204ar63cjp","category_id":"cksu5b14j000k8c2014y6hjk5","_id":"cksu5b14p00128c20efit5kny"},{"post_id":"cksu5b14f000d8c2025bp24bj","category_id":"cksu5b14o000w8c20eb1rhssa","_id":"cksu5b14r00198c20cy6ec9zi"},{"post_id":"cksu5b14g000e8c200hk4eu5e","category_id":"cksu5b14q00138c2096m42q4y","_id":"cksu5b14w001g8c2046nk1fha"},{"post_id":"cksu5b14r00178c206ghb9hwe","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b14x001k8c20avzn7bh2"},{"post_id":"cksu5b14h000i8c20gvsygsuv","category_id":"cksu5b14q00138c2096m42q4y","_id":"cksu5b14y001n8c209qg9eha0"},{"post_id":"cksu5b14v001d8c20h11w13m4","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b14z001q8c200s7j6qkf"},{"post_id":"cksu5b14w001h8c208rcq7abf","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b150001u8c20539res9r"},{"post_id":"cksu5b14x001l8c207dhecrko","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b151001x8c20hg3zflvo"},{"post_id":"cksu5b14i000j8c206z6jbc3q","category_id":"cksu5b14w001f8c20b9qp5lbp","_id":"cksu5b15200218c20cs05347t"},{"post_id":"cksu5b14y001o8c20968m1r5c","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15300248c20bk4wghzq"},{"post_id":"cksu5b14z001s8c203f9f6zrd","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15400278c20hu0vfskb"},{"post_id":"cksu5b14k000n8c20e8uz5x56","category_id":"cksu5b14w001f8c20b9qp5lbp","_id":"cksu5b155002b8c2049bb1koy"},{"post_id":"cksu5b150001v8c207haw1ta9","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b156002e8c2081hbc6to"},{"post_id":"cksu5b151001z8c201cpn5pmx","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b157002i8c209ibr46za"},{"post_id":"cksu5b14l000p8c20dmkra20l","category_id":"cksu5b150001w8c20939f00cu","_id":"cksu5b159002l8c20abhge03j"},{"post_id":"cksu5b15200228c2061lu2r1e","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15a002p8c20b3u4gt0b"},{"post_id":"cksu5b14m000u8c208v63ge86","category_id":"cksu5b14w001f8c20b9qp5lbp","_id":"cksu5b15b002s8c2060ik2vby"},{"post_id":"cksu5b15400298c20fmatfetb","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15c002w8c20ejv90xqt"},{"post_id":"cksu5b155002c8c204zk2eo3r","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15d002z8c20gh092cmw"},{"post_id":"cksu5b14n000v8c20hrbj6k4z","category_id":"cksu5b14w001f8c20b9qp5lbp","_id":"cksu5b15e00338c20hj8m7yw2"},{"post_id":"cksu5b156002g8c2033qe46yi","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15f00368c20bn7mgvvr"},{"post_id":"cksu5b14o000y8c206rlc8xok","category_id":"cksu5b14w001f8c20b9qp5lbp","_id":"cksu5b15g003a8c200wzahl8d"},{"post_id":"cksu5b159002m8c20c9uv2hlw","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15h003d8c20cpk339mi"},{"post_id":"cksu5b14p00118c20ee9ba59x","category_id":"cksu5b14w001f8c20b9qp5lbp","_id":"cksu5b15i003h8c20dnjognef"},{"post_id":"cksu5b15b002t8c201sai9n9n","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15j003k8c208vusfwyh"},{"post_id":"cksu5b15c002x8c20eynudfzd","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15k003o8c208dhg51vp"},{"post_id":"cksu5b14q00158c20hgmf8c8n","category_id":"cksu5b14w001f8c20b9qp5lbp","_id":"cksu5b15l003r8c20gvreeu6m"},{"post_id":"cksu5b15d00308c20dylu5uix","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15m003v8c20f7s1eek6"},{"post_id":"cksu5b15e00348c2054gp1amc","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15n003x8c200thq10jq"},{"post_id":"cksu5b15g003b8c203i5dck8c","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15o00448c20217c1qqu"},{"post_id":"cksu5b15300258c2058ny0yor","category_id":"cksu5b15g00398c20gtrq2h9r","_id":"cksu5b15p00488c202tjz6pul"},{"post_id":"cksu5b15h003e8c206iph7c0p","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15q004b8c2014wkh3w8"},{"post_id":"cksu5b15i003i8c203t7c73p1","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15r004f8c20a2rzhags"},{"post_id":"cksu5b15k003p8c20gj5w66jo","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15t004n8c201v3uhcf5"},{"post_id":"cksu5b15n003z8c20dyggaur8","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15v004v8c20aai617oz"},{"post_id":"cksu5b15o00458c207469elnr","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b15v004z8c201j3rguii"},{"post_id":"cksu5b15l003s8c204p6k7d0h","category_id":"cksu5b15o00438c20bpgge1f0","_id":"cksu5b15w00518c20173p7bke"},{"post_id":"cksu5b15p00498c204eu5f7wj","category_id":"cksu5b15o00438c20bpgge1f0","_id":"cksu5b15w00538c208lhh3610"},{"post_id":"cksu5b15q004c8c20arxs0s8u","category_id":"cksu5b15s004h8c208xzeft1y","_id":"cksu5b15w00588c205eu0f43u"},{"post_id":"cksu5b16d007k8c203a3a5hp7","category_id":"cksu5b14900048c205pk9hloz","_id":"cksu5b16f007o8c20gi2tcmjh"},{"post_id":"cksu5b16f007n8c2038nm5js1","category_id":"cksu5b15s004h8c208xzeft1y","_id":"cksu5b16g007s8c20fmb35u6t"},{"post_id":"cksu6ytia000050204fvm3y2h","category_id":"cksu6ytie00015020edlt6tn7","_id":"cksu6ytir000450203xrf94lc"},{"post_id":"cksu7bit000025820emp99xoz","category_id":"cksu6ytie00015020edlt6tn7","_id":"cksu7bit2000358209idt8ycu"},{"post_id":"cksvv513i000bqg925bv782pj","category_id":"cksvux7zs0006qg924p9kbvan","_id":"cksvv513l000eqg92feq18ail"},{"post_id":"cksvv6qo7000fqg92ctjn6jxz","category_id":"cksvux7zs0006qg924p9kbvan","_id":"cksvv6qo9000iqg92edieb9qu"},{"post_id":"cksu5b14s001b8c201xypbk3n","category_id":"cksu5b14900048c205pk9hloz","_id":"ckt7bm2w60000hv92h8t2chdj"},{"post_id":"cksu5b15a002q8c206xls5cr2","category_id":"cksu5b14900048c205pk9hloz","_id":"ckt7bm2w70002hv9251q9hh9o"},{"post_id":"cksu5b158002j8c20fcmgbwz7","category_id":"cksu5b14900048c205pk9hloz","_id":"ckt7bm2wl0004hv92ck576ipa"},{"post_id":"cksu5b15f00378c205a9xag7m","category_id":"cksu5b14900048c205pk9hloz","_id":"ckt7bm2wo0006hv927sq60vcv"},{"post_id":"cksze3iaw00005j921vp1g066","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2wp0008hv925iqn1qjb"},{"post_id":"cksu5b15j003l8c2073t65ahk","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2wp0009hv92blut7ipu"},{"post_id":"cksu5b15m003w8c201ehs57c4","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2ws000chv92698ofm6y"},{"post_id":"cksu5b15n00428c20aeftf81x","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2wt000dhv92haanaph0"},{"post_id":"cksu5b15s004g8c20aosxgxiz","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2wv000hhv92e3odchar"},{"post_id":"cksu5b15s004k8c207vmd529b","category_id":"cksu5b15o00438c20bpgge1f0","_id":"ckt7bm2wv000jhv92a7ky4dp5"},{"post_id":"cksu5b15t004o8c205hsydcjw","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2ww000mhv925rzj5gcb"},{"post_id":"cksu5b16e007l8c204l7b0se8","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2ww000ohv92er85ho1h"},{"post_id":"cksu5b15u004r8c204cqz7b8g","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2ww000phv92bs7b9gds"},{"post_id":"ckt7bm2wt000ehv929kdn78gi","category_id":"cksvux7zs0006qg924p9kbvan","_id":"ckt7bm2ww000qhv920zo21x6p"}],"PostTag":[{"post_id":"cksu5b14500018c20act8h0qy","tag_id":"cksu5b14a00058c203p09hejy","_id":"cksu5b14f000c8c206fmhd3jk"},{"post_id":"cksu5b14800038c20a1r2hjsn","tag_id":"cksu5b14d000b8c20362z6gca","_id":"cksu5b14l000o8c20dxz49g65"},{"post_id":"cksu5b14800038c20a1r2hjsn","tag_id":"cksu5b14h000h8c209v7q4cvo","_id":"cksu5b14m000s8c200meq40k4"},{"post_id":"cksu5b14b00078c20415g4e2m","tag_id":"cksu5b14k000m8c2033bz2yav","_id":"cksu5b14p00108c204mku36pv"},{"post_id":"cksu5b14b00078c20415g4e2m","tag_id":"cksu5b14m000t8c208ew2dl1f","_id":"cksu5b14q00148c20549v0340"},{"post_id":"cksu5b14c00088c209sfhg6ce","tag_id":"cksu5b14o000z8c201k7o44td","_id":"cksu5b14r00188c20bkhuc7pn"},{"post_id":"cksu5b14c00098c204ar63cjp","tag_id":"cksu5b14o000z8c201k7o44td","_id":"cksu5b14v001e8c20419ehwfu"},{"post_id":"cksu5b14s001b8c201xypbk3n","tag_id":"cksu5b14m000t8c208ew2dl1f","_id":"cksu5b14w001i8c203lrt0lzp"},{"post_id":"cksu5b14f000d8c2025bp24bj","tag_id":"cksu5b14u001c8c20f32n4nij","_id":"cksu5b14y001m8c20g85b4kw8"},{"post_id":"cksu5b14g000e8c200hk4eu5e","tag_id":"cksu5b14x001j8c20bvntfyoj","_id":"cksu5b150001t8c20c1bd0zr2"},{"post_id":"cksu5b14h000i8c20gvsygsuv","tag_id":"cksu5b14x001j8c20bvntfyoj","_id":"cksu5b15200208c20g9tmd8jp"},{"post_id":"cksu5b14i000j8c206z6jbc3q","tag_id":"cksu5b151001y8c204n5q4jow","_id":"cksu5b15400288c201dvghdzl"},{"post_id":"cksu5b14k000n8c20e8uz5x56","tag_id":"cksu5b151001y8c204n5q4jow","_id":"cksu5b156002f8c20fezob4wa"},{"post_id":"cksu5b14l000p8c20dmkra20l","tag_id":"cksu5b156002d8c204zr02uuo","_id":"cksu5b159002n8c20hxyb0xw3"},{"post_id":"cksu5b14m000u8c208v63ge86","tag_id":"cksu5b151001y8c204n5q4jow","_id":"cksu5b15b002u8c209kx65vhu"},{"post_id":"cksu5b14n000v8c20hrbj6k4z","tag_id":"cksu5b151001y8c204n5q4jow","_id":"cksu5b15d00318c2087k343t3"},{"post_id":"cksu5b14o000y8c206rlc8xok","tag_id":"cksu5b151001y8c204n5q4jow","_id":"cksu5b15f00388c20bq4z5rfy"},{"post_id":"cksu5b14p00118c20ee9ba59x","tag_id":"cksu5b151001y8c204n5q4jow","_id":"cksu5b15h003f8c20d2wg3pig"},{"post_id":"cksu5b14q00158c20hgmf8c8n","tag_id":"cksu5b151001y8c204n5q4jow","_id":"cksu5b15j003m8c2093eo8ucn"},{"post_id":"cksu5b14r00178c206ghb9hwe","tag_id":"cksu5b15i003j8c201fw06e1v","_id":"cksu5b15m003t8c201vkrfsum"},{"post_id":"cksu5b14v001d8c20h11w13m4","tag_id":"cksu5b15l003q8c20814h74uy","_id":"cksu5b15n00408c2000bubrhb"},{"post_id":"cksu5b15n00428c20aeftf81x","tag_id":"cksu5b156002d8c204zr02uuo","_id":"cksu5b15p00478c20ghv26t6w"},{"post_id":"cksu5b14w001h8c208rcq7abf","tag_id":"cksu5b14k000m8c2033bz2yav","_id":"cksu5b15q004a8c209pj46mka"},{"post_id":"cksu5b14w001h8c208rcq7abf","tag_id":"cksu5b15n003y8c205rsl8laz","_id":"cksu5b15r004e8c20b93oaqhi"},{"post_id":"cksu5b14x001l8c207dhecrko","tag_id":"cksu5b15p00468c205brdamfh","_id":"cksu5b15s004i8c206sebhc1n"},{"post_id":"cksu5b15s004g8c20aosxgxiz","tag_id":"cksu5b156002d8c204zr02uuo","_id":"cksu5b15t004m8c20bo3p6cwu"},{"post_id":"cksu5b14y001o8c20968m1r5c","tag_id":"cksu5b15r004d8c20973w40hv","_id":"cksu5b15u004p8c2081t24u6u"},{"post_id":"cksu5b14z001s8c203f9f6zrd","tag_id":"cksu5b15t004l8c20ew1xe3hq","_id":"cksu5b15v004u8c208di75yed"},{"post_id":"cksu5b150001v8c207haw1ta9","tag_id":"cksu5b15v004t8c20c0tubs0y","_id":"cksu5b15w00528c201t5h4khb"},{"post_id":"cksu5b150001v8c207haw1ta9","tag_id":"cksu5b15v004x8c202bvhbvs1","_id":"cksu5b15w00548c20dpp817in"},{"post_id":"cksu5b151001z8c201cpn5pmx","tag_id":"cksu5b15w00508c20c3g90a82","_id":"cksu5b15x005d8c205kqkgqjm"},{"post_id":"cksu5b151001z8c201cpn5pmx","tag_id":"cksu5b15w00558c205g3icb2n","_id":"cksu5b15x005e8c2044nm4eo9"},{"post_id":"cksu5b151001z8c201cpn5pmx","tag_id":"cksu5b15v004x8c202bvhbvs1","_id":"cksu5b15y005g8c20gm7ib8di"},{"post_id":"cksu5b151001z8c201cpn5pmx","tag_id":"cksu5b15x005b8c200po99ys9","_id":"cksu5b15y005h8c20dljp4vga"},{"post_id":"cksu5b15200228c2061lu2r1e","tag_id":"cksu5b15x005c8c202ylth0qh","_id":"cksu5b15y005j8c209d9z3kvv"},{"post_id":"cksu5b15200228c2061lu2r1e","tag_id":"cksu5b15x005f8c20gr3b4kli","_id":"cksu5b15y005k8c20d1oe4gf7"},{"post_id":"cksu5b15300258c2058ny0yor","tag_id":"cksu5b15y005i8c20g9t52ywh","_id":"cksu5b15y005m8c20gt3b5cud"},{"post_id":"cksu5b15400298c20fmatfetb","tag_id":"cksu5b15y005l8c20gwir15dr","_id":"cksu5b15y005o8c20dvjj84os"},{"post_id":"cksu5b155002c8c204zk2eo3r","tag_id":"cksu5b15y005n8c20a95j0tk5","_id":"cksu5b15z005r8c205svf68qd"},{"post_id":"cksu5b155002c8c204zk2eo3r","tag_id":"cksu5b15z005p8c20cpx46zjj","_id":"cksu5b15z005s8c20emia66js"},{"post_id":"cksu5b156002g8c2033qe46yi","tag_id":"cksu5b15z005q8c20dave0z1p","_id":"cksu5b15z005u8c20g0np2olz"},{"post_id":"cksu5b156002g8c2033qe46yi","tag_id":"cksu5b14h000h8c209v7q4cvo","_id":"cksu5b15z005v8c20g38p3m30"},{"post_id":"cksu5b159002m8c20c9uv2hlw","tag_id":"cksu5b15z005w8c2068hmevhr","_id":"cksu5b160005z8c208b2gef9t"},{"post_id":"cksu5b15a002q8c206xls5cr2","tag_id":"cksu5b160005y8c20hjem2z3u","_id":"cksu5b16200628c20d9ufepw7"},{"post_id":"cksu5b15a002q8c206xls5cr2","tag_id":"cksu5b16000608c203tzo4yv0","_id":"cksu5b16300638c202iz21s75"},{"post_id":"cksu5b15b002t8c201sai9n9n","tag_id":"cksu5b16000618c20bm2ofx18","_id":"cksu5b16300658c20c8m5fnfa"},{"post_id":"cksu5b15c002x8c20eynudfzd","tag_id":"cksu5b16300648c202tulb16i","_id":"cksu5b16300678c209pcugz90"},{"post_id":"cksu5b15d00308c20dylu5uix","tag_id":"cksu5b16300668c20hmsed4b1","_id":"cksu5b164006a8c20h34j5rnb"},{"post_id":"cksu5b15d00308c20dylu5uix","tag_id":"cksu5b16300688c20af5i35iq","_id":"cksu5b164006b8c205ut912rr"},{"post_id":"cksu5b15e00348c2054gp1amc","tag_id":"cksu5b16400698c203as23jcm","_id":"cksu5b164006d8c204ped3krk"},{"post_id":"cksu5b15f00378c205a9xag7m","tag_id":"cksu5b164006c8c20ah8phnbh","_id":"cksu5b165006h8c20fhqd7i3i"},{"post_id":"cksu5b15f00378c205a9xag7m","tag_id":"cksu5b164006e8c20bbne51ix","_id":"cksu5b165006i8c20ctb65hw4"},{"post_id":"cksu5b15f00378c205a9xag7m","tag_id":"cksu5b165006f8c208fyshod4","_id":"cksu5b165006k8c2053qz7nrs"},{"post_id":"cksu5b15g003b8c203i5dck8c","tag_id":"cksu5b165006g8c204bp3ew55","_id":"cksu5b165006l8c20d1i15p03"},{"post_id":"cksu5b15g003b8c203i5dck8c","tag_id":"cksu5b14a00058c203p09hejy","_id":"cksu5b166006n8c20fz8q7129"},{"post_id":"cksu5b15h003e8c206iph7c0p","tag_id":"cksu5b165006j8c20hcjj3exq","_id":"cksu5b166006o8c204zssbe2n"},{"post_id":"cksu5b15i003i8c203t7c73p1","tag_id":"cksu5b166006m8c20dyym9j6u","_id":"cksu5b166006q8c20d180e4rk"},{"post_id":"cksu5b15j003l8c2073t65ahk","tag_id":"cksu5b166006p8c209l6v1ek1","_id":"cksu5b167006s8c20cwcj0ib5"},{"post_id":"cksu5b15k003p8c20gj5w66jo","tag_id":"cksu5b15n003y8c205rsl8laz","_id":"cksu5b168006v8c20csaah4ks"},{"post_id":"cksu5b15k003p8c20gj5w66jo","tag_id":"cksu5b167006t8c20eh1m1oh6","_id":"cksu5b168006w8c20fki92zl9"},{"post_id":"cksu5b15l003s8c204p6k7d0h","tag_id":"cksu5b168006u8c200a9b2w22","_id":"cksu5b168006z8c207dike92g"},{"post_id":"cksu5b15l003s8c204p6k7d0h","tag_id":"cksu5b168006x8c20f6zc7y4g","_id":"cksu5b16800708c20hksb5ik7"},{"post_id":"cksu5b15m003w8c201ehs57c4","tag_id":"cksu5b168006y8c201d0b4pev","_id":"cksu5b16900728c2030jhg1zu"},{"post_id":"cksu5b15n003z8c20dyggaur8","tag_id":"cksu5b16800718c207b5f3flr","_id":"cksu5b16900748c207tiw3wj0"},{"post_id":"cksu5b15o00458c207469elnr","tag_id":"cksu5b16900738c201m4thy8n","_id":"cksu5b16a00768c20c7sx13f2"},{"post_id":"cksu5b15p00498c204eu5f7wj","tag_id":"cksu5b168006u8c200a9b2w22","_id":"cksu5b16a00798c209zewd5p6"},{"post_id":"cksu5b15p00498c204eu5f7wj","tag_id":"cksu5b16a00778c204p40e4f7","_id":"cksu5b16a007a8c200vwmh9t2"},{"post_id":"cksu5b15q004c8c20arxs0s8u","tag_id":"cksu5b168006u8c200a9b2w22","_id":"cksu5b16b007c8c20cedagsbk"},{"post_id":"cksu5b15t004o8c205hsydcjw","tag_id":"cksu5b16b007d8c20d4zremqy","_id":"cksu5b16b007h8c2046cz9wcp"},{"post_id":"cksu5b15t004o8c205hsydcjw","tag_id":"cksu5b16400698c203as23jcm","_id":"cksu5b16c007i8c201j83ctjg"},{"post_id":"cksu5b15u004r8c204cqz7b8g","tag_id":"cksu5b16b007g8c2007z96dbz","_id":"cksu5b16c007j8c20dkp04781"},{"post_id":"cksu5b16d007k8c203a3a5hp7","tag_id":"cksu5b16e007m8c20b9l44laq","_id":"cksu5b16g007r8c20fapnfnfi"},{"post_id":"cksu5b16f007n8c2038nm5js1","tag_id":"cksu5b16f007q8c20fy8n0a8d","_id":"cksu5b16g007t8c205s9h13bp"},{"post_id":"cksu6ytia000050204fvm3y2h","tag_id":"cksu7bism00005820hseq4lw0","_id":"cksu7bisz00015820a8qj0ew1"},{"post_id":"cksvv513i000bqg925bv782pj","tag_id":"cksvuvupi0002qg928i5hclgb","_id":"cksvv513l000cqg92digzga4k"},{"post_id":"cksvv513i000bqg925bv782pj","tag_id":"cksvuw5zw0004qg927g42ckwe","_id":"cksvv513l000dqg92cvhkflog"},{"post_id":"cksvv6qo7000fqg92ctjn6jxz","tag_id":"cksvuvupi0002qg928i5hclgb","_id":"cksvv6qo9000gqg9251k18jlh"},{"post_id":"cksvv6qo7000fqg92ctjn6jxz","tag_id":"cksvuw5zw0004qg927g42ckwe","_id":"cksvv6qo9000hqg9267pv2icr"},{"post_id":"cksu5b158002j8c20fcmgbwz7","tag_id":"cksu5b14h000h8c209v7q4cvo","_id":"ckt7bm2w60001hv922vw9dj48"},{"post_id":"cksze3iaw00005j921vp1g066","tag_id":"ckt7bm2w90003hv928xvw02m4","_id":"ckt7bm2wo0007hv9250vqf01l"},{"post_id":"cksu7bit000025820emp99xoz","tag_id":"ckt7bm2wn0005hv922r23bjkb","_id":"ckt7bm2wq000ahv92dxnlc7p5"},{"post_id":"cksu5b15s004k8c207vmd529b","tag_id":"cksu5b168006u8c200a9b2w22","_id":"ckt7bm2wu000ghv924cnfekrd"},{"post_id":"cksu5b15s004k8c207vmd529b","tag_id":"ckt7bm2wr000bhv925zgx0hgl","_id":"ckt7bm2wv000ihv920un746j9"},{"post_id":"cksu5b16e007l8c204l7b0se8","tag_id":"ckt7bm2wu000fhv926efbg5bx","_id":"ckt7bm2wv000lhv92dk178as6"},{"post_id":"ckt7bm2wt000ehv929kdn78gi","tag_id":"ckt7bm2wv000khv920n2908kk","_id":"ckt7bm2ww000nhv92awzmd2uf"}],"Tag":[{"name":"AppStore","_id":"cksu5b14a00058c203p09hejy"},{"name":"iOS8","_id":"cksu5b14d000b8c20362z6gca"},{"name":"AutoLayout","_id":"cksu5b14h000h8c209v7q4cvo"},{"name":"Swift4","_id":"cksu5b14k000m8c2033bz2yav"},{"name":"CocoaPods","_id":"cksu5b14m000t8c208ew2dl1f"},{"name":"FFmpeg","_id":"cksu5b14o000z8c201k7o44td"},{"name":"Flutter","_id":"cksu5b14u001c8c20f32n4nij"},{"name":"Geohash","_id":"cksu5b14x001j8c20bvntfyoj"},{"name":"Github","_id":"cksu5b151001y8c204n5q4jow"},{"name":"博客","_id":"cksu5b156002d8c204zr02uuo"},{"name":"NSArray","_id":"cksu5b15i003j8c201fw06e1v"},{"name":"Runtime","_id":"cksu5b15l003q8c20814h74uy"},{"name":"iOS","_id":"cksu5b15n003y8c205rsl8laz"},{"name":"Swift","_id":"cksu5b15p00468c205brdamfh"},{"name":"ScrollView","_id":"cksu5b15r004d8c20973w40hv"},{"name":"UITableView","_id":"cksu5b15t004l8c20ew1xe3hq"},{"name":"shell","_id":"cksu5b15v004t8c20c0tubs0y"},{"name":"自动打包","_id":"cksu5b15v004x8c202bvhbvs1"},{"name":"xcodebuild","_id":"cksu5b15w00508c20c3g90a82"},{"name":"Jenkins","_id":"cksu5b15w00558c205g3icb2n"},{"name":"Xcode9","_id":"cksu5b15x005b8c200po99ys9"},{"name":"多Target","_id":"cksu5b15x005c8c202ylth0qh"},{"name":"多版本","_id":"cksu5b15x005f8c20gr3b4kli"},{"name":"cocos2d","_id":"cksu5b15y005i8c20g9t52ywh"},{"name":"TabBar","_id":"cksu5b15y005l8c20gwir15dr"},{"name":"LazyScrollView","_id":"cksu5b15y005n8c20a95j0tk5"},{"name":"高性能","_id":"cksu5b15z005p8c20cpx46zjj"},{"name":"iOS10","_id":"cksu5b15z005q8c20dave0z1p"},{"name":"iOS随笔","_id":"cksu5b15z005t8c207dzbfhvs"},{"name":"Log","_id":"cksu5b15z005w8c2068hmevhr"},{"name":"音量","_id":"cksu5b160005y8c20hjem2z3u"},{"name":"MPVolumeView","_id":"cksu5b16000608c203tzo4yv0"},{"name":"单例","_id":"cksu5b16000618c20bm2ofx18"},{"name":"静态库","_id":"cksu5b16300648c202tulb16i"},{"name":"UDID","_id":"cksu5b16300668c20hmsed4b1"},{"name":"唯一标志","_id":"cksu5b16300688c20af5i35iq"},{"name":"电话","_id":"cksu5b16400698c203as23jcm"},{"name":"打电话","_id":"cksu5b164006c8c20ah8phnbh"},{"name":"蓝牙","_id":"cksu5b164006e8c20bbne51ix"},{"name":"PBAP","_id":"cksu5b165006f8c208fyshod4"},{"name":"翻译","_id":"cksu5b165006g8c204bp3ew55"},{"name":"拼音","_id":"cksu5b165006j8c20hcjj3exq"},{"name":"Git","_id":"cksu5b166006m8c20dyym9j6u"},{"name":"疯言疯语","_id":"cksu5b166006p8c209l6v1ek1"},{"name":"面试","_id":"cksu5b167006t8c20eh1m1oh6"},{"name":"小程序","_id":"cksu5b168006u8c200a9b2w22"},{"name":"LeanCloud","_id":"cksu5b168006x8c20f6zc7y4g"},{"name":"公众号","_id":"cksu5b168006y8c201d0b4pev"},{"name":"定位","_id":"cksu5b16800718c207b5f3flr"},{"name":"圆形头像","_id":"cksu5b16900738c201m4thy8n"},{"name":"赞赏","_id":"cksu5b16a00778c204p40e4f7"},{"name":"小程序, Canvas","_id":"cksu5b16a007b8c20aq2a05bu"},{"name":"小飞鱼","_id":"cksu5b16b007d8c20d4zremqy"},{"name":"开源协议","_id":"cksu5b16b007g8c2007z96dbz"},{"name":"编译","_id":"cksu5b16e007m8c20b9l44laq"},{"name":"古诗","_id":"cksu5b16f007q8c20fy8n0a8d"},{"name":"Android","_id":"cksu6ytip0002502053519nq2"},{"name":"Tinker","_id":"cksu7bism00005820hseq4lw0"},{"name":"日记","_id":"cksvuvupi0002qg928i5hclgb"},{"name":"吃瓜","_id":"cksvuw5zw0004qg927g42ckwe"},{"name":"上线","_id":"ckt7bm2w90003hv928xvw02m4"},{"name":"冲突","_id":"ckt7bm2wn0005hv922r23bjkb"},{"name":"Canvas","_id":"ckt7bm2wr000bhv925zgx0hgl"},{"name":"计算器","_id":"ckt7bm2wu000fhv926efbg5bx"},{"name":"体检","_id":"ckt7bm2wv000khv920n2908kk"}]}}